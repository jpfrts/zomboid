--[[	v1.6							
OPTION CONFIGURED MULTI-DISTRIBUTION METHOD SYSTEM DESIGNED BY ARSENAL[26].								
THIS IS A WORK IN PROGRESS, AND AS SUCHâ€¦ NO PERMISSION IS GRANTED FOR USE OF								
ANY PORTION OF THIS FILE FOR 3RD PARTY MODS, TWEAKS, PATCHES, OR ANYTHING OF								
THE LIKE. THAT MEANS YOU DO NOT HAVE PERMISSION TO CHANGE A FEW NUMBERS								
AROUND AND POST ANY OF THIS AS YOUR OWN MOD.								
								
SPECIAL THANKS, KUDOS, AND CREDITS TO DETOX, FOR SUGGESTING, AND SHARING THIS								
METHOD TO USE SANDBOX SETTINGS FOR THE GUNFIGHTER MOD OPTIONS.								
]]								
								
								
local function initGunFighterSandboxDistro()								
								
--	ClearAllDistributionItems(Distributions[1].gunstore, true)							
--	ClearAllDistributionItems(Distributions[1].gunstorestorage, true)							
--	ClearAllDistributionItems(Distributions[1].policestorage, true)							
--	ClearAllDistributionItems(Distributions[1].security, true)							
--	ClearAllDistributionItems(Distributions[1].armystorage, true)							
--	ClearAllDistributionItems(Distributions[1].hunting, true)							
--	ClearAllDistributionItems(Distributions[1].armysurplus, true)							
								
	local	wBOW		-- TYPE				
	local	wFLAME						
	local	wGREN						
	local	wMINI						
	local	wLMG						
	local	wSEMI						
	local	wAUTO						
	local	wSMG						
	local	wLEVER						
	local	wREV						
	local	wPUMP						
	local	wBOLT						
	local	wBREAK						
	local	wUSA		-- ORIGIN				
	local	wSOV						
	local	wKOR						
	local	wPAC						
	local	wCZE						
	local	wEUR						
	local	wISR						
	local	wREST						
	local	wBMG		-- CALIBER				
	local	w4g						
	local	w10g						
	local	w12g						
	local	w20g						
	local	w3006						
	local	w308						
	local	w762x54r						
	local	w545x39						
	local	w762x39						
	local	w556						
	local	w223						
	local	w4570						
	local	w45LC						
	local	w44						
	local	w45						
	local	w357						
	local	w9						
	local	w57						
	local	w380						
	local	w22						
	local	wBB						
								
	local	Case						
	local	Suppress						
	local	Optic						
	local	Light						
	local	Part						
	local	AmmoCan						
	local	AmmoBox						
	local	StdMag						
	local	ExtMag						
	local	DrumMag						
	local	PolyCan						
	local	SmKnife						
	local	LgKnife						
	local	Sword						
	local	Axe						
	local	Blunt						
	local	Spear						
	local	PowerTool						
	local	Armor						
	local	Reload						
								
	local	x90						
	local	CIVxLEO						
	local	CIVxMIL						
	local	LEOxCIV						
	local	LEOxMIL						
	local	MILxNON						
	local	SECxNON						
	local	HNTxNON						
	local	SURxNON						
								
	local	GUNRollGUN						
	local	GUNRollPART						
	local	GUNRollAMMO						
	local	GUNRollARMOR						
	local	LEORollGUN						
	--local	LEORollPART						
	local	LEORollAMMO						
	local	LEORollARMOR						
	local	MILRollGUN						
	--local	MILRollPART						
	local	MILRollAMMO						
	local	MILRollARMOR						
	local	SECRollGUN						
	--local	SECRollPART						
	local	SECRollAMMO						
	local	SECRollARMOR						
	local	SURRollGUN						
	local	SURRollPART						
	local	SURRollAMMO						
	local	SURRollARMOR						
	local	HNTRollGUN						
	local	HNTRollPART						
	local	HNTRollAMMO						
	local	HNTRollARMOR						
								
	local	CIVx						
	local	LEOx						
	local	MILx						
	local	SECx						
	local	HNTx						
	local	SURx						
	local	CIVammo						
	local	LEOammo						
	local	MILammo						
	local	SECammo						
	local	HNTammo						
	local	SURammo						
	local	REGION						
								
	local	xBOW	=	0				
	local	xFLAME	=	0				
	local	xGREN	=	0				
	local	xMINI	=	0				
	local	xLMG	=	0				
	local	xSEMI	=	0				
	local	xAUTO	=	0				
	local	xSMG	=	0				
	local	xLEVER	=	0				
	local	xREV	=	0				
	local	xPUMP	=	0				
	local	xBOLT	=	0				
	local	xBREAK	=	0				
	local	xUSA	=	0				
	local	xSOV	=	0				
	local	xKOR	=	0				
	local	xPAC	=	0				
	local	xCZE	=	0				
	local	xEUR	=	0				
	local	xISR	=	0				
	local	xREST	=	0				
	local	xBMG	=	0				
	local	x4g	=	0				
	local	x10g	=	0				
	local	x12g	=	0				
	local	x20g	=	0				
	local	x3006	=	0				
	local	x308	=	0				
	local	x762x54r	=	0				
	local	x545x39	=	0				
	local	x762x39	=	0				
	local	x556	=	0				
	local	x223	=	0				
	local	x4570	=	0				
	local	x45LC	=	0				
	local	x44	=	0				
	local	x45	=	0				
	local	x357	=	0				
	local	x9	=	0				
	local	x57	=	0				
	local	x380	=	0				
	local	x22	=	0				
	local	xBB	=	0				
								
	local	xCCW	=	0				
	local	xCase	=	0				
	local	xSuppress	=	0				
	local	xOptic	=	0				
	local	xLight	=	0				
	local	xPart	=	0				
	local	xAmmoCan	=	0				
	local	xAmmoBox	=	0				
	local	xStdMag	=	0				
	local	xExtMag	=	0				
	local	xDrumMag	=	0				
	local	xPolyCan	=	0				
	local	xSmKnife	=	0				
	local	xLgKnife	=	0				
	local	xSword	=	0				
	local	xAxe	=	0				
	local	xBlunt	=	0				
	local	xSpear	=	0				
	local	xPowerTool	=	0				
	local	xArmor	=	0				
	local	xReload	=	0				
								
	local	MILxUSA	=	0				
	local	MILxEUR	=	0				
	local	MILxSOV	=	0				
	local	MILxCZE	=	0				
	local	MILxKOR	=	0				
	local	MILxPAC	=	0				
	local	MILxISR	=	0				
								
	local	CCW	=	0				
	local	VLR	=	0				
								
	--------------------------------------------------							
	--	THIS PATH IS FOR SINGLE PLAYER ONLY			--			
	--	SINGLE PLAYER is NOT SERVER					--	
	--	SINGLE PLAYER is NOT CLIENT					--	
	--	CHECKS FOR MOD OPTIONS AS ITS REQUIRED		--				
	--	FAILING ANY OF THOSE CHECKS GOES To			--			
	--	SANDBOX OPTIONS (MULTI-PLAYER MODE)	which	--				
	--	Should include SERVERS AND LOCAL HOST		--				
	--	In which case, will ignore ModOptions, but	--					
	--	if enabled (for other mods) will still go	--					
	--	SANDBOX PATH for Multi-Player MODE			--			
	--------------------------------------------------							
								
	if	not isServer() and not isClient() and ModOptions and ModOptions.getInstance then						
		local	settings	=	GUNFIGHTER.OPTIONS			
		print("NOT SERVER... NOT CLIENT... MOD-OPTIONS DETECTED... SINGLE-PLAYER MODE")						
		ModOptions:loadFile()						
								
		wBOW	=	round(((GUNFIGHTER.OPTIONS.options.dropdown20) - 1) / 10,1)				
		wFLAME	=	round(((GUNFIGHTER.OPTIONS.options.dropdown21) - 1) / 10,1)				
		wGREN	=	round(((GUNFIGHTER.OPTIONS.options.dropdown22) - 1) / 10,1)				
		wMINI	=	round(((GUNFIGHTER.OPTIONS.options.dropdown23) - 1) / 10,1)				
		wLMG	=	round(((GUNFIGHTER.OPTIONS.options.dropdown24) - 1) / 10,1)				
		wSEMI	=	round(((GUNFIGHTER.OPTIONS.options.dropdown25) - 1) / 10,1)				
		wAUTO	=	round(((GUNFIGHTER.OPTIONS.options.dropdown26) - 1) / 10,1)				
		wSMG	=	round(((GUNFIGHTER.OPTIONS.options.dropdown27) - 1) / 10,1)				
		wLEVER	=	round(((GUNFIGHTER.OPTIONS.options.dropdown28) - 1) / 10,1)				
		wREV	=	round(((GUNFIGHTER.OPTIONS.options.dropdown29) - 1) / 10,1)				
		wPUMP	=	round(((GUNFIGHTER.OPTIONS.options.dropdown30) - 1) / 10,1)				
		wBOLT	=	round(((GUNFIGHTER.OPTIONS.options.dropdown31) - 1) / 10,1)				
		wBREAK	=	round(((GUNFIGHTER.OPTIONS.options.dropdown32) - 1) / 10,1)				
		wUSA	=	round(((GUNFIGHTER.OPTIONS.options.dropdown33) - 1) / 10,1)				
		wSOV	=	round(((GUNFIGHTER.OPTIONS.options.dropdown34) - 1) / 10,1)				
		wKOR	=	round(((GUNFIGHTER.OPTIONS.options.dropdown35) - 1) / 10,1)				
		wPAC	=	round(((GUNFIGHTER.OPTIONS.options.dropdown36) - 1) / 10,1)				
		wCZE	=	round(((GUNFIGHTER.OPTIONS.options.dropdown37) - 1) / 10,1)				
		wEUR	=	round(((GUNFIGHTER.OPTIONS.options.dropdown38) - 1) / 10,1)				
		wISR	=	round(((GUNFIGHTER.OPTIONS.options.dropdown39) - 1) / 10,1)				
		wREST	=	round(((GUNFIGHTER.OPTIONS.options.dropdown40) - 1) / 10,1)				
		wBMG	=	round(((GUNFIGHTER.OPTIONS.options.dropdown41) - 1) / 10,1)				
		w4g	=	round(((GUNFIGHTER.OPTIONS.options.dropdown42) - 1) / 10,1)				
		w10g	=	round(((GUNFIGHTER.OPTIONS.options.dropdown43) - 1) / 10,1)				
		w12g	=	round(((GUNFIGHTER.OPTIONS.options.dropdown44) - 1) / 10,1)				
		w20g	=	round(((GUNFIGHTER.OPTIONS.options.dropdown45) - 1) / 10,1)				
		w3006	=	round(((GUNFIGHTER.OPTIONS.options.dropdown46) - 1) / 10,1)				
		w308	=	round(((GUNFIGHTER.OPTIONS.options.dropdown47) - 1) / 10,1)				
		w762x54r	=	round(((GUNFIGHTER.OPTIONS.options.dropdown48) - 1) / 10,1)				
		w545x39	=	round(((GUNFIGHTER.OPTIONS.options.dropdown49) - 1) / 10,1)				
		w762x39	=	round(((GUNFIGHTER.OPTIONS.options.dropdown50) - 1) / 10,1)				
		w556	=	round(((GUNFIGHTER.OPTIONS.options.dropdown51) - 1) / 10,1)				
		w223	=	round(((GUNFIGHTER.OPTIONS.options.dropdown52) - 1) / 10,1)				
		w45LC	=	round(((GUNFIGHTER.OPTIONS.options.dropdown53) - 1) / 10,1)				
		w4570	=	round(((GUNFIGHTER.OPTIONS.options.dropdown54) - 1) / 10,1)				
		w44	=	round(((GUNFIGHTER.OPTIONS.options.dropdown55) - 1) / 10,1)				
		w45	=	round(((GUNFIGHTER.OPTIONS.options.dropdown56) - 1) / 10,1)				
		w357	=	round(((GUNFIGHTER.OPTIONS.options.dropdown57) - 1) / 10,1)				
		w9	=	round(((GUNFIGHTER.OPTIONS.options.dropdown58) - 1) / 10,1)				
		w57	=	round(((GUNFIGHTER.OPTIONS.options.dropdown59) - 1) / 10,1)				
		w380	=	round(((GUNFIGHTER.OPTIONS.options.dropdown60) - 1) / 10,1)				
		w22	=	round(((GUNFIGHTER.OPTIONS.options.dropdown61) - 1) / 10,1)				
		wBB	=	round(((GUNFIGHTER.OPTIONS.options.dropdown62) - 1) / 10,1)				
								
		CCW 	=	round((GUNFIGHTER.OPTIONS.options.dropdown127)^4 / 50000 - 0.00002,4)				
		Case	=	round((GUNFIGHTER.OPTIONS.options.dropdown63)^4 / 50000 - 0.00002,4)				
		Suppress 	=	round(((GUNFIGHTER.OPTIONS.options.dropdown64) - 1) / 2,1)				
		Optic	=	round(((GUNFIGHTER.OPTIONS.options.dropdown65) - 1) / 4,1)				
		Light	=	round(((GUNFIGHTER.OPTIONS.options.dropdown66) - 1) / 2,1)				
		Part	=	round(((GUNFIGHTER.OPTIONS.options.dropdown67) - 1) / 4,1)				
		AmmoCan	=	round(((GUNFIGHTER.OPTIONS.options.dropdown68) - 1) * 2,1)				
		AmmoBox	=	round(((GUNFIGHTER.OPTIONS.options.dropdown69) - 1) * 2,1)				
		StdMag	=	round((GUNFIGHTER.OPTIONS.options.dropdown70) - 1,1)				
		ExtMag	=	round((GUNFIGHTER.OPTIONS.options.dropdown71) - 1,1) 				
		DrumMag	=	round((GUNFIGHTER.OPTIONS.options.dropdown72) - 1,1)				
		PolyCan	=	round(((GUNFIGHTER.OPTIONS.options.dropdown73) - 1) /10,1)				
		SmKnife	=	round(((GUNFIGHTER.OPTIONS.options.dropdown74) - 1) / 2,1)				
		LgKnife	=	round(((GUNFIGHTER.OPTIONS.options.dropdown75) - 1) / 2,1)				
		Sword	=	round(((GUNFIGHTER.OPTIONS.options.dropdown76) - 1) / 100,1)				
		Axe 	=	round(((GUNFIGHTER.OPTIONS.options.dropdown77) - 1) / 2,1)				
		Blunt	=	round(((GUNFIGHTER.OPTIONS.options.dropdown78) - 1) / 2,1)				
		Spear	=	round(((GUNFIGHTER.OPTIONS.options.dropdown79) - 1) / 2,1)				
		PowerTool	=	round(((GUNFIGHTER.OPTIONS.options.dropdown129) - 1) /10,1)				
		Armor	=	round(((GUNFIGHTER.OPTIONS.options.dropdown80) - 1) / 20,1)				
		Reload	=	round(((GUNFIGHTER.OPTIONS.options.dropdown130) - 1) / 10,1)				
		VLR 	=	round(((GUNFIGHTER.OPTIONS.options.dropdown128) - 1) / 20,1)				
								
		x90 	=	(GUNFIGHTER.OPTIONS.options.dropdown81)				
		CIVxLEO	=	(GUNFIGHTER.OPTIONS.options.dropdown82)				
		CIVxMIL	=	(GUNFIGHTER.OPTIONS.options.dropdown83)				
		LEOxCIV	=	(GUNFIGHTER.OPTIONS.options.dropdown84)				
		LEOxMIL	=	(GUNFIGHTER.OPTIONS.options.dropdown85)				
		MILxNON	=	(GUNFIGHTER.OPTIONS.options.dropdown86)				
		SECxNON	=	(GUNFIGHTER.OPTIONS.options.dropdown87)				
		HNTxNON	=	(GUNFIGHTER.OPTIONS.options.dropdown88)				
		SURxNON	=	(GUNFIGHTER.OPTIONS.options.dropdown89)				
								
		GUNRollGUN	=	(GUNFIGHTER.OPTIONS.options.dropdown90)				
		GUNRollAMMO	=	(GUNFIGHTER.OPTIONS.options.dropdown91)				
		GUNRollPART	=	(GUNFIGHTER.OPTIONS.options.dropdown92)				
		GUNRollARMOR	=	(GUNFIGHTER.OPTIONS.options.dropdown93)				
		LEORollGUN	=	(GUNFIGHTER.OPTIONS.options.dropdown94)				
		LEORollAMMO	=	(GUNFIGHTER.OPTIONS.options.dropdown95)				
		LEORollPART	=	(GUNFIGHTER.OPTIONS.options.dropdown96)				
		LEORollARMOR	=	(GUNFIGHTER.OPTIONS.options.dropdown97)				
		MILRollGUN	=	(GUNFIGHTER.OPTIONS.options.dropdown98)				
		MILRollAMMO	=	(GUNFIGHTER.OPTIONS.options.dropdown99)				
		MILRollPART	=	(GUNFIGHTER.OPTIONS.options.dropdown100)				
		MILRollARMOR	=	(GUNFIGHTER.OPTIONS.options.dropdown101)				
		SECRollGUN	=	(GUNFIGHTER.OPTIONS.options.dropdown102)				
		SECRollAMMO	=	(GUNFIGHTER.OPTIONS.options.dropdown103)				
		SECRollPART	=	(GUNFIGHTER.OPTIONS.options.dropdown104)				
		SECRollARMOR	=	(GUNFIGHTER.OPTIONS.options.dropdown105)				
		SURRollGUN	=	(GUNFIGHTER.OPTIONS.options.dropdown106)				
		SURRollAMMO	=	(GUNFIGHTER.OPTIONS.options.dropdown107)				
		SURRollPART	=	(GUNFIGHTER.OPTIONS.options.dropdown108)				
		SURRollARMOR	=	(GUNFIGHTER.OPTIONS.options.dropdown109)				
		HNTRollGUN	=	(GUNFIGHTER.OPTIONS.options.dropdown110)				
		HNTRollAMMO	=	(GUNFIGHTER.OPTIONS.options.dropdown111)				
		HNTRollPART	=	(GUNFIGHTER.OPTIONS.options.dropdown112)				
		HNTRollARMOR	=	(GUNFIGHTER.OPTIONS.options.dropdown113)				
								
		CIVx	=	round((GUNFIGHTER.OPTIONS.options.dropdown114) / 10 + 1 - 0.1, 1)				
		LEOx	=	round((GUNFIGHTER.OPTIONS.options.dropdown115) / 10 + 1 - 0.1, 1)				
		MILx	=	round((GUNFIGHTER.OPTIONS.options.dropdown116) / 10 + 1 - 0.1, 1)				
		SECx	=	round((GUNFIGHTER.OPTIONS.options.dropdown117) / 10 + 1 - 0.1, 1)				
		HNTx	=	round((GUNFIGHTER.OPTIONS.options.dropdown118) / 10 + 1 - 0.1, 1)				
		SURx	=	round((GUNFIGHTER.OPTIONS.options.dropdown119) / 10 + 1 - 0.1, 1)				
								
		if (GUNFIGHTER.OPTIONS.options.box120)	== true then	CIVammo	= false else	CIVammo	= true end	
		if (GUNFIGHTER.OPTIONS.options.box121)	== true then	LEOammo	= false else	LEOammo	= true end	
		if (GUNFIGHTER.OPTIONS.options.box122)	== true then	MILammo	= false else	MILammo	= true end	
		if (GUNFIGHTER.OPTIONS.options.box123)	== true then	SECammo	= false else	SECammo	= true end	
		if (GUNFIGHTER.OPTIONS.options.box124)	== true then	HNTammo	= false else	HNTammo	= true end	
		if (GUNFIGHTER.OPTIONS.options.box125)	== true then	SURammo	= false else	SURammo	= true end	
								
		REGION	=	(GUNFIGHTER.OPTIONS.options.dropdown126)				
								
	else	print("MULTI-PLAYER MODE IGNORE MOD-OPTIONS")						
		wBOW	=	round(((SandboxVars.A26.EnumTypeBOW) - 1) / 10,1)				
		wFLAME	=	round(((SandboxVars.A26.EnumTypeFLAME) - 1) / 10,1)				
		wGREN	=	round(((SandboxVars.A26.EnumTypeGREN) - 1) / 10,1)				
		wMINI	=	round(((SandboxVars.A26.EnumTypeMINI) - 1) / 10,1)				
		wLMG	=	round(((SandboxVars.A26.EnumTypeLMG) - 1) / 10,1)				
		wSEMI	=	round(((SandboxVars.A26.EnumTypeSEMI) - 1) / 10,1)				
		wAUTO	=	round(((SandboxVars.A26.EnumTypeAUTO) - 1) / 10,1)				
		wSMG	=	round(((SandboxVars.A26.EnumTypeSMG) - 1) / 10,1)				
		wLEVER	=	round(((SandboxVars.A26.EnumTypeLEVER) - 1) / 10,1)				
		wREV	=	round(((SandboxVars.A26.EnumTypeREV) - 1) / 10,1)				
		wPUMP	=	round(((SandboxVars.A26.EnumTypePUMP) - 1) / 10,1)				
		wBOLT	=	round(((SandboxVars.A26.EnumTypeBOLT) - 1) / 10,1)				
		wBREAK	=	round(((SandboxVars.A26.EnumTypeBREAK) - 1) / 10,1)				
		wUSA	=	round(((SandboxVars.A26.EnumOriginUSA) - 1) / 10,1)				
		wSOV	=	round(((SandboxVars.A26.EnumOriginSOV) - 1) / 10,1)				
		wKOR	=	round(((SandboxVars.A26.EnumOriginKOR) - 1) / 10,1)				
		wPAC	=	round(((SandboxVars.A26.EnumOriginPAC) - 1) / 10,1)				
		wCZE	=	round(((SandboxVars.A26.EnumOriginCZE) - 1) / 10,1)				
		wEUR	=	round(((SandboxVars.A26.EnumOriginEUR) - 1) / 10,1)				
		wISR	=	round(((SandboxVars.A26.EnumOriginISR) - 1) / 10,1)				
		wREST	=	round(((SandboxVars.A26.EnumOriginREST) - 1) / 10,1)				
		wBMG	=	round(((SandboxVars.A26.EnumCaliber50BMG) - 1) / 10,1)				
		w4g	=	round(((SandboxVars.A26.EnumCaliber4gShot) - 1) / 10,1)				
		w10g	=	round(((SandboxVars.A26.EnumCaliber10gShot) - 1) / 10,1)				
		w12g	=	round(((SandboxVars.A26.EnumCaliber12gShot) - 1) / 10,1)				
		w20g	=	round(((SandboxVars.A26.EnumCaliber20gShot) - 1) / 10,1)				
		w3006	=	round(((SandboxVars.A26.EnumCaliber3006SPG) - 1) / 10,1)				
		w308	=	round(((SandboxVars.A26.EnumCaliber308WIN) - 1) / 10,1)				
		w762x54r	=	round(((SandboxVars.A26.EnumCaliber762x54mmR) - 1) / 10,1)				
		w545x39	=	round(((SandboxVars.A26.EnumCaliber545x39mm) - 1) / 10,1)				
		w762x39	=	round(((SandboxVars.A26.EnumCaliber762x39mm) - 1) / 10,1)				
		w556	=	round(((SandboxVars.A26.EnumCaliber556x45mm) - 1) / 10,1)				
		w223	=	round(((SandboxVars.A26.EnumCaliber223REM) - 1) / 10,1)				
		w45LC	=	round(((SandboxVars.A26.EnumCaliber45LC410g) - 1) / 10,1)				
		w4570	=	round(((SandboxVars.A26.EnumCaliber4570) - 1) / 10,1)				
		w44	=	round(((SandboxVars.A26.EnumCaliber44MAG) - 1) / 10,1)				
		w45	=	round(((SandboxVars.A26.EnumCaliber45ACP) - 1) / 10,1)				
		w357	=	round(((SandboxVars.A26.EnumCaliber38SPC) - 1) / 10,1)				
		w9	=	round(((SandboxVars.A26.EnumCaliber9mm) - 1) / 10,1)				
		w57	=	round(((SandboxVars.A26.EnumCaliber57x28mm) - 1) / 10,1)				
		w380	=	round(((SandboxVars.A26.EnumCaliber380ACP) - 1) / 10,1)				
		w22	=	round(((SandboxVars.A26.EnumCaliber22LR) - 1) / 10,1)				
		wBB	=	round(((SandboxVars.A26.EnumCaliber177BB) - 1) / 10,1)				
								
		CCW	=	round((SandboxVars.A26.EnumZombieCCW)^4 / 50000 - 0.00002,4)				
		Case	=	round((SandboxVars.A26.EnumRandomCases)^4 / 50000 - 0.00002,4)				
		Suppress 	=	round(((SandboxVars.A26.EnumAttachementSuppressor) - 1) / 2,1)				
		Optic	=	round(((SandboxVars.A26.EnumAttachementOptics) - 1) / 4,1)				
		Light	=	round(((SandboxVars.A26.EnumAttachementLightLaser) - 1) / 2,1)				
		Part	=	round(((SandboxVars.A26.EnumAttachementAllOther) - 1) / 4,1)				
		AmmoCan	=	round(((SandboxVars.A26.EnumAmmoCan) -1) * 2,1)				
		AmmoBox	=	round(((SandboxVars.A26.EnumAmmoBox) - 1) * 2,1)				
		StdMag	=	round((SandboxVars.A26.EnumStdMag) - 1,1)				
		ExtMag	=	round((SandboxVars.A26.EnumExtMag) - 1,1)				
		DrumMag	=	round((SandboxVars.A26.EnumDrumMag) - 1,1)				
		PolyCan	=	round(((SandboxVars.A26.EnumPolyCan) - 1) /10,1)				
		SmKnife	=	round(((SandboxVars.A26.EnumMeleeKnifeSmall) - 1) / 2,1)				
		LgKnife	=	round(((SandboxVars.A26.EnumMeleeKnifeLarge) - 1) / 2,1)				
		Sword	=	round(((SandboxVars.A26.EnumMeleeSword) -1) / 100 ,1)				
		Axe	=	round(((SandboxVars.A26.EnumMeleeAxe) - 1) / 2,1)				
		Blunt	=	round(((SandboxVars.A26.EnumMeleeBlunt) - 1) / 2,1)				
		Spear	=	round(((SandboxVars.A26.EnumMeleeSpear) - 1) / 2,1)				
		PowerTool	=	round(((SandboxVars.A26.EnumPowerTool) - 1) /10,1)				
		Armor	=	round(((SandboxVars.A26.EnumArmor) - 1) / 20,1)				
		Reload	=	round(((SandboxVars.A26.EnumReloadingItems) - 1) / 10,1)				
		VLR	=	round(((SandboxVars.A26.EnumVLR) - 1) / 20,1)				
								
		x90	=	(SandboxVars.A26.EnumPost1992Production)				
		CIVxLEO	=	(SandboxVars.A26.EnumCIVxLEO)				
		CIVxMIL	=	(SandboxVars.A26.EnumCIVxMIL)				
		LEOxCIV	=	(SandboxVars.A26.EnumLEOxCIV)				
		LEOxMIL	=	(SandboxVars.A26.EnumLEOxMIL)				
		MILxNON	=	(SandboxVars.A26.EnumMILxNON)				
		SECxNON	=	(SandboxVars.A26.EnumSECxNON)				
		HNTxNON	=	(SandboxVars.A26.EnumHNTxNON)				
		SURxNON	=	(SandboxVars.A26.EnumSURxNON)				
								
		GUNRollGUN	=	(SandboxVars.A26.EnumGUNRollGUN)				
		GUNRollAMMO	=	(SandboxVars.A26.EnumGUNRollAMMO)				
		GUNRollPART	=	(SandboxVars.A26.EnumGUNRollPART)				
		GUNRollARMOR	=	(SandboxVars.A26.EnumGUNRollARMOR)				
		LEORollGUN	=	(SandboxVars.A26.EnumLEORollGUN)				
		LEORollAMMO	=	(SandboxVars.A26.EnumLEORollAMMO)				
--		LEORollPART	=	(SandboxVars.A26.EnumLEORollPART)				
		LEORollARMOR	=	(SandboxVars.A26.EnumLEORollARMOR)				
		MILRollGUN	=	(SandboxVars.A26.EnumMILRollGUN)				
		MILRollAMMO	=	(SandboxVars.A26.EnumMILRollAMMO)				
--		MILRollPART	=	(SandboxVars.A26.EnumMILRollPART)				
		MILRollARMOR	=	(SandboxVars.A26.EnumMILRollARMOR)				
		SECRollGUN	=	(SandboxVars.A26.EnumSECRollGUN)				
		SECRollAMMO	=	(SandboxVars.A26.EnumSECRollAMMO)				
--		SECRollPART	=	(SandboxVars.A26.EnumSECRollPART)				
		SECRollARMOR	=	(SandboxVars.A26.EnumSECRollARMOR)				
		SURRollGUN	=	(SandboxVars.A26.EnumSURRollGUN)				
		SURRollAMMO	=	(SandboxVars.A26.EnumSURRollAMMO)				
		SURRollPART	=	(SandboxVars.A26.EnumSURRollPART)				
		SURRollARMOR	=	(SandboxVars.A26.EnumSURRollARMOR)				
		HNTRollGUN	=	(SandboxVars.A26.EnumHNTRollGUN)				
		HNTRollAMMO	=	(SandboxVars.A26.EnumHNTRollAMMO)				
		HNTRollPART	=	(SandboxVars.A26.EnumHNTRollPART)				
		HNTRollARMOR	=	(SandboxVars.A26.EnumHNTRollARMOR)				
								
		CIVx	=	round((SandboxVars.A26.EnumCIVx) / 10 + 1 - 0.1, 1)				
		LEOx	=	round((SandboxVars.A26.EnumLEOx) / 10 + 1 - 0.1, 1)				
		MILx	=	round((SandboxVars.A26.EnumMILx) / 10 + 1 - 0.1, 1)				
		SECx	=	round((SandboxVars.A26.EnumSECx) / 10 + 1 - 0.1, 1)				
		HNTx	=	round((SandboxVars.A26.EnumHNTx) / 10 + 1 - 0.1, 1)				
		SURx	=	round((SandboxVars.A26.EnumSURx) / 10 + 1 - 0.1, 1)				
								
		if (SandboxVars.A26.BoolCIVammo)	== true then	CIVammo	= false else	CIVammo	= true end	
		if (SandboxVars.A26.BoolLEOammo)	== true then	LEOammo	= false else	LEOammo	= true end	
		if (SandboxVars.A26.BoolMILammo)	== true then	MILammo	= false else	MILammo	= true end	
		if (SandboxVars.A26.BoolSECammo)	== true then	SECammo	= false else	SECammo	= true end	
		if (SandboxVars.A26.BoolHNTammo)	== true then	HNTammo	= false else	HNTammo	= true end	
		if (SandboxVars.A26.BoolSURammo)	== true then	SURammo	= false else	SURammo	= true end	
								
		REGION	=	(SandboxVars.A26.EnumMILRegion)				
	end							
								
								
--	xBOW	=	1 -	wBOW				
--	xFLAME	=	1 -	wFLAME				
--	xGREN	=	1 -	wGREN				
	xMINI	=	1 -	wMINI				
	xLMG	=	1 -	wLMG				
	xSEMI	=	1 -	wSEMI				
	xAUTO	=	1 -	wAUTO				
	xSMG	=	1 -	wSMG				
	xLEVER	=	1 -	wLEVER				
	xREV	=	1 -	wREV				
	xPUMP	=	1 -	wPUMP				
	xBOLT	=	1 -	wBOLT				
	xBREAK	=	1 -	wBREAK				
	xUSA	=	1 -	wUSA				
	xSOV	=	1 -	wSOV				
	xKOR	=	1 -	wKOR				
	xPAC	=	1 -	wPAC				
	xCZE	=	1 -	wCZE				
	xEUR	=	1 -	wEUR				
	xISR	=	1 -	wISR				
	xREST	=	1 -	wREST				
--	xBMG	=	1 -	wBMG				
--	x4g	=	1 -	w4g				
--	x10g	=	1 -	w10g				
--	x12g	=	1 -	w12g				
--	x20g	=	1 -	w20g				
--	x3006	=	1 -	w3006				
--	x308	=	1 -	w308				
--	x762x54r	=	1 -	w762x54r				
--	x545x39	=	1 -	w545x39				
--	x762x39	=	1 -	w762x39				
--	x556	=	1 -	w556				
--	x223	=	1 -	w223				
--	x4570	=	1 -	w45LC				
--	x45LC	=	1 -	w4570				
--	x44	=	1 -	w44				
--	x45	=	1 -	w45				
--	x357	=	1 -	w357				
--	x9	=	1 -	w9				
--	x57	=	1 -	w57				
--	x380	=	1 -	w380				
--	x22	=	1 -	w22				
--	xBB	=	1 -	wBB				
								
	if wBOW <= 0 then xBOW = 100; wBOW = 1; print("REMOVED wBOW") end							
	if wFLAME <= 0 then xFLAME = 100; wFLAME = 1; print("REMOVED wFLAME") end							
	if wGREN <= 0 then xGREN = 100; wGREN = 1; print("REMOVED wGREN") end							
	if wMINI <= 0 then xMINI = 100; wMINI = 1; print("REMOVED wMINI") end							
	if wLMG <= 0 then xLMG = 100; wLMG = 1; print("REMOVED wLMG") end							
	if wSEMI <= 0 then xSEMI = 100; wSEMI = 1; print("REMOVED wSEMI") end							
	if wAUTO <= 0 then xAUTO = 100; wAUTO = 1; print("REMOVED wAUTO") end							
	if wSMG <= 0 then xSMG = 100; wSMG = 1; print("REMOVED wSMG") end							
	if wLEVER <= 0 then xLEVER = 100; wLEVER = 1; print("REMOVED wLEVER") end							
	if wREV <= 0 then xREV = 100; wREV = 1; print("REMOVED wREV") end							
	if wPUMP <= 0 then xPUMP = 100; wPUMP = 1; print("REMOVED wPUMP") end							
	if wBOLT <= 0 then xBOLT = 100; wBOLT = 1; print("REMOVED wBOLT") end							
	if wBREAK <= 0 then xBREAK = 100; wBREAK = 1; print("REMOVED wBREAK") end							
	if wUSA <= 0 then xUSA = 100; wUSA = 1; print("REMOVED wUSA") end							
	if wSOV <= 0 then xSOV = 100; wSOV = 1; print("REMOVED wSOV") end							
	if wKOR <= 0 then xKOR = 100; wKOR = 1; print("REMOVED wKOR") end							
	if wPAC <= 0 then xPAC = 100; wPAC = 1; print("REMOVED wPAC") end							
	if wCZE <= 0 then xCZE = 100; wCZE = 1; print("REMOVED wCZE") end							
	if wEUR <= 0 then xEUR = 100; wEUR = 1; print("REMOVED wEUR") end							
	if wISR <= 0 then xISR = 100; wISR = 1; print("REMOVED wISR") end							
	if wREST <= 0 then xREST = 100; wREST = 1; print("REMOVED wREST") end							
	if wBMG <= 0 then xBMG = 100; wBMG = 1; print("REMOVED wBMG") end							
	if w4g <= 0 then x4g = 100; w4g = 1; print("REMOVED w4g") end							
	if w10g <= 0 then x10g = 100; w10g = 1; print("REMOVED w10g") end							
	if w12g <= 0 then x12g = 100; w12g = 1; print("REMOVED w12g") end							
	if w20g <= 0 then x20g = 100; w20g = 1; print("REMOVED w20g") end							
	if w3006 <= 0 then x3006 = 100; w3006 = 1; print("REMOVED w3006") end							
	if w308 <= 0 then x308 = 100; w308 = 1; print("REMOVED w308") end							
	if w762x54r <= 0 then x762x54r = 100; w762x54r = 1; print("REMOVED w762x54r") end							
	if w545x39 <= 0 then x545x39 = 100; w545x39 = 1; print("REMOVED w545x39") end							
	if w762x39 <= 0 then x762x39 = 100; w762x39 = 1; print("REMOVED w762x39") end							
	if w556 <= 0 then x556 = 100; w556 = 1; print("REMOVED w556") end							
	if w223 <= 0 then x223 = 100; w223 = 1; print("REMOVED w223") end							
	if w4570 <= 0 then x4570 = 100; w4570 = 1; print("REMOVED w4570") end							
	if w45LC <= 0 then x45LC = 100; w45LC = 1; print("REMOVED w45LC") end							
	if w44 <= 0 then x44 = 100; w44 = 1; print("REMOVED w44") end							
	if w45 <= 0 then x45 = 100; w45 = 1; print("REMOVED w45") end							
	if w357 <= 0 then x357 = 100; w357 = 1; print("REMOVED w357") end							
	if w9 <= 0 then x9 = 100; w9 = 1; print("REMOVED w9") end							
	if w57 <= 0 then x57 = 100; w57 = 1; print("REMOVED w57") end							
	if w380 <= 0 then x380 = 100; w380 = 1; print("REMOVED w380") end							
	if w22 <= 0 then x22 = 100; w22 = 1; print("REMOVED w22") end							
	if wBB <= 0 then xBB = 100; wBB = 1; print("REMOVED wBB") end							
								
	if CCW <= 0 then xCCW = 100; CCW = 1; print("REMOVED CCW") end							
	if Case <= 0 then xCase = 100; Case = 1; print("REMOVED Case") end							
	if Suppress <= 0 then xSuppress = 100; Suppress = 1; print("REMOVED Suppress") end							
	if Optic <= 0 then xOptic = 100; Optic = 1; print("REMOVED Optic") end							
	if Light <= 0 then xLight = 100; Light = 1; print("REMOVED Light") end							
	if Part <= 0 then xPart = 100; Part = 1; print("REMOVED Part") end							
	if AmmoCan <= 0 then xAmmoCan = 100; AmmoCan = 1; print("REMOVED AmmoCan") end							
	if AmmoBox <= 0 then xAmmoBox = 100; AmmoBox = 1; print("REMOVED AmmoBox") end							
	if StdMag <= 0 then xStdMag = 100; StdMag = 1; print("REMOVED StdMag") end							
	if ExtMag <= 0 then xExtMag = 100; ExtMag = 1; print("REMOVED ExtMag") end							
	if DrumMag <= 0 then xDrumMag = 100; DrumMag = 1; print("REMOVED DrumMag") end							
	if PolyCan <= 0 then xPolyCan = 100; PolyCan = 1; print("REMOVED PolyCan") end							
	if SmKnife <= 0 then xSmKnife = 100; SmKnife = 1; print("REMOVED SmKnife") end							
	if LgKnife <= 0 then xLgKnife = 100; LgKnife = 1; print("REMOVED LgKnife") end							
	if Sword <= 0 then xSword = 100; Sword = 1; print("REMOVED Sword") end							
	if Axe <= 0 then xAxe = 100; Axe = 1; print("REMOVED Axe") end							
	if Blunt <= 0 then xBlunt = 100; Blunt = 1; print("REMOVED Blunt") end							
	if Spear <= 0 then xSpear = 100; Spear = 1; print("REMOVED Spear") end							
	if PowerTool <= 0 then xPowerTool = 100; PowerTool = 1; print("REMOVED PowerTool") end							
	if Armor <= 0 then xArmor = 100; Armor = 1; print("REMOVED Armor") end							
	if Reload <= 0 then xReload = 100; Reload = 1; print("REMOVED Reload") end							
								
	if x90	== 1 then x90 =	100					
	elseif x90	== 2 then x90 =	0.75					
	elseif x90	== 3 then x90 =	0.5					
	elseif x90	== 4 then x90 =	0.25					
	elseif x90	== 5 then x90 =	0					
	end							
								
	if CIVxLEO	== 1 then CIVxLEO =	100					
	elseif CIVxLEO	== 2 then CIVxLEO =	0.75					
	elseif CIVxLEO	== 3 then CIVxLEO =	0.5					
	elseif CIVxLEO	== 4 then CIVxLEO =	0.25					
	elseif CIVxLEO	== 5 then CIVxLEO =	0					
	end							
								
	if CIVxMIL	== 1 then CIVxMIL =	100					
	elseif CIVxMIL	== 2 then CIVxMIL =	0.75					
	elseif CIVxMIL	== 3 then CIVxMIL =	0.5					
	elseif CIVxMIL	== 4 then CIVxMIL =	0.25					
	elseif CIVxMIL	== 5 then CIVxMIL =	0					
	end							
								
	if LEOxCIV	== 1 then LEOxCIV =	100					
	elseif LEOxCIV	== 2 then LEOxCIV =	0.75					
	elseif LEOxCIV	== 3 then LEOxCIV =	0.5					
	elseif LEOxCIV	== 4 then LEOxCIV =	0.25					
	elseif LEOxCIV	== 5 then LEOxCIV =	0					
	end							
								
	if LEOxMIL	== 1 then LEOxMIL =	100					
	elseif LEOxMIL	== 2 then LEOxMIL =	0.75					
	elseif LEOxMIL	== 3 then LEOxMIL =	0.5					
	elseif LEOxMIL	== 4 then LEOxMIL =	0.25					
	elseif LEOxMIL	== 5 then LEOxMIL =	0					
	end							
								
	if MILxNON	== 1 then MILxNON =	100					
	elseif MILxNON	== 2 then MILxNON =	0.75					
	elseif MILxNON	== 3 then MILxNON =	0.5					
	elseif MILxNON	== 4 then MILxNON =	0.25					
	elseif MILxNON	== 5 then MILxNON =	0					
	end							
								
	if SECxNON	== 1 then SECxNON =	100					
	elseif SECxNON	== 2 then SECxNON =	0.75					
	elseif SECxNON	== 3 then SECxNON =	0.5					
	elseif SECxNON	== 4 then SECxNON =	0.25					
	elseif SECxNON	== 5 then SECxNON =	0					
	end							
								
	if HNTxNON	== 1 then HNTxNON =	100					
	elseif HNTxNON	== 2 then HNTxNON =	0.75					
	elseif HNTxNON	== 3 then HNTxNON =	0.5					
	elseif HNTxNON	== 4 then HNTxNON =	0.25					
	elseif HNTxNON	== 5 then HNTxNON =	0					
	end							
								
	if SURxNON	== 1 then SURxNON =	100					
	elseif SURxNON	== 2 then SURxNON =	0.75					
	elseif SURxNON	== 3 then SURxNON =	0.5					
	elseif SURxNON	== 4 then SURxNON =	0.25					
	elseif SURxNON	== 5 then SURxNON =	0					
	end							
								
	if REGION == 1 then		MILxUSA = 100		-- ("United States")			
	elseif REGION == 2 then		MILxSOV = 100		-- ("Soviet Union")			
	elseif REGION == 3 then		MILxCZE = 100		-- ("Czech")			
	elseif REGION == 4 then		MILxKOR = 100		-- ("Korea")			
	elseif REGION == 5 then		MILxPAC = 100		-- ("China")			
	elseif REGION == 6 then		MILxEUR = 100		-- ("Europe")			
	elseif REGION == 7 then		MILxISR = 100		-- ("Israel")			
	end							
								
								
	print	("TYPE - Bow"	,	wBOW	,	xBOW	)	
	print	("TYPE - Flamer"	,	wFLAME	,	xFLAME	)	
	print	("TYPE - Launcher"	,	wGREN	,	xGREN	)	
	print	("TYPE - Minigun"	,	wMINI	,	xMINI	)	
	print	("TYPE - Machine-Gun"	,	wLMG	,	xLMG	)	
	print	("TYPE - Auto Rifle Cal"	,	wAUTO	,	xAUTO	)	
	print	("TYPE - Semi-Auto"	,	wSEMI	,	xSEMI	)	
	print	("TYPE - Auto Pistol Cal"	,	wSMG	,	xSMG	)	
	print	("TYPE - Lever-Action"	,	wLEVER	,	xLEVER	)	
	print	("TYPE - Revolver"	,	wREV	,	xREV	)	
	print	("TYPE - Pump-Action"	,	wPUMP	,	xPUMP	)	
	print	("TYPE - Bolt-Action"	,	wBOLT	,	xBOLT	)	
	print	("TYPE - Break-Barrel"	,	wBREAK	,	xBREAK	)	
	print	("REGION - USA"	,	wUSA	,	xUSA	)	
	print	("REGION - SOV"	,	wSOV	,	xSOV	)	
	print	("REGION - KOR"	,	wKOR	,	xKOR	)	
	print	("REGION - PAC"	,	wPAC	,	xPAC	)	
	print	("REGION - CZE"	,	wCZE	,	xCZE	)	
	print	("REGION - EUR"	,	wEUR	,	xEUR	)	
	print	("REGION - ISR"	,	wISR	,	xISR	)	
	print	("REGION - REST"	,	wREST	,	xREST	)	
	print	("CALIBER - 50 BMG"	,	wBMG	,	xBMG	)	
	print	("CALIBER - Shotgun 4g"	,	w4g	,	x4g	)	
	print	("CALIBER - Shotgun 10g"	,	w10g	,	x10g	)	
	print	("CALIBER - Shotgun 12g"	,	w12g	,	x12g	)	
	print	("CALIBER - Shotgun 20g"	,	w20g	,	x20g	)	
	print	("CALIBER - 30-06 SPG"	,	w3006	,	x3006	)	
	print	("CALIBER - 308 WIN"	,	w308	,	x308	)	
	print	("CALIBER - 762x54mm R"	,	w762x54r	,	x762x54r	)	
	print	("CALIBER - 545x39mm"	,	w545x39	,	x545x39	)	
	print	("CALIBER - 762x39mm"	,	w762x39	,	x762x39	)	
	print	("CALIBER - 556x45mm"	,	w556	,	x556	)	
	print	("CALIBER - 223 REM"	,	w223	,	x223	)	
	print	("CALIBER - 45-70 GOV"	,	w4570	,	x4570	)	
	print	("CALIBER - 45 LC"	,	w45LC	,	x45LC	)	
	print	("CALIBER - 44 MAG"	,	w44	,	x44	)	
	print	("CALIBER - 45 ACP"	,	w45	,	x45	)	
	print	("CALIBER - 357 MAG"	,	w357	,	x357	)	
	print	("CALIBER - 57x28mm"	,	w9	,	x9	)	
	print	("CALIBER - 9x21mm"	,	w57	,	x57	)	
	print	("CALIBER - 380 ACP"	,	w380	,	x380	)	
	print	("CALIBER - 22 LR"	,	w22	,	x22	)	
	print	("CALIBER - 177 BB"	,	wBB	,	xBB	)	
	print	("Gun Case"	,	Case	,	xCase	)	
	print	("Suppressor"	,	Suppress	,	xSuppress	)	
	print	("Optic"	,	Optic	,	xOptic	)	
	print	("Light"	,	Light	,	xLight	)	
	print	("Part"	,	Part	,	xPart	)	
	print	("Ammo Can"	,	AmmoCan	,	xAmmoCan	)	
	print	("Ammo Box"	,	AmmoBox	,	xAmmoBox	)	
	print	("Poly Can"	,	PolyCan	,	xPolyCan	)	
	print	("Std Mag"	,	StdMag	,	xStdMag	)	
	print	("Ext Mag"	,	ExtMag	,	xExtMag	)	
	print	("Drum Mag"	,	DrumMag	,	xDrumMag	)	
	print	("Melee Sml Knife"	,	SmKnife	,	xSmKnife	)	
	print	("Melee Lrg Knife"	,	LgKnife	,	xLgKnife	)	
	print	("Melee Sword"	,	Sword	,	xSword	)	
	print	("Melee Axe"	,	Axe	,	xAxe	)	
	print	("Melee Blunt"	,	Blunt	,	xBlunt	)	
	print	("Melee Spear"	,	Spear	,	xSpear	)	
	print	("Power Tool"	,	PowerTool	,	xPowerTool	)	
	print	("Armor"	,	Armor	,	xArmor	)	
	print	("Reload"	,	Reload	,	xReload	)	
	print	("x90"	,	x90)				
	print	("CIVxLEO"	,	CIVxLEO)				
	print	("CIVxMIL"	,	CIVxMIL)				
	print	("LEOxCIV"	,	LEOxCIV)				
	print	("LEOxMIL"	,	LEOxMIL)				
	print	("MILxNON"	,	MILxNON)				
	print	("SECxNON"	,	SECxNON)				
	print	("HNTxNON"	,	HNTxNON)				
	print	("SURxNON"	,	SURxNON)				
	print	("GUNRollGUN"	,	GUNRollGUN	)			
	print	("GUNRollPART"	,	GUNRollPART	)			
	print	("GUNRollAMMO"	,	GUNRollAMMO	)			
	print	("GUNRollARMOR"	,	GUNRollARMOR	)			
	print	("LEORollGUN"	,	LEORollGUN	)			
--	print	("LEORollPART"	,	LEORollPART	)			
	print	("LEORollAMMO"	,	LEORollAMMO	)			
	print	("LEORollARMOR"	,	LEORollARMOR	)			
	print	("MILRollGUN"	,	MILRollGUN	)			
--	print	("MILRollPART"	,	MILRollPART	)			
	print	("MILRollAMMO"	,	MILRollAMMO	)			
	print	("MILRollARMOR"	,	MILRollARMOR	)			
	print	("SECRollGUN"	,	SECRollGUN	)			
--	print	("SECRollPART"	,	SECRollPART	)			
	print	("SECRollAMMO"	,	SECRollAMMO	)			
	print	("SECRollARMOR"	,	SECRollARMOR	)			
	print	("SURRollGUN"	,	SURRollGUN	)			
	print	("SURRollPART"	,	SURRollPART	)			
	print	("SURRollAMMO"	,	SURRollAMMO	)			
	print	("SURRollARMOR"	,	SURRollARMOR	)			
	print	("HNTRollGUN"	,	HNTRollGUN	)			
	print	("HNTRollPART"	,	HNTRollPART	)			
	print	("HNTRollAMMO"	,	HNTRollAMMO	)			
	print	("HNTRollARMOR"	,	HNTRollARMOR	)			
	print	("CIVx"	,	CIVx)				
	print	("LEOx"	,	LEOx)				
	print	("MILx"	,	MILx)				
	print	("SECx"	,	SECx)				
	print	("HNTx"	,	HNTx)				
	print	("SURx"	,	SURx)				
	print	("CIVammo"	,	CIVammo)				
	print	("LEOammo"	,	LEOammo)				
	print	("MILammo"	,	MILammo)				
	print	("SECammo"	,	SECammo)				
	print	("HNTammo"	,	HNTammo)				
	print	("SURammo"	,	SURammo)				
	print	("MILITARY REGION"	,	REGION)				
	print	("ZOMBIE CCW"	,	CCW)				
	print	("VEHICLE LOOT REDUCER"	,	VLR)				
								
require "Items/SuburbsDistributions"											
require "Items/ProceduralDistributions"											
require "Vehicles/VehicleDistributions"											
require "Items/ItemPicker"											
											
----------------------------------------------------------											
--		GUN CASE CONTENTS			--						
----------------------------------------------------------											
											
	----------------------------------										
	--	CASE SMALL	CAP(2)	--							
	----------------------------------										
	SuburbsDistributions["Case_Small1"] = {				-- 22LR	1458	points				
		rolls = 1,									
		items = {									
			"Base.22Clip",			50					,
			"Base.22Clip",			25					,
											
			"Base.Ruger_MK4",			30		- (30 * xSEMI)	- (30 * xUSA)	- (30 * x90)	,
			"Base.Ruger_MK4_2245",			36		- (36 * xSEMI)	- (36 * xUSA)	- (36 * x90)	,
			"Base.Buckmark",			42		- (42 * xSEMI)	- (42 * xUSA)		,
			"Base.Buckmark_Long",			48		- (48 * xSEMI)	- (48 * xUSA)		,
			"Base.HK4_22",			54		- (54 * xSEMI)	- (54 * xEUR)		,
			"Base.ZIP22",			60		- (60 * xSEMI)	- (60 * xUSA)	- (60 * x90)	,
			"Base.Ruger_MK4",			66		- (66 * xSEMI)	- (66 * xUSA)	- (66 * x90)	,
			"Base.Ruger_MK4_2245",			72		- (72 * xSEMI)	- (72 * xUSA)	- (72 * x90)	,
			"Base.Buckmark",			78		- (78 * xSEMI)	- (78 * xUSA)		,
			"Base.Buckmark_Long",			84		- (84 * xSEMI)	- (84 * xUSA)		,
			"Base.HK4_22",			90		- (90 * xSEMI)	- (90 * xEUR)		,
			"Base.ZIP22",			96		- (96 * xSEMI)	- (96 * xUSA)	- (96 * x90)	,
			"Base.Ruger_MK4",			102		- (102 * xSEMI)	- (102 * xUSA)	- (102 * x90)	,
			"Base.Ruger_MK4_2245",			108		- (108 * xSEMI)	- (108 * xUSA)	- (108 * x90)	,
			"Base.Buckmark",			114		- (114 * xSEMI)	- (114 * xUSA)		,
			"Base.Buckmark_Long",			120		- (120 * xSEMI)	- (120 * xUSA)		,
			"Base.HK4_22",			126		- (126 * xSEMI)	- (126 * xEUR)		,
			"Base.ZIP22",			132		- (132 * xSEMI)	- (132 * xUSA)	- (132 * x90)	,
											
			"Base.Bullets22",			50					,
			"Base.Bullets22",			40					,
			"Base.Bullets22",			30					,
			"Base.Bullets22",			20					,
			"Base.Bullets22Box",			20					,
		},									
	};										
	SuburbsDistributions["Case_Small2"] = {				-- 380	1278	points				
		rolls = 1,									
		items = {									
			"Base.380Clip",			50					,
			"Base.380ExtClip",			25					,
											
			"Base.G42",			20		- (20 * xSEMI)	- (20 * xEUR)	- (20 * x90)	,
			"Base.LCP380",			26		- (26 * xSEMI)	- (26 * xUSA)	- (26 * x90)	,
			"Base.BodyGuard380",			32		- (32 * xSEMI)	- (32 * xUSA)	- (32 * x90)	,
			"Base.Bersa85F",			38		- (38 * xSEMI)	- (38 * xREST)		,
			"Base.Colt1903",			44		- (44 * xSEMI)	- (44 * xUSA)		,
			"Base.APS",			50		- (50 * xSMG)	- (50 * xSOV)		,
			"Base.Makarov380",			56		- (56 * xSEMI)	- (56 * xSOV)		,
			"Base.PPK",			62		- (62 * xSEMI)	- (62 * xEUR)		,
			"Base.HK4_380",			68		- (68 * xSEMI)	- (68 * xEUR)		,
			"Base.G42",			74		- (74 * xSEMI)	- (74 * xEUR)	- (74 * x90)	,
			"Base.LCP380",			80		- (80 * xSEMI)	- (80 * xUSA)	- (80 * x90)	,
			"Base.BodyGuard380",			86		- (86 * xSEMI)	- (86 * xUSA)	- (86 * x90)	,
			"Base.Bersa85F",			92		- (92 * xSEMI)	- (92 * xREST)		,
			"Base.Colt1903",			98		- (98 * xSEMI)	- (98 * xUSA)		,
			"Base.APS",			104		- (104 * xSMG)	- (104 * xSOV)		,
			"Base.Makarov380",			110		- (110 * xSEMI)	- (110 * xSOV)		,
			"Base.PPK",			116		- (116 * xSEMI)	- (116 * xEUR)		,
			"Base.HK4_380",			122		- (122 * xSEMI)	- (122 * xEUR)		,
											
			"Base.Bullets380",			50					,
			"Base.Bullets380",			40					,
			"Base.Bullets380",			30					,
			"Base.Bullets380",			20					,
			"Base.Bullets380Box",			20					,
			"Base.Suppressor_Pistol",			1					,
		},									
	};										
	SuburbsDistributions["Case_Small3"] = {				-- 9mm	1820	points				
		rolls = 1,									
		items = {									
			"Base.9mmClip",			50					,
			"Base.9mmExtClip",			25					,
											
			"Base.CZ75",			20		- (20 * xSEMI)	- (20 * xCZE)		,
			"Base.CZ_75b",			24		- (24 * xSEMI)	- (24 * xCZE)		,
			"Base.CZ_75_SP01_SS",			28		- (28 * xSEMI)	- (28 * xCZE)		,
			"Base.CZ_75_SP01",			32		- (32 * xSEMI)	- (32 * xCZE)		,
			"Base.CZ_75_Compact",			36		- (36 * xSEMI)	- (36 * xCZE)		,
			"Base.CZ_75_P01",			40		- (40 * xSEMI)	- (40 * xCZE)		,
			"Base.CZ_2075",			44		- (44 * xSEMI)	- (44 * xCZE)	- (44 * x90)	,
			"Base.CZ_75_Shadow",			48		- (48 * xSEMI)	- (48 * xCZE)	- (48 * x90)	,
			"Base.CZ_75_Czechmate",			52		- (52 * xSEMI)	- (52 * xCZE)	- (52 * x90)	,
			"Base.EAA_Witness_9",			56		- (56 * xSEMI)	- (56 * xEUR)		,
			"Base.EAA_Witness_Long_9",			60		- (60 * xSEMI)	- (60 * xEUR)		,
			"Base.G17",			64		- (64 * xSMG)	- (64 * xEUR)		,
			"Base.G18",			68		- (68 * xSMG)	- (68 * xEUR)		,
			"Base.G34",			72		- (72 * xSEMI)	- (72 * xEUR)	- (72 * x90)	,
			"Base.K5",			76		- (76 * xSEMI)	- (76 * xKOR)		,
			"Base.M9",			80		- (80 * xSEMI)	- (80 * xEUR)		,
			"Base.M9A3",			84		- (84 * xSEMI)	- (84 * xEUR)	- (84 * x90)	,
			"Base.B93R",			88		- (88 * xSMG)	- (88 * xEUR)		,
			"Base.M5906",			92		- (92 * xSEMI)	- (92 * xUSA)		,
			"Base.XD9",			96		- (96 * xSEMI)	- (96 * xUSA)	- (96 * x90)	,
 			"Base.MP9",			100		- (100 * xSEMI)	- (100 * xUSA)	- (100 * x90)	,
			"Base.P226",			104		- (104 * xSEMI)	- (104 * xEUR)		,
			"Base.APS",			108		- (108 * xSMG)	- (108 * xSOV)		,
			"Base.BT9_Fold",			112		- (112 * xSMG)	- (112 * xEUR)	- (112 * x90)	,
			"Base.UZI_Micro",			116		- (116 * xSMG)	- (116 * xISR)		,
			"Base.Pistol",			120		- (120 * xSEMI)	- (120 * xEUR)		,
											
			"Base.Bullets9mm",			50					,
			"Base.Bullets9mm",			40					,
			"Base.Bullets9mm",			30					,
			"Base.Bullets9mm",			20					,
			"Base.Bullets9mmBox",			20					,
			"Base.Suppressor_Pistol",			1					,
		},									
	};										
	SuburbsDistributions["Case_Small4"] = {				-- 38/357	1705	points				
		rolls = 1,									
		items = {									
			"Base.GP100_2_357",			25		- (25 * xREV)	- (25 * xUSA)		,
			"Base.GP100_4_357",			30		- (30 * xREV)	- (30 * xUSA)		,
			"Base.GP100_6_357",			35		- (35 * xREV)	- (35 * xUSA)		,
			"Base.K6S_357",			40		- (40 * xREV)	- (40 * xUSA)	- (40 * x90)	,
			"Base.Rhino_200DS_357",			45		- (45 * xREV)	- (45 * xEUR)	- (45 * x90)	,
			"Base.Rhino_40DS_357",			50		- (50 * xREV)	- (50 * xEUR)	- (50 * x90)	,
			"Base.Rhino_60DS_357",			55		- (55 * xREV)	- (55 * xEUR)	- (55 * x90)	,
			"Base.SW_327_357",			60		- (60 * xREV)	- (60 * xUSA)	- (60 * x90)	,
			"Base.Revolver_Short_357",			65		- (65 * xREV)	- (65 * xUSA)		,
			"Base.Revolver_357",			70		- (70 * xREV)	- (70 * xUSA)		,
			"Base.Revolver_Long_357",			75		- (75 * xREV)	- (75 * xUSA)		,
			"Base.GP100_2_357",			80		- (80 * xREV)	- (80 * xUSA)		,
			"Base.GP100_4_357",			85		- (85 * xREV)	- (85 * xUSA)		,
			"Base.GP100_6_357",			90		- (90 * xREV)	- (90 * xUSA)		,
			"Base.K6S_357",			95		- (95 * xREV)	- (95 * xUSA)	- (95 * x90)	,
			"Base.Rhino_200DS_357",			100		- (100 * xREV)	- (100 * xEUR)	- (100 * x90)	,
			"Base.Rhino_40DS_357",			105		- (105 * xREV)	- (105 * xEUR)	- (105 * x90)	,
			"Base.Rhino_60DS_357",			110		- (110 * xREV)	- (110 * xEUR)	- (110 * x90)	,
			"Base.SW_327_357",			115		- (115 * xREV)	- (115 * xUSA)	- (115 * x90)	,
			"Base.Revolver_Short_357",			120		- (120 * xREV)	- (120 * xUSA)		,
			"Base.Revolver_357",			125		- (125 * xREV)	- (125 * xUSA)		,
			"Base.Revolver_Long_357",			130		- (130 * xREV)	- (130 * xUSA)		,
	--		"Base.Taurus856",			135		- (135 * xREV)	- (135 * xREST)	- (135 * x90)	,
	--		"Base.Colt_Service38",			140		- (140 * xREV)	- (140 * xUSA)		,
											
			"Base.357Speed",			50					,
			"Base.357Speed",			25					,
			"Base.Bullets357",			50					,
			"Base.Bullets357",			40					,
			"Base.Bullets357",			30					,
			"Base.Bullets357",			20					,
			"Base.Bullets357Box",			20					,
		},									
	};										
	SuburbsDistributions["Case_Small5"] = {				-- 45SS	1560	points				
		rolls = 1,									
		items = {									
			"Base.45Clip",			50					,
			"Base.45ExtClip",			25					,
											
			"Base.AMT1911",			10		- (10 * xSEMI)	- (10 * xUSA)		,
			"Base.AMT1911_Long",			14		- (14 * xSEMI)	- (14 * xUSA)		,
			"Base.Colt1911",			18		- (18 * xSEMI)	- (18 * xUSA)		,
			"Base.Colt_Kimber",			22		- (22 * xSEMI)	- (22 * xUSA)	- (22 * x90)	,
			"Base.PULP_1911",			26		- (26 * xSEMI)	- (26 * xUSA)		,
			"Base.Colt_Commander",			30		- (30 * xSEMI)	- (30 * xUSA)		,
			"Base.AMT1911",			34		- (34 * xSEMI)	- (34 * xUSA)		,
			"Base.AMT1911_Long",			38		- (38 * xSEMI)	- (38 * xUSA)		,
			"Base.Colt1911",			42		- (42 * xSEMI)	- (42 * xUSA)		,
			"Base.Colt_Kimber",			46		- (46 * xSEMI)	- (46 * xUSA)	- (46 * x90)	,
			"Base.PULP_1911",			50		- (50 * xSEMI)	- (50 * xUSA)		,
			"Base.Colt_Commander",			54		- (54 * xSEMI)	- (54 * xUSA)		,
			"Base.Pistol2",			58		- (58 * xSEMI)	- (58 * xUSA)		,
			"Base.AMT1911",			62		- (62 * xSEMI)	- (62 * xUSA)		,
			"Base.AMT1911_Long",			66		- (66 * xSEMI)	- (66 * xUSA)		,
			"Base.Colt1911",			70		- (70 * xSEMI)	- (70 * xUSA)		,
			"Base.Colt_Kimber",			74		- (74 * xSEMI)	- (74 * xUSA)	- (74 * x90)	,
			"Base.PULP_1911",			78		- (78 * xSEMI)	- (78 * xUSA)		,
			"Base.Colt_Commander",			82		- (82 * xSEMI)	- (82 * xUSA)		,
			"Base.AMT1911",			86		- (86 * xSEMI)	- (86 * xUSA)		,
			"Base.AMT1911_Long",			90		- (90 * xSEMI)	- (90 * xUSA)		,
			"Base.Colt1911",			94		- (94 * xSEMI)	- (94 * xUSA)		,
			"Base.Colt_Kimber",			98		- (98 * xSEMI)	- (98 * xUSA)	- (98 * x90)	,
			"Base.PULP_1911",			102		- (102 * xSEMI)	- (102 * xUSA)		,
			"Base.Colt_Commander",			106		- (106 * xSEMI)	- (106 * xUSA)		,
			"Base.Pistol2",			110		- (110 * xSEMI)	- (110 * xUSA)		,
											
			"Base.Bullets45",			50					,
			"Base.Bullets45",			40					,
			"Base.Bullets45",			30					,
			"Base.Bullets45",			20					,
			"Base.Bullets45Box",			20					,
			"Base.Suppressor_Pistol",			1					,
		},									
	};										
	SuburbsDistributions["Case_Small6"] = {				-- 45DS	1584	points				
		rolls = 1,									
		items = {									
			"Base.45DSClip",			50					,
			"Base.45DSExtClip",			25					,
											
			"Base.CZ97B",			20		- (20 * xSEMI)	- (20 * xCZE)	- (20 * x90)	,
			"Base.EAA_Witness_45",			24		- (24 * xSEMI)	- (24 * xEUR)		,
			"Base.EAA_Witness_Long_45",			28		- (28 * xSEMI)	- (28 * xEUR)		,
			"Base.G21",			32		- (32 * xSEMI)	- (32 * xEUR)		,
			"Base.XD4",			36		- (36 * xSEMI)	- (36 * xUSA)	- (36 * x90)	,
			"Base.MP45",			40		- (40 * xSEMI)	- (40 * xUSA)	- (40 * x90)	,
			"Base.P220",			44		- (44 * xSEMI)	- (44 * xUSA)		,
			"Base.M4506",			48		- (48 * xSEMI)	- (48 * xUSA)		,
			"Base.PARA1911",			52		- (52 * xSEMI)	- (52 * xUSA)		,
			"Base.HK_MK23",			56		- (56 * xSEMI)	- (56 * xUSA)		,
			"Base.HK_USP",			60		- (60 * xSEMI)	- (60 * xUSA)		,
			"Base.HK_USP_Match",			64		- (64 * xSEMI)	- (64 * xUSA)		,
			"Base.CZ97B",			68		- (68 * xSEMI)	- (68 * xCZE)	- (68 * x90)	,
			"Base.EAA_Witness_45",			72		- (72 * xSEMI)	- (72 * xEUR)		,
			"Base.EAA_Witness_Long_45",			76		- (76 * xSEMI)	- (76 * xEUR)		,
			"Base.G21",			80		- (80 * xSEMI)	- (80 * xEUR)		,
			"Base.XD4",			84		- (84 * xSEMI)	- (84 * xUSA)	- (84 * x90)	,
			"Base.MP45",			88		- (88 * xSEMI)	- (88 * xUSA)	- (88 * x90)	,
			"Base.P220",			92		- (92 * xSEMI)	- (92 * xUSA)		,
			"Base.M4506",			96		- (96 * xSEMI)	- (96 * xUSA)		,
			"Base.PARA1911",			100		- (100 * xSEMI)	- (100 * xUSA)		,
			"Base.HK_MK23",			104		- (104 * xSEMI)	- (104 * xUSA)		,
			"Base.HK_USP",			108		- (108 * xSEMI)	- (108 * xUSA)		,
			"Base.HK_USP_Match",			112		- (112 * xSEMI)	- (112 * xUSA)		,
											
			"Base.Bullets45",			50					,
			"Base.Bullets45",			40					,
			"Base.Bullets45",			30					,
			"Base.Bullets45",			20					,
			"Base.Bullets45Box",			20					,
			"Base.Suppressor_Pistol",			1					,
		},									
	};										
	SuburbsDistributions["Case_Small7"] = {				-- 44	1241	points				
		rolls = 1,									
		items = {									
			"Base.44Clip",			50					,
			"Base.44Clip",			25					,
											
			"Base.DEagle",			25		- (25 * xSEMI)	- (25 * xISR)		,
			"Base.DEagle_Long",			31		- (31 * xSEMI)	- (31 * xISR)		,
			"Base.Automag",			37		- (37 * xSEMI)	- (37 * xUSA)		,
			"Base.Pistol3",			43		- (43 * xSEMI)	- (43 * xISR)		,
			"Base.DEagle_Hawk",			49		- (49 * xSEMI)	- (49 * xISR)		,
			"Base.DEagle",			55		- (55 * xSEMI)	- (55 * xISR)		,
			"Base.DEagle_Long",			61		- (61 * xSEMI)	- (61 * xISR)		,
			"Base.Automag",			67		- (67 * xSEMI)	- (67 * xUSA)		,
			"Base.Pistol3",			73		- (73 * xSEMI)	- (73 * xISR)		,
			"Base.DEagle",			79		- (79 * xSEMI)	- (79 * xISR)		,
			"Base.DEagle_Long",			85		- (85 * xSEMI)	- (85 * xISR)		,
			"Base.Automag",			91		- (91 * xSEMI)	- (91 * xUSA)		,
			"Base.Pistol3",			97		- (97 * xSEMI)	- (97 * xISR)		,
			"Base.DEagle",			103		- (103 * xSEMI)	- (103 * xISR)		,
			"Base.DEagle_Long",			109		- (109 * xSEMI)	- (109 * xISR)		,
			"Base.Automag",			115		- (115 * xSEMI)	- (115 * xUSA)		,
			"Base.Pistol3",			121		- (121 * xSEMI)	- (121 * xISR)		,
											
			"Base.Bullets44",			50					,
			"Base.Bullets44",			40					,
			"Base.Bullets44",			30					,
			"Base.Bullets44",			20					,
			"Base.Bullets44Box",			20					,
		},									
	};										
	SuburbsDistributions["Case_Small8"] = {				-- FLARE	500	points				
		rolls = 1,									
		items = {									
			"Base.FlareGun",			500					,
											
			"Base.Flare",			100					,
			"Base.Flare",			100					,
			"Base.Flare",			75					,
			"Base.Flare",			75					,
			"Base.Flare",			50					,
			"Base.Flare",			50					,
			"Base.Flare",			25					,
			"Base.Flare",			25					,
		},									
	};										
											
	----------------------------------										
	--	CASE MEDIUM	CAP(4)	--							
	----------------------------------										
	SuburbsDistributions["Case_Medium1"] = {				-- 380	1035	points				
		rolls = 1,									
		items = {									
			"Base.380StdClip",			50					,
			"Base.380ExtClip",			25					,
			"Base.Bullets380",			50					,
			"Base.Bullets380",			40					,
			"Base.Bullets380",			30					,
			"Base.Bullets380",			20					,
			"Base.Bullets380Box",			20					,
											
			"Base.BT380_Stock",			20		- (20 * xSEMI)	- (20 * xEUR)	- (20 * x90)	,
			"Base.Vz61_Fixed",			27		- (27 * xSMG)	- (27 * xCZE)		,
			"Base.Vz61_Stock",			34		- (34 * xSMG)	- (34 * xCZE)		,
			"Base.BT380_Stock",			41		- (41 * xSEMI)	- (41 * xEUR)	- (41 * x90)	,
			"Base.Vz61_Fixed",			48		- (48 * xSMG)	- (48 * xCZE)		,
			"Base.Vz61_Stock",			55		- (55 * xSMG)	- (55 * xCZE)		,
			"Base.BT380_Stock",			62		- (62 * xSEMI)	- (62 * xEUR)	- (62 * x90)	,
			"Base.Vz61_Fixed",			69		- (69 * xSMG)	- (69 * xCZE)		,
			"Base.Vz61_Stock",			76		- (76 * xSMG)	- (76 * xCZE)		,
			"Base.BT380_Stock",			83		- (83 * xSEMI)	- (83 * xEUR)	- (83 * x90)	,
			"Base.Vz61_Fixed",			90		- (90 * xSMG)	- (90 * xCZE)		,
			"Base.Vz61_Stock",			97		- (97 * xSMG)	- (97 * xCZE)		,
			"Base.BT380_Stock",			104		- (104 * xSEMI)	- (104 * xEUR)	- (104 * x90)	,
			"Base.Vz61_Fixed",			111		- (111 * xSMG)	- (111 * xCZE)		,
			"Base.Vz61_Stock",			118		- (118 * xSMG)	- (118 * xCZE)		,
											
		},									
	};										
	SuburbsDistributions["Case_Medium2"] = {				-- 9mm	2380	points				
		rolls = 1,									
		items = {									
			"Base.9mmClip",			50					,
			"Base.9mmExtClip",			25					,
			"Base.Bullets9mm",			50					,
			"Base.Bullets9mm",			40					,
			"Base.Bullets9mm",			30					,
			"Base.Bullets9mm",			20					,
			"Base.Bullets9mmBox",			20					,
											
			"Base.UZI",			17		- (17 * xSMG)	- (17 * xISR)		,
			"Base.UZI_Wood",			20		- (20 * xSMG)	- (20 * xISR)		,
			"Base.UMP9_Fold",			23		- (23 * xSMG)	- (23 * xISR)	- (23 * x90)	,
			"Base.SUB2000",			26		- (26 * xSEMI)	- (26 * xUSA)	- (26 * x90)	,
			"Base.MP5_Fixed",			29		- (29 * xSMG)	- (29 * xEUR)		,
			"Base.MP5_Fold",			32		- (32 * xSMG)	- (32 * xEUR)		,
			"Base.MP5SD6_Fixed",			35		- (35 * xSMG)	- (35 * xEUR)		,
			"Base.MP5SD6_Fold",			38		- (38 * xSMG)	- (38 * xEUR)		,
			"Base.EVO_Fold",			41		- (41 * xSMG)	- (41 * xCZE)	- (41 * x90)	,
			"Base.K7_Fold",			44		- (44 * xSMG)	- (44 * xKOR)		,
			"Base.AUG9",			47		- (47 * xSMG)	- (47 * xEUR)		,
			"Base.KG9",			50		- (50 * xSMG)	- (50 * xUSA)		,
			"Base.Calico_M900_Fold",			53		- (53 * xSMG)	- (53 * xUSA)		,
			"Base.Calico_M950_Pistol",			56		- (56 * xSMG)	- (56 * xUSA)		,
			"Base.Ruger_PCC",			59		- (59 * xSEMI)	- (59 * xUSA)	- (59 * x90)	,
			"Base.Ruger_PCC_R",			62		- (62 * xSEMI)	- (62 * xUSA)	- (62 * x90)	,
			"Base.Ruger_PCC_M",			65		- (65 * xSEMI)	- (65 * xUSA)	- (65 * x90)	,
			"Base.M1Carbine",			68		- (68 * xSEMI)	- (68 * xUSA)		,
			"Base.M2Carbine",			71		- (71 * xSMG)	- (71 * xUSA)		,
			"Base.M635",			74		- (74 * xSMG)	- (74 * xUSA)		,
			"Base.M635S",			77		- (77 * xSMG)	- (77 * xUSA)		,
			"Base.M635SD",			80		- (80 * xSMG)	- (80 * xUSA)		,
			"Base.MP7",			83		- (83 * xSMG)	- (83 * xEUR)	- (83 * x90)	,
			"Base.Jatimatic",			86		- (86 * xSMG)	- (86 * xEUR)		,
			"Base.Sten",			89		- (89 * xSMG)	- (89 * xEUR)		,
			"Base.Sten_MK2",			92		- (92 * xSMG)	- (92 * xEUR)		,
			"Base.Sten_MK2SD",			95		- (95 * xSMG)	- (95 * xEUR)		,
			"Base.STAR_Z45_Fold",			98		- (98 * xSMG)	- (98 * xEUR)		,
			"Base.STAR_Z45_Fixed",			101		- (101 * xSMG)	- (101 * xEUR)		,
			"Base.KRISS9_Fold",			104		- (104 * xSMG)	- (104 * xUSA)	- (104 * x90)	,
			"Base.KRISS9_MLOK_Fold",			107		- (107 * xSMG)	- (107 * xUSA)	- (107 * x90)	,
			"Base.Ots14_4A",			110		- (110 * xAUTO)	- (110 * xSOV)		,
			"Base.Ots14_4A_01",			113		- (113 * xAUTO)	- (113 * xSOV)		,
			"Base.Ots14_4A_03",			116		- (116 * xAUTO)	- (116 * xSOV)		,
			"Base.Ots14_4A_GL",			119		- (119 * xAUTO)	- (119 * xSOV)		,
		},									
	};										
	SuburbsDistributions["Case_Medium3"] = {				-- 45DS	1040	points				
		rolls = 1,									
		items = {									
			"Base.45DSClip",			50					,
			"Base.45DSExtClip",			25					,
			"Base.Bullets45",			50					,
			"Base.Bullets45",			40					,
			"Base.Bullets45",			30					,
			"Base.Bullets45",			20					,
			"Base.Bullets45Box",			20					,
											
			"Base.MAC10_Fold",			20		- (20 * xSMG)	- (20 * xUSA)		,
			"Base.UMP45_Fold",			26		- (26 * xSMG)	- (26 * xEUR)	- (26 * x90)	,
			"Base.KRISS_Fold",			32		- (32 * xSMG)	- (32 * xUSA)	- (32 * x90)	,
			"Base.Model55_Fold",			38		- (38 * xSMG)	- (38 * xUSA)		,
			"Base.MAC10_Fold",			44		- (44 * xSMG)	- (44 * xUSA)		,
			"Base.UMP45_Fold",			50		- (50 * xSMG)	- (50 * xEUR)	- (50 * x90)	,
			"Base.KRISS_Fold",			56		- (56 * xSMG)	- (56 * xUSA)	- (56 * x90)	,
			"Base.Model55_Fold",			62		- (62 * xSMG)	- (62 * xUSA)		,
			"Base.MAC10_Fold",			68		- (68 * xSMG)	- (68 * xUSA)		,
			"Base.UMP45_Fold",			74		- (74 * xSMG)	- (74 * xEUR)	- (74 * x90)	,
			"Base.KRISS_Fold",			80		- (80 * xSMG)	- (80 * xUSA)	- (80 * x90)	,
			"Base.Model55_Fold",			86		- (86 * xSMG)	- (86 * xUSA)		,
			"Base.MAC10_Fold",			92		- (92 * xSMG)	- (92 * xUSA)		,
			"Base.UMP45_Fold",			98		- (98 * xSMG)	- (98 * xEUR)	- (98 * x90)	,
			"Base.KRISS_Fold",			104		- (104 * xSMG)	- (104 * xUSA)	- (104 * x90)	,
			"Base.Model55_Fold",			110		- (110 * xSMG)	- (110 * xUSA)		,
		},									
	};										
	SuburbsDistributions["Case_Medium4"] = {				-- 556	1672	points				
		rolls = 1,									
		items = {									
			"Base.556Clip",			50					,
			"Base.556Drum",			25					,
			"Base.556Bullets",			50					,
			"Base.556Bullets",			40					,
			"Base.556Bullets",			30					,
			"Base.556Bullets",			20					,
			"Base.556Box",			20					,
											
			"Base.XM8Compact_Pistol",			10		- (10 * xAUTO)	- (10 * xEUR)	- (10 * x90)	,
			"Base.SCARSC_Fold",			14		- (14 * xAUTO)	- (14 * xEUR)	- (14 * x90)	,
			"Base.XM117",			18		- (18 * xAUTO)	- (18 * xUSA)		,
			"Base.K1_1",			22		- (22 * xAUTO)	- (22 * xKOR)		,
			"Base.AUG",			26		- (26 * xAUTO)	- (26 * xEUR)		,
			"Base.AUG_A3",			30		- (30 * xAUTO)	- (30 * xEUR)	- (30 * x90)	,
			"Base.M85_Fold",			30		- (30 * xAUTO)	- (30 * xSOV)		,
			"Base.L22",			34		- (34 * xAUTO)	- (34 * xEUR)	- (34 * x90)	,
			"Base.F2000",			38		- (38 * xAUTO)	- (38 * xEUR)	- (38 * x90)	,
			"Base.Tavor",			42		- (42 * xAUTO)	- (42 * xISR)	- (42 * x90)	,
			"Base.QBZ_95",			46		- (46 * xAUTO)	- (46 * xPAC)	- (46 * x90)	,
			"Base.MCX_Virtus",			50		- (50 * xAUTO)	- (50 * xEUR)	- (50 * x90)	,
			"Base.AAC_Honey_Fold",			54		- (54 * xAUTO)	- (54 * xUSA)		,
			"Base.AAC_HoneySD_Fold",			58		- (58 * xAUTO)	- (58 * xUSA)		,
			"Base.XM8Compact_Pistol",			62		- (62 * xAUTO)	- (62 * xEUR)	- (62 * x90)	,
			"Base.SCARSC_Fold",			66		- (66 * xAUTO)	- (66 * xEUR)	- (66 * x90)	,
			"Base.XM117",			70		- (70 * xAUTO)	- (70 * xUSA)		,
			"Base.K1_1",			74		- (74 * xAUTO)	- (74 * xKOR)		,
			"Base.AUG",			78		- (78 * xAUTO)	- (78 * xEUR)		,
			"Base.AUG_A3",			82		- (82 * xAUTO)	- (82 * xEUR)	- (82 * x90)	,
			"Base.M85_Fold",			82		- (82 * xAUTO)	- (82 * xSOV)		,
			"Base.L22",			86		- (86 * xAUTO)	- (86 * xEUR)	- (86 * x90)	,
			"Base.F2000",			90		- (90 * xAUTO)	- (90 * xEUR)	- (90 * x90)	,
			"Base.Tavor",			94		- (94 * xAUTO)	- (94 * xISR)	- (94 * x90)	,
			"Base.QBZ_95",			98		- (98 * xAUTO)	- (98 * xPAC)	- (98 * x90)	,
			"Base.MCX_Virtus",			102		- (102 * xAUTO)	- (102 * xEUR)	- (102 * x90)	,
			"Base.AAC_Honey_Fold",			106		- (106 * xAUTO)	- (106 * xUSA)		,
			"Base.AAC_HoneySD_Fold",			110		- (110 * xAUTO)	- (110 * xUSA)		,
		},									
	};										
	SuburbsDistributions["Case_Medium5"] = {				-- 762x39	1098	points				
		rolls = 1,									
		items = {									
			"Base.AKClip",			50					,
			"Base.762Drum",			25					,
			"Base.762x39Bullets",			50					,
			"Base.762x39Bullets",			40					,
			"Base.762x39Bullets",			30					,
			"Base.762x39Bullets",			20					,
			"Base.762x39Box",			20					,
											
			"Base.AKMS_Fold",			10		- (10 * xAUTO)	- (10 * xSOV)		,
			"Base.MD65_Fold",			16		- (16 * xAUTO)	- (16 * xSOV)		,
			"Base.Vz58_Fold",			22		- (22 * xAUTO)	- (22 * xCZE)		,
			"Base.Vz58_Mini_Fold",			28		- (28 * xAUTO)	- (28 * xCZE)		,
			"Base.Ots14_1A_01",			34		- (34 * xAUTO)	- (34 * xSOV)		,
			"Base.Ots14_1A_02",			40		- (40 * xAUTO)	- (40 * xSOV)		,
			"Base.AKMS_Fold",			46		- (46 * xAUTO)	- (46 * xSOV)		,
			"Base.MD65_Fold",			52		- (52 * xAUTO)	- (52 * xSOV)		,
			"Base.Vz58_Fold",			58		- (58 * xAUTO)	- (58 * xCZE)		,
			"Base.Vz58_Mini_Fold",			64		- (64 * xAUTO)	- (64 * xCZE)		,
			"Base.Ots14_1A_01",			70		- (70 * xAUTO)	- (70 * xSOV)		,
			"Base.Ots14_1A_02",			76		- (76 * xAUTO)	- (76 * xSOV)		,
			"Base.AKMS_Fold",			82		- (82 * xAUTO)	- (82 * xSOV)		,
			"Base.MD65_Fold",			88		- (88 * xAUTO)	- (88 * xSOV)		,
			"Base.Vz58_Fold",			94		- (94 * xAUTO)	- (94 * xCZE)		,
			"Base.Vz58_Mini_Fold",			100		- (100 * xAUTO)	- (100 * xCZE)		,
			"Base.Ots14_1A_01",			106		- (106 * xAUTO)	- (106 * xSOV)		,
			"Base.Ots14_1A_02",			112		- (112 * xAUTO)	- (112 * xSOV)		,
		},									
	};										
	SuburbsDistributions["Case_Medium6"] = {				-- 12g	1188	points				
		rolls = 1,									
		items = {									
			"Base.ShotgunShells",			50					,
			"Base.ShotgunShells",			40					,
			"Base.ShotgunShells",			30					,
			"Base.ShotgunShells",			20					,
											
			"Base.Coachgun_Pistol",			15		- (15 * xBREAK)	- (15 * xUSA)		,
			"Base.DT11_Pistol",			21		- (21 * xBREAK)	- (21 * xEUR)		,
			"Base.Shorty_Pistol",			27		- (27 * xPUMP)	- (27 * xUSA)	- (27 * x90)	,
			"Base.KS23_S_Pistol",			33		- (33 * xPUMP)	- (33 * xSOV)		,
			"Base.M870_Breaching_Pistol",			39		- (39 * xPUMP)	- (39 * xUSA)		,
			"Base.M870_CQB",			45		- (45 * xPUMP)	- (45 * xUSA)		,
			"Base.Coachgun_Pistol",			51		- (51 * xBREAK)	- (51 * xUSA)		,
			"Base.DT11_Pistol",			57		- (57 * xBREAK)	- (57 * xEUR)		,
			"Base.Shorty_Pistol",			63		- (63 * xPUMP)	- (63 * xUSA)	- (63 * x90)	,
			"Base.KS23_S_Pistol",			69		- (69 * xPUMP)	- (69 * xSOV)		,
			"Base.M870_Breaching_Pistol",			75		- (75 * xPUMP)	- (75 * xUSA)		,
			"Base.M870_CQB",			81		- (81 * xPUMP)	- (81 * xUSA)		,
			"Base.Coachgun_Pistol",			87		- (87 * xBREAK)	- (87 * xUSA)		,
			"Base.DT11_Pistol",			93		- (93 * xBREAK)	- (93 * xEUR)		,
			"Base.Shorty_Pistol",			99		- (99 * xPUMP)	- (99 * xUSA)	- (99 * x90)	,
			"Base.KS23_S_Pistol",			105		- (105 * xPUMP)	- (105 * xSOV)		,
			"Base.M870_Breaching_Pistol",			111		- (111 * xPUMP)	- (111 * xUSA)		,
			"Base.M870_CQB",			117		- (117 * xPUMP)	- (117 * xUSA)		,
											
			"Base.ShotgunShellsBox",			50					,
			"Base.ShotgunShellsBox",			25					,
		},									
	};										
											
	----------------------------------										
	--	CASE LARGE	CAP(6)	--							
	----------------------------------										
	SuburbsDistributions["Case_Large1"] = {				-- MIX	1605	points				
		rolls = 1,									
		items = {									
			"Base.M40",			10	- (10 * x308)	- (10 * xBOLT)	- (10 * xUSA)		,
			"Base.M40A1",			13	- (13 * x308)	- (13 * xBOLT)	- (13 * xUSA)		,
			"Base.M40A2",			16	- (16 * x308)	- (16 * xBOLT)	- (16 * xUSA)		,
			"Base.M40A3",			19	- (19 * x308)	- (19 * xBOLT)	- (19 * xUSA)		,
			"Base.Marlin_1894",			22	- (22 * x357)	- (22 * xLEVER)	- (22 * xUSA)		,
			"Base.Win_1894",			25	- (25 * x44)	- (25 * xLEVER)	- (25 * xUSA)		,
			"Base.Win_1895",			28	- (28 * x308)	- (28 * xLEVER)	- (28 * xUSA)		,
			"Base.Winchester1866",			97	- (97 * x45LC)	- (97 * xLEVER)	- (97 * xUSA)		,
			"Base.Winchester1873",			64	- (64 * x45LC)	- (64 * xLEVER)	- (64 * xUSA)		,
			"Base.NEF_Handi_38",			31	- (31 * x357)	- (31 * xBREAK)	- (31 * xUSA)		,
			"Base.K14",			34	- (34 * x308)	- (34 * xBOLT)	- (34 * xKOR)	- (34 * x90)	,
			"Base.Sako85",			40	- (40 * x223)	- (40 * xBOLT)	- (40 * xEUR)	- (40 * x90)	,
			"Base.Savage12",			43	- (43 * x308)	- (43 * xBOLT)	- (43 * xUSA)		,
			"Base.SVD",			46	- (46 * x762x54r)	- (46 * xSEMI)	- (46 * xSOV)		,
			"Base.SVDK",			49	- (49 * x762x54r)	- (49 * xSEMI)	- (49 * xSOV)		,
			"Base.SV_98",			52	- (52 * x762x54r)	- (52 * xBOLT)	- (52 * xSOV)		,
			"Base.OTS_03_SVU",			37	- (37 * x762x54r)	- (37 * xBOLT)	- (37 * xSOV)		,
			"Base.M1",			55	- (55 * x3006)	- (55 * xSEMI)	- (55 * xUSA)		,
			"Base.M1903",			58	- (58 * x3006)	- (58 * xBOLT)	- (58 * xUSA)		,
			"Base.TXS_804_45LC",			61	- (61 * x45LC)	- (61 * xREV)	- (61 * xREST)		,
			"Base.Mosin",			67	- (67 * x762x54r)	- (67 * xBOLT)	- (67 * xSOV)		,
			"Base.M46_Mauser",			70	- (70 * x762x54r)	- (70 * xBOLT)	- (70 * xPAC)		,
			"Base.WA2000",			73	- (73 * x308)	- (73 * xBOLT)	- (73 * xEUR)		,
			"Base.Type38",			76	- (76 * x308)	- (76 * xBOLT)	- (76 * xPAC)		,
			"Base.Type99",			79	- (79 * x308)	- (79 * xBOLT)	- (79 * xPAC)		,
			"Base.Ruger_No1_308",			82	- (82 * x308)	- (82 * xBREAK)	- (82 * xUSA)		,
			"Base.Ruger_No1_3006",			85	- (85 * x3006)	- (85 * xBREAK)	- (85 * xUSA)		,
			"Base.Ruger_No1_4570",			88	- (88 * x4570)	- (88 * xBREAK)	- (88 * xUSA)		,
			"Base.Thompson_Center_3006",			91	- (91 * x3006)	- (91 * xBREAK)	- (91 * xUSA)		,
			"Base.Viper",			94	- (94 * x545x39)	- (94 * xLEVER)	- (94 * xREST)	- (94 * x90)	,
		},									
	};										
	SuburbsDistributions["Case_Large2"] = {				-- 545	1188	points				
		rolls = 1,									
		items = {									
			"Base.545StdClip",			50					,
			"Base.545Drum",			25					,
			"Base.545x39Bullets",			50					,
			"Base.545x39Bullets",			40					,
			"Base.545x39Bullets",			30					,
			"Base.545x39Bullets",			20					,
			"Base.545x39Box",			20					,
											
			"Base.AK74",			15		- (15 * xAUTO)	- (15 * xSOV)		,
			"Base.AKS74",			21		- (21 * xAUTO)	- (21 * xSOV)		,
			"Base.AKS74U",			27		- (27 * xAUTO)	- (27 * xSOV)		,
			"Base.AK74_Alpha",			33		- (33 * xAUTO)	- (33 * xSOV)	- (33 * x90)	,
			"Base.AK74_Custom",			39		- (39 * xAUTO)	- (39 * xUSA)	- (39 * x90)	,
			"Base.AK12",			45		- (45 * xAUTO)	- (45 * xSOV)	- (45 * x90)	,
			"Base.AK12_New",			51		- (51 * xAUTO)	- (51 * xSOV)	- (51 * x90)	,
			"Base.RPK74",			57		- (57 * xAUTO)	- (57 * xSOV)		,
			"Base.RPK16",			63		- (63 * xAUTO)	- (63 * xSOV)	- (63 * x90)	,
			"Base.AK74",			69		- (69 * xAUTO)	- (69 * xSOV)		,
			"Base.AKS74",			75		- (75 * xAUTO)	- (75 * xSOV)		,
			"Base.AKS74U",			81		- (81 * xAUTO)	- (81 * xSOV)		,
			"Base.AK74_Alpha",			87		- (87 * xAUTO)	- (87 * xSOV)	- (87 * x90)	,
			"Base.AK74_Custom",			93		- (93 * xAUTO)	- (93 * xUSA)	- (93 * x90)	,
			"Base.AK12",			99		- (99 * xAUTO)	- (99 * xSOV)	- (99 * x90)	,
			"Base.AK12_New",			105		- (105 * xAUTO)	- (105 * xSOV)	- (105 * x90)	,
			"Base.RPK74",			111		- (111 * xAUTO)	- (111 * xSOV)		,
			"Base.RPK16",			117		- (117 * xAUTO)	- (117 * xSOV)	- (117 * x90)	,
											
			"Base.Suppressor_Rifle",			1					,
		},									
	};										
	SuburbsDistributions["Case_Large3"] = {				-- 556	1932	points				
		rolls = 1,									
		items = {									
			"Base.556Clip",			50					,
			"Base.556Drum",			25					,
			"Base.556Bullets",			50					,
			"Base.556Bullets",			40					,
			"Base.556Bullets",			30					,
			"Base.556Bullets",			20					,
			"Base.556Box",			20					,
											
			"Base.XM8",			5		- (5 * xAUTO)	- (5 * xEUR)	- (5 * x90)	,
			"Base.SCARL",			7		- (7 * xAUTO)	- (7 * xEUR)	- (7 * x90)	,
			"Base.G33",			9		- (9 * xAUTO)	- (9 * xEUR)		,
			"Base.G36",			11		- (11 * xAUTO)	- (11 * xEUR)	- (11 * x90)	,
			"Base.G36C",			13		- (13 * xAUTO)	- (13 * xEUR)	- (13 * x90)	,
			"Base.G36KV",			15		- (15 * xAUTO)	- (15 * xEUR)	- (15 * x90)	,
			"Base.MK18",			17		- (17 * xAUTO)	- (17 * xEUR)	- (17 * x90)	,
			"Base.M16A1",			19		- (19 * xAUTO)	- (19 * xUSA)		,
			"Base.M16A2",			21		- (21 * xAUTO)	- (21 * xUSA)		,
			"Base.M16A3",			23		- (23 * xAUTO)	- (23 * xUSA)		,
			"Base.M723",			25		- (25 * xAUTO)	- (25 * xUSA)		,
			"Base.H416",			27		- (27 * xAUTO)	- (27 * xEUR)	- (27 * x90)	,
			"Base.M4",			29		- (29 * xAUTO)	- (29 * xUSA)		,
			"Base.M4A1",			31		- (31 * xAUTO)	- (31 * xUSA)		,
			"Base.Bush_AR15_MOE",			33		- (33 * xSEMI)	- (33 * xUSA)		,
			"Base.Bush_XM15",			35		- (35 * xSEMI)	- (35 * xUSA)		,
			"Base.Bush_XM15_Custom",			37		- (37 * xSEMI)	- (37 * xUSA)		,
			"Base.ADAR",			39		- (39 * xAUTO)	- (39 * xSOV)	- (39 * x90)	,
			"Base.K2C1_PH", 			41		- (41 * xAUTO)	- (41 * xKOR)	- (41 * x90)	,
			"Base.K1DEV",			43		- (43 * xAUTO)	- (43 * xKOR)		,
			"Base.K2_C1",			45		- (45 * xAUTO)	- (45 * xKOR)	- (45 * x90)	,
			"Base.K2_1",			47		- (47 * xAUTO)	- (47 * xKOR)		,
			"Base.K2_203",			49		- (49 * xAUTO)	- (49 * xKOR)		,
			"Base.LVOA_C",			51		- (51 * xSEMI)	- (51 * xUSA)	- (51 * x90)	,
			"Base.ColtM16",			53		- (53 * xAUTO)	- (53 * xUSA)		,
			"Base.M16Wood",			55		- (55 * xAUTO)	- (55 * xUSA)		,
			"Base.M16Tape",			57		- (57 * xAUTO)	- (57 * xUSA)		,
			"Base.FAMAS",			59		- (59 * xAUTO)	- (59 * xEUR)		,
			"Base.FAMAS_G2",			61		- (61 * xAUTO)	- (61 * xEUR)		,
			"Base.FAMAS_Felin",			63		- (63 * xAUTO)	- (63 * xEUR)		,
			"Base.M85_Stock",			65		- (65 * xAUTO)	- (65 * xSOV)		,
			"Base.L85",			67		- (67 * xAUTO)	- (67 * xEUR)		,
			"Base.L85A2",			69		- (69 * xAUTO)	- (69 * xEUR)	- (69 * x90)	,
			"Base.L86",			71		- (71 * xAUTO)	- (71 * xEUR)		,
			"Base.AR18",			73		- (73 * xAUTO)	- (73 * xUSA)		,
			"Base.Type20",			75		- (75 * xAUTO)	- (75 * xPAC)	- (75 * x90)	,
			"Base.Type89",			77		- (77 * xAUTO)	- (77 * xPAC)		,
			"Base.MCX_Spear",			79		- (79 * xSEMI)	- (79 * xEUR)	- (79 * x90)	,
			"Base.MCX_VirtusPatrol",			81		- (81 * xAUTO)	- (81 * xEUR)	- (81 * x90)	,
			"Base.MCX_Socom",			83		- (83 * xAUTO)	- (83 * xEUR)	- (83 * x90)	,
			"Base.FN_FNC",			85		- (85 * xAUTO)	- (85 * xEUR)		,
			"Base.AK5C",			87		- (87 * xAUTO)	- (87 * xEUR)		,
											
			"Base.Suppressor_Rifle",			1					,
		},									
	};										
	SuburbsDistributions["Case_Large4"] = {				-- 762x39	1265	points				
		rolls = 1,									
		items = {									
			"Base.AKClip",			50					,
			"Base.762Drum",			25					,
			"Base.762x39Bullets",			50					,
			"Base.762x39Bullets",			40					,
			"Base.762x39Bullets",			30					,
			"Base.762x39Bullets",			20					,
			"Base.762x39Box",			20					,
											
			"Base.AK47",			5		- (5 * xAUTO)	- (5 * xSOV)		,
			"Base.AKM",			10		- (10 * xAUTO)	- (10 * xSOV)		,
			"Base.AK103",			15		- (15 * xAUTO)	- (15 * xSOV)	- (15 * x90)	,
			"Base.AKMS_Stock",			20		- (20 * xAUTO)	- (20 * xSOV)		,
			"Base.MD65_Stock",			25		- (25 * xAUTO)	- (25 * xSOV)		,
			"Base.Vz58",			30		- (30 * xAUTO)	- (30 * xCZE)		,
			"Base.Vz58_Stock",			35		- (35 * xAUTO)	- (35 * xCZE)		,
			"Base.SKS",			40		- (40 * xSEMI)	- (40 * xSOV)		,
			"Base.SKS_PARA",			45		- (45 * xSEMI)	- (45 * xSOV)		,
			"Base.AKM_Custom",			50		- (50 * xAUTO)	- (50 * xUSA)	- (50 * x90)	,
			"Base.MK47",			55		- (55 * xSEMI)	- (55 * xUSA)	- (55 * x90)	,
			"Base.AK47",			60		- (60 * xAUTO)	- (60 * xSOV)		,
			"Base.AKM",			65		- (65 * xAUTO)	- (65 * xSOV)		,
			"Base.AK103",			70		- (70 * xAUTO)	- (70 * xSOV)	- (70 * x90)	,
			"Base.AKMS_Stock",			75		- (75 * xAUTO)	- (75 * xSOV)		,
			"Base.MD65_Stock",			80		- (80 * xAUTO)	- (80 * xSOV)		,
			"Base.Vz58",			85		- (85 * xAUTO)	- (85 * xCZE)		,
			"Base.Vz58_Stock",			90		- (90 * xAUTO)	- (90 * xCZE)		,
			"Base.SKS",			95		- (95 * xSEMI)	- (95 * xSOV)		,
			"Base.SKS_PARA",			100		- (100 * xSEMI)	- (100 * xSOV)		,
			"Base.AKM_Custom",			105		- (105 * xAUTO)	- (105 * xUSA)	- (105 * x90)	,
			"Base.MK47",			110		- (110 * xSEMI)	- (110 * xUSA)	- (110 * x90)	,
											
			"Base.Suppressor_Rifle",			1					,
		},									
	};										
	SuburbsDistributions["Case_Large5"] = {				-- 308	1808	points				
		rolls = 1,									
		items = {									
			"Base.308StdClip",			50					,
			"Base.308Box",			25					,
			"Base.308Bullets",			50					,
			"Base.308Bullets",			40					,
			"Base.308Bullets",			30					,
			"Base.308Bullets",			20					,
			"Base.308Box",			20					,
											
			"Base.SCARH",			10		- (10 * xAUTO)	- (10 * xEUR)	- (10 * x90)	,
			"Base.SCAR20",			13		- (13 * xAUTO)	- (13 * xEUR)	- (13 * x90)	,
			"Base.G28",			16		- (16 * xAUTO)	- (16 * xEUR)	- (16 * x90)	,
			"Base.G3",			19		- (19 * xAUTO)	- (19 * xEUR)		,
			"Base.FAL",			22		- (22 * xAUTO)	- (22 * xEUR)		,
			"Base.FAL_PARA_Stock",			25		- (25 * xAUTO)	- (25 * xEUR)		,
			"Base.M14EBR",			28		- (28 * xAUTO)	- (28 * xUSA)	- (28 * x90)	,
			"Base.M14",			31		- (31 * xAUTO)	- (31 * xUSA)		,
			"Base.MAS36",			34		- (34 * xAUTO)	- (34 * xEUR)		,
			"Base.MAS44",			37		- (37 * xAUTO)	- (37 * xEUR)		,
			"Base.MAS49",			40		- (40 * xAUTO)	- (40 * xEUR)		,
			"Base.Galil",			43		- (43 * xAUTO)	- (43 * xISR)		,
			"Base.Galil_Sniper",			46		- (46 * xAUTO)	- (46 * xISR)		,
			"Base.AK308",			49		- (49 * xAUTO)	- (49 * xSOV)	- (49 * x90)	,
			"Base.PSG1",			52		- (52 * xSEMI)	- (52 * xEUR)		,
			"Base.MSG90",			55		- (55 * xSEMI)	- (55 * xEUR)		,
			"Base.SCARH",			58		- (58 * xAUTO)	- (58 * xEUR)	- (58 * x90)	,
			"Base.SCAR20",			61		- (61 * xAUTO)	- (61 * xEUR)	- (61 * x90)	,
			"Base.G28",			64		- (64 * xAUTO)	- (64 * xEUR)	- (64 * x90)	,
			"Base.G3",			67		- (67 * xAUTO)	- (67 * xEUR)		,
			"Base.FAL",			70		- (70 * xAUTO)	- (70 * xEUR)		,
			"Base.FAL_PARA_Stock",			73		- (73 * xAUTO)	- (73 * xEUR)		,
			"Base.M14EBR",			76		- (76 * xAUTO)	- (76 * xUSA)	- (76 * x90)	,
			"Base.M14",			79		- (79 * xAUTO)	- (79 * xUSA)		,
			"Base.MAS36",			82		- (82 * xAUTO)	- (82 * xEUR)		,
			"Base.MAS44",			85		- (85 * xAUTO)	- (85 * xEUR)		,
			"Base.MAS49",			88		- (88 * xAUTO)	- (88 * xEUR)		,
			"Base.Galil",			91		- (91 * xAUTO)	- (91 * xISR)		,
			"Base.Galil_Sniper",			94		- (94 * xAUTO)	- (94 * xISR)		,
			"Base.AK308",			97		- (97 * xAUTO)	- (97 * xSOV)	- (97 * x90)	,
			"Base.PSG1",			100		- (100 * xSEMI)	- (100 * xEUR)		,
			"Base.MSG90",			103		- (103 * xSEMI)	- (103 * xEUR)		,
											
			"Base.Suppressor_Rifle",			1					,
		},									
	};										
	SuburbsDistributions["Case_Large6"] = {				-- 12g_M	1960	points				
		rolls = 1,									
		items = {									
			"Base.ShotgunShells",			50					,
			"Base.ShotgunShells",			40					,
			"Base.ShotgunShells",			30					,
			"Base.ShotgunShells",			20					,
											
			"Base.SPAS12_Fold",			5		- (5 * xSEMI)	- (5 * xEUR)		,
			"Base.SPAS12_Fixed",			8		- (8 * xSEMI)	- (8 * xEUR)		,
			"Base.R11_87",			11		- (11 * xSEMI)	- (11 * xUSA)		,
			"Base.M870",			14		- (14 * xPUMP)	- (14 * xUSA)		,
			"Base.M1897",			17		- (17 * xPUMP)	- (17 * xUSA)		,
			"Base.DT11",			20		- (20 * xBREAK)	- (20 * xEUR)		,
			"Base.Coachgun",			23		- (23 * xBREAK)	- (23 * xUSA)		,
			"Base.SIX12",			26		- (26 * xREV)	- (26 * xUSA)	- (26 * x90)	,
			"Base.SIX12SD",			29		- (29 * xREV)	- (29 * xUSA)	- (29 * x90)	,
			"Base.M870_Wingmaster",			32		- (32 * xPUMP)	- (32 * xUSA)		,
			"Base.M870_Police",			35		- (35 * xPUMP)	- (35 * xUSA)		,
			"Base.M870_MCS",			38		- (38 * xPUMP)	- (38 * xUSA)		,
			"Base.M870_Express",			41		- (41 * xPUMP)	- (41 * xUSA)		,
			"Base.A400",			44		- (44 * xSEMI)	- (44 * xEUR)	- (44 * x90)	,
			"Base.M1014",			47		- (47 * xSEMI)	- (47 * xEUR)	- (47 * x90)	,
			"Base.M1014_Stock", 			50		- (50 * xSEMI)	- (50 * xEUR)	- (50 * x90)	,
			"Base.M1014_Wick",			53		- (53 * xSEMI)	- (53 * xEUR)	- (53 * x90)	,
			"Base.DAO12",			56		- (56 * xREV)	- (56 * xREST)		,
			"Base.M1887",			59		- (59 * xLEVER)	- (59 * xUSA)		,
			"Base.M1208",			62		- (62 * xSEMI)	- (62 * xUSA)	- (62 * x90)	,
			"Base.M1212",			65		- (65 * xSEMI)	- (65 * xUSA)	- (65 * x90)	,
			"Base.M1216",			68		- (68 * xSEMI)	- (68 * xUSA)	- (68 * x90)	,
			"Base.KS23",			71		- (71 * xPUMP)	- (71 * xSOV)		,
			"Base.Triple_Crown",			74		- (74 * xBREAK)	- (74 * xEUR)		,
			"Base.TOZ106",			77		- (77 * xBOLT)	- (77 * xSOV)		,
			"Base.TOZ194_Pistol",			80		- (80 * xPUMP)	- (80 * xSOV)		,
			"Base.MP133",			83		- (83 * xPUMP)	- (83 * xSOV)	- (83 * x90)	,
			"Base.MP133S_Pistol",			86		- (86 * xPUMP)	- (86 * xSOV)	- (86 * x90)	,
			"Base.KSG",			89		- (89 * xPUMP)	- (89 * xUSA)	- (89 * x90)	,
			"Base.KSG25",			92		- (92 * xPUMP)	- (92 * xUSA)	- (92 * x90)	,
			"Base.UTS15",			95		- (95 * xPUMP)	- (95 * xREST)	- (95 * x90)	,
			"Base.AUTO_5",			98		- (98 * xPUMP)	- (98 * xUSA)		,
			"Base.Ithaca_M37",			101		- (101 * xPUMP)	- (101 * xUSA)		,
			"Base.Shotgun",			104		- (104 * xPUMP)	- (104 * xUSA)		,
			"Base.DoubleBarrelShotgun", 			107		- (107 * xBREAK)	- (107 * xUSA)		,
											
			"Base.ShotgunShellsBox",			50					,
			"Base.Suppressor_Shotgun",			1					,
			"Base.Carrier_12g",			5					,
		},									
	};										
	SuburbsDistributions["Case_Large7"] = {				-- 12g_SA	1344	points				
		rolls = 1,									
		items = {									
			"Base.SPASClip",			50					,
			"Base.12gDrum",			25					,
			"Base.ShotgunShells",			50					,
			"Base.ShotgunShells",			40					,
			"Base.ShotgunShells",			30					,
			"Base.ShotgunShells",			20					,
			"Base.ShotgunShellsBox",			50					,
											
			"Base.SPAS_15",			10		- (10 * xSEMI)	- (10 * xEUR)		,
			"Base.USAS_12",			14		- (14 * xAUTO)	- (14 * xKOR)		,
			"Base.Origin",			18		- (18 * xSEMI)	- (18 * xUSA)	- (18 * x90)	,
			"Base.AA12",			22		- (22 * xAUTO)	- (22 * xUSA)	- (22 * x90)	,
			"Base.CAWS",			26		- (26 * xAUTO)	- (26 * xEUR)		,
			"Base.Saiga12",			30		- (30 * xAUTO)	- (30 * xSOV)	- (30 * x90)	,
			"Base.Saiga12_Long",			34		- (34 * xAUTO)	- (34 * xSOV)	- (34 * x90)	,
			"Base.Saiga12_Tromix",			38		- (38 * xAUTO)	- (38 * xSOV)	- (38 * x90)	,
			"Base.SPAS_15",			42		- (42 * xSEMI)	- (42 * xEUR)		,
			"Base.USAS_12",			46		- (46 * xAUTO)	- (46 * xKOR)		,
			"Base.Origin",			50		- (50 * xSEMI)	- (50 * xUSA)	- (50 * x90)	,
			"Base.AA12",			54		- (54 * xAUTO)	- (54 * xUSA)	- (54 * x90)	,
			"Base.CAWS",			58		- (58 * xAUTO)	- (58 * xEUR)		,
			"Base.Saiga12",			62		- (62 * xAUTO)	- (62 * xSOV)	- (62 * x90)	,
			"Base.Saiga12_Long",			66		- (66 * xAUTO)	- (66 * xSOV)	- (66 * x90)	,
			"Base.Saiga12_Tromix",			70		- (70 * xAUTO)	- (70 * xSOV)	- (70 * x90)	,
			"Base.SPAS_15",			74		- (74 * xSEMI)	- (74 * xEUR)		,
			"Base.USAS_12",			78		- (78 * xAUTO)	- (78 * xKOR)		,
			"Base.Origin",			82		- (82 * xSEMI)	- (82 * xUSA)	- (82 * x90)	,
			"Base.AA12",			86		- (86 * xAUTO)	- (86 * xUSA)	- (86 * x90)	,
			"Base.CAWS",			90		- (90 * xAUTO)	- (90 * xEUR)		,
			"Base.Saiga12",			94		- (94 * xAUTO)	- (94 * xSOV)	- (94 * x90)	,
			"Base.Saiga12_Long",			98		- (98 * xAUTO)	- (98 * xSOV)	- (98 * x90)	,
			"Base.Saiga12_Tromix",			102		- (102 * xAUTO)	- (102 * xSOV)	- (102 * x90)	,
											
			"Base.Suppressor_Shotgun",			1					,
			"Base.Carrier_12g",			5					,
		},									
	};										
	SuburbsDistributions["Case_Large8"] = {				-- CROSSBOW	1008	points				
		rolls = 1,									
		items = {									
			"Base.Bolt_Bear",			100					,
			"Base.Bolt_Bear",			80					,
			"Base.Bolt_Bear",			60					,
			"Base.Bolt_Bear",			40					,
			"Base.Bolt_Bear",			20					,
											
			"Base.TAC15",			40		- (40 * xBOW)	- (40 * xUSA)		,
			"Base.TenPointVaporRS_470",			48		- (48 * xBOW)	- (48 * xUSA)		,
			"Base.HortonScout_125",			56		- (56 * xBOW)	- (56 * xUSA)		,
			"Base.MissionMXB_400",			64		- (64 * xBOW)	- (64 * xUSA)		,
			"Base.TenPointTurbo_XLT",			72		- (72 * xBOW)	- (72 * xUSA)		,
			"Base.HZRedback_RTS",			80		- (80 * xBOW)	- (80 * xUSA)		,
			"Base.TAC15",			88		- (88 * xBOW)	- (88 * xUSA)		,
			"Base.TenPointVaporRS_470",			96		- (96 * xBOW)	- (96 * xUSA)		,
			"Base.HortonScout_125",			104		- (104 * xBOW)	- (104 * xUSA)		,
			"Base.MissionMXB_400",			112		- (112 * xBOW)	- (112 * xUSA)		,
			"Base.TenPointTurbo_XLT",			120		- (120 * xBOW)	- (120 * xUSA)		,
			"Base.HZRedback_RTS",			128		- (128 * xBOW)	- (128 * xUSA)		,
			"Base.Bolt_Bear_Pack",			50					,
		},									
	};										
	SuburbsDistributions["Case_Large9"] = {				-- BOW	950	points				
		rolls = 1,									
		items = {									
			"Base.Arrow_Fiberglass",			100					,
			"Base.Arrow_Fiberglass",			80					,
			"Base.Arrow_Fiberglass",			60					,
			"Base.Arrow_Fiberglass",			40					,
			"Base.Arrow_Fiberglass",			20					,
											
			"Base.Genesis_Bow",			50		- (50 * xBOW)	- (50 * xUSA)		,
			"Base.Genesis_X_Bow",			60		- (60 * xBOW)	- (60 * xUSA)		,
			"Base.Genesis_Mini_Bow",			70		- (70 * xBOW)	- (70 * xUSA)		,
			"Base.BowTechSR_350",			80		- (80 * xBOW)	- (80 * xUSA)		,
			"Base.HoytSpectra_1000",			90		- (90 * xBOW)	- (90 * xUSA)		,
			"Base.Genesis_Bow",			100		- (100 * xBOW)	- (100 * xUSA)		,
			"Base.Genesis_X_Bow",			110		- (110 * xBOW)	- (110 * xUSA)		,
			"Base.Genesis_Mini_Bow",			120		- (120 * xBOW)	- (120 * xUSA)		,
			"Base.BowTechSR_350",			130		- (130 * xBOW)	- (130 * xUSA)		,
			"Base.HoytSpectra_1000",			140		- (140 * xBOW)	- (140 * xUSA)		,
			"Base.Arrow_Fiberglass_Pack",			50					,
		},									
	};										
											
	SuburbsDistributions["Case_Cute"] = {				-- 22LR	1200	points				
		rolls = 1,									
		items = {									
			"Base.22Clip",			50					,
			"Base.22ExtClip",			25					,
			"Base.22Drum",			10					,
			"Base.Bullets22",			50					,
			"Base.Bullets22",			40					,
			"Base.Bullets22",			30					,
			"Base.Bullets22",			20					,
			"Base.Bullets22Box",			20					,
											
			"Base.Ruger_1022",			30		- (30 * xSEMI)	- (30 * xUSA)		,
			"Base.Marlin_M70",			36		- (36 * xSEMI)	- (36 * xUSA)		,
			"Base.Cricket_22",			42		- (42 * xBOLT)	- (42 * xUSA)		,
			"Base.AR7",			48		- (48 * xSEMI)	- (48 * xUSA)		,
			"Base.Calico_22LR",			54		- (54 * xSMG)	- (54 * xUSA)		,
			"Base.American180",			60		- (60 * xSMG)	- (60 * xUSA)		,
			"Base.Winchester1903",			66		- (66 * xLEVER)	- (66 * xUSA)		,
			"Base.Buckmark_Carbine",			72		- (72 * xSEMI)	- (72 * xUSA)		,
			"Base.Ruger_1022",			78		- (78 * xSEMI)	- (78 * xUSA)		,
			"Base.Marlin_M70",			84		- (84 * xSEMI)	- (84 * xUSA)		,
			"Base.Cricket_22",			90		- (90 * xBOLT)	- (90 * xUSA)		,
			"Base.AR7",			96		- (96 * xSEMI)	- (96 * xUSA)		,
			"Base.Calico_22LR",			102		- (102 * xSMG)	- (102 * xUSA)		,
			"Base.American180",			108		- (108 * xSMG)	- (108 * xUSA)		,
			"Base.Winchester1903",			114		- (114 * xLEVER)	- (114 * xUSA)		,
			"Base.Buckmark_Carbine",			120		- (120 * xSEMI)	- (120 * xUSA)		,
		},									
	};										
											
	SuburbsDistributions["Case_Police"] = {				-- 22LR	1200	points				
		rolls = 1,									
		items = {									
			"Base.M870",			4		- (4 * xPUMP)	- (4 * xUSA)		,
			"Base.M870_Police",			8		- (8 * xPUMP)	- (8 * xUSA)		,
			"Base.M870_MCS",			12		- (12 * xPUMP)	- (12 * xUSA)		,
			"Base.SPAS12_Fold",			16		- (16 * xSEMI)	- (16 * xEUR)		,
			"Base.SPAS12_Fixed",			20		- (20 * xSEMI)	- (20 * xEUR)		,
			"Base.MINI14",			24		- (24 * xSEMI)	- (24 * xUSA)		,
			"Base.MINI14_Stock",			28		- (28 * xSEMI)	- (28 * xUSA)		,
			"Base.MINI14_T",			32		- (32 * xSEMI)	- (32 * xUSA)		,
			"Base.Bush_AR15_MOE",			36		- (36 * xSEMI)	- (36 * xUSA)		,
			"Base.Bush_XM15",			40		- (40 * xSEMI)	- (40 * xUSA)		,
			"Base.Bush_XM15_Custom",			44		- (44 * xSEMI)	- (44 * xUSA)		,
			"Base.MCX_Spear",			48		- (48 * xSEMI)	- (48 * xEUR)		,
			"Base.M870",			52		- (52 * xPUMP)	- (52 * xUSA)		,
			"Base.M870_Police",			56		- (56 * xPUMP)	- (56 * xUSA)		,
			"Base.M870_MCS",			60		- (60 * xPUMP)	- (60 * xUSA)		,
			"Base.SPAS12_Fold",			64		- (64 * xSEMI)	- (64 * xEUR)		,
			"Base.SPAS12_Fixed",			68		- (68 * xSEMI)	- (68 * xEUR)		,
			"Base.MINI14",			72		- (72 * xSEMI)	- (72 * xUSA)		,
			"Base.MINI14_Stock",			76		- (76 * xSEMI)	- (76 * xUSA)		,
			"Base.MINI14_T",			80		- (80 * xSEMI)	- (80 * xUSA)		,
			"Base.Bush_AR15_MOE",			84		- (84 * xSEMI)	- (84 * xUSA)		,
			"Base.Bush_XM15",			88		- (88 * xSEMI)	- (88 * xUSA)		,
			"Base.Bush_XM15_Custom",			92		- (92 * xSEMI)	- (92 * xUSA)		,
			"Base.MCX_Spear",			96		- (96 * xSEMI)	- (96 * xEUR)		,
		},									
	};										
	----------------------------------										
	--	CASE HEAVY	CAP(12)	--							
	----------------------------------										
	SuburbsDistributions["Case_Heavy1"] = {				-- GREN	1008	points				
		rolls = 1,									
		items = {									
			"Base.EX41_HE",			40		- (40 * xGREN)	- (40 * xUSA)		,
			"Base.M32_HE",			48		- (48 * xGREN)	- (48 * xUSA)		,
			"Base.GM94_HE",			56		- (56 * xGREN)	- (56 * xSOV)	- (56 * x90)	,
			"Base.K11",			64		- (64 * xGREN)	- (64 * xKOR)	- (64 * x90)	,
			"Base.EX41_HE",			72		- (72 * xGREN)	- (72 * xUSA)		,
			"Base.M32_HE",			80		- (80 * xGREN)	- (80 * xUSA)		,
			"Base.GM94_HE",			88		- (88 * xGREN)	- (88 * xSOV)	- (88 * x90)	,
			"Base.K11",			96		- (96 * xGREN)	- (96 * xKOR)	- (96 * x90)	,
			"Base.EX41_HE",			104		- (104 * xGREN)	- (104 * xUSA)		,
			"Base.M32_HE",			112		- (112 * xGREN)	- (112 * xUSA)		,
			"Base.GM94_HE",			120		- (120 * xGREN)	- (120 * xSOV)	- (120 * x90)	,
			"Base.K11",			128		- (128 * xGREN)	- (128 * xKOR)	- (128 * x90)	,
											
			"Base.40HERound",			50					,
			"Base.40HERound",			40					,
			"Base.40HERound",			30					,
			"Base.40HERound",			20					,
			"Base.40INCRound",			50					,
			"Base.40INCRound",			40					,
			"Base.40INCRound",			30					,
			"Base.40INCRound",			20					,
		},									
	};										
	SuburbsDistributions["Case_Heavy2"] = {				-- 556LMG	1008	points				
		rolls = 1,									
		items = {									
			"Base.556Belt",			50					,
			"Base.556Belt",			25					,
			"Base.556Bullets",			50					,
			"Base.556Bullets",			40					,
			"Base.556Bullets",			30					,
			"Base.556Bullets",			20					,
			"Base.556Box",			20					,
											
			"Base.XM8LMG",			40		- (40 * xLMG)	- (40 * xEUR)	- (40 * x90)	,
			"Base.M249",			48		- (48 * xLMG)	- (48 * xUSA)		,
			"Base.M249E3",			56		- (56 * xLMG)	- (56 * xUSA)		,
			"Base.K3LMG",			64		- (64 * xLMG)	- (64 * xKOR)		,
			"Base.XM8LMG",			72		- (72 * xLMG)	- (72 * xEUR)	- (72 * x90)	,
			"Base.M249",			80		- (80 * xLMG)	- (80 * xUSA)		,
			"Base.M249E3",			88		- (88 * xLMG)	- (88 * xUSA)		,
			"Base.K3LMG",			96		- (96 * xLMG)	- (96 * xKOR)		,
			"Base.XM8LMG",			104		- (104 * xLMG)	- (104 * xEUR)	- (104 * x90)	,
			"Base.M249",			112		- (112 * xLMG)	- (112 * xUSA)		,
			"Base.M249E3",			120		- (120 * xLMG)	- (120 * xUSA)		,
			"Base.K3LMG",			128		- (128 * xLMG)	- (128 * xKOR)		,
		},									
	};										
	SuburbsDistributions["Case_Heavy3"] = {				-- 308LMG	1200	points				
		rolls = 1,									
		items = {									
			"Base.308Belt",			50					,
			"Base.308Belt",			25					,
			"Base.308Bullets",			50					,
			"Base.308Bullets",			40					,
			"Base.308Bullets",			30					,
			"Base.308Bullets",			20					,
			"Base.308Box",			20					,
											
			"Base.M240",			30		- (30 * xLMG)	- (30 * xUSA)		,
			"Base.G21LMG",			36		- (36 * xLMG)	- (36 * xEUR)	- (36 * x90)	,
			"Base.K12",			42		- (42 * xLMG)	- (42 * xKOR)	- (42 * x90)	,
			"Base.PKM",			48		- (48 * xLMG)	- (48 * xSOV)		,
			"Base.MG42",			54		- (54 * xLMG)	- (54 * xEUR)		,
			"Base.M60",			60		- (60 * xLMG)	- (60 * xUSA)		,
			"Base.MK43",			66		- (66 * xLMG)	- (66 * xUSA)	- (66 * x90)	,
			"Base.RPD",			72		- (72 * xLMG)	- (72 * xSOV)		,
			"Base.M240",			78		- (78 * xLMG)	- (78 * xUSA)		,
			"Base.G21LMG",			84		- (84 * xLMG)	- (84 * xEUR)	- (84 * x90)	,
			"Base.K12",			90		- (90 * xLMG)	- (90 * xKOR)	- (90 * x90)	,
			"Base.PKM",			96		- (96 * xLMG)	- (96 * xSOV)		,
			"Base.MG42",			102		- (102 * xLMG)	- (102 * xEUR)		,
			"Base.M60",			108		- (108 * xLMG)	- (108 * xUSA)		,
			"Base.MK43",			114		- (114 * xLMG)	- (114 * xUSA)	- (114 * x90)	,
			"Base.RPD",			120		- (120 * xLMG)	- (120 * xSOV)		,
		},									
	};										
	SuburbsDistributions["Case_Heavy4"] = {				-- 50BMG	1278	points				
		rolls = 1,									
		items = {									
			"Base.M82Clip",			50					,
			"Base.M82Clip",			25					,
			"Base.50BMGBox",			20					,
		--	"Base.50BMGBox",			10					,
											
			"Base.BOAR",			20		- (20 * xBREAK)	- (20 * xUSA)		,
			"Base.M82",			26		- (26 * xSEMI)	- (26 * xUSA)		,
			"Base.EDM96_Fold",			32		- (32 * xBOLT)	- (32 * xUSA)	- (32 * x90)	,
			"Base.BFG50",			38		- (38 * xBREAK)	- (38 * xUSA)	- (38 * x90)	,
			"Base.Harris50",			44		- (44 * xBOLT)	- (44 * xUSA)		,
			"Base.TAC50",			50		- (50 * xBOLT)	- (50 * xUSA)		,
			"Base.CheyTac50",			56		- (56 * xBOLT)	- (56 * xUSA)	- (56 * x90)	,
			"Base.Gepard_M6",			62		- (62 * xBOLT)	- (62 * xEUR)		,
			"Base.OSV_96",			68		- (68 * xBOLT)	- (68 * xSOV)	- (68 * x90)	,
			"Base.BOAR",			74		- (74 * xBREAK)	- (74 * xUSA)		,
			"Base.M82",			80		- (80 * xSEMI)	- (80 * xUSA)		,
			"Base.EDM96_Fold",			86		- (86 * xBOLT)	- (86 * xUSA)	- (86 * x90)	,
			"Base.BFG50",			92		- (92 * xBREAK)	- (92 * xUSA)	- (92 * x90)	,
			"Base.Harris50",			98		- (98 * xBOLT)	- (98 * xUSA)		,
			"Base.TAC50",			104		- (104 * xBOLT)	- (104 * xUSA)		,
			"Base.CheyTac50",			110		- (110 * xBOLT)	- (110 * xUSA)	- (110 * x90)	,
			"Base.Gepard_M6",			116		- (116 * xBOLT)	- (116 * xEUR)		,
			"Base.OSV_96",			122		- (122 * xBOLT)	- (122 * xSOV)	- (122 * x90)	,
											
			"Base.50BMGBullets",			50					,
			"Base.50BMGBullets",			40					,
			"Base.50BMGBullets",			30					,
			"Base.50BMGBullets",			20					,
			"Base.Suppressor_BMG",			1					,
		},									
	};										
											
											
	----------------------------------										
	--	BAGS			--						
	----------------------------------										
	SuburbsDistributions["Bag_Police"] = {					-- <=== THIS WAY REPLACES ENTIRE LOOT IN BAG					
		rolls = 1,									
		items = {									
			"Base.9mmClip",			10		- (w9 * x9)	- (10 * xStdMag)		,
			"Base.45DSClip",			10		- (w45 * x45)	- (10 * xStdMag)		,
			"Base.223StdClip",			10		- (w223 * x223)	- (10 * xStdMag)		,
			"Base.9mmExtClip",			20		- (w9 * x9)	- (20 * xExtMag)		,
			"Base.45DSExtClip",			20		- (w45 * x45)	- (20 * xExtMag)		,
			"Base.223ExtClip",			15		- (w223 * x223)	- (15 * xExtMag)		,
			"Base.556Clip",			15		- (w556 * x556)	- (15 * xStdMag)		,
			"Base.357Speed",			15		- (w357 * x357)	- (15 * xStdMag)	- (15 * xREV)	,
			"Base.Bullets9mmBox",			20		- (w9 * x9)	- (20 * xAmmoBox)		,
			"Base.Bullets45Box",			15		- (w45 * x45)	- (15 * xAmmoBox)		,
			"Base.Bullets357Box",			15		- (w357 * x357)	- (15 * xAmmoBox)		,
			"Base.ShotgunShellsBox",			20		- (w12g * x12g)	- (20 * xAmmoBox)		,
			"Base.223Box",			15		- (w223 * x223)	- (15 * xAmmoBox)		,
			"Base.556Box",			20		- (w556 * x556)	- (20 * xAmmoBox)		,
			"Base.Cleaning",			10					,
			"Base.WD",			10					,
			"Base.Sling_2",			8		- (Part * xPart)			,
			"Base.AmmoStrap_Shells",			8		- (Part * xPart)			,
			"Base.Carrier_12g",			8		- (Part * xPart)			,
			"Base.Light_Medium_M952V",			4		- (Light * xLight)			,
			"Base.Light_Small_TLR_7AH",			4		- (Light * xLight)			,
			"Base.Light_Small",			4		- (Light * xLight)			,
			"Base.Light_Large",			4		- (Light * xLight)			,
			"Base.Gloves_LeatherGlovesBlack",			10					,
			"Base.Glasses_Shooting",			8					,
			"Base.Hat_EarMuff_Protectors",			10					,
			"Base.HandTorch",			20					,
			"Base.SolventTrap_Adapter",			8					,
			"Base.ASP_B",			16		- (Blunt * xBlunt)			,
			"Base.Nightstick",			12		- (Blunt * xBlunt)			,
			"Base.MilitaryBaton",			8		- (Blunt * xBlunt)			,
			"Base.PushDagger",			4		- (SmKnife * xSmKnife)			,
			"Base.Karambit",			2		- (SmKnife * xSmKnife)			,
			"Base.Butterfly",			1		- (SmKnife * xSmKnife)			,
			"DoughnutChocolate",			0.5					,
			"DoughnutFrosted",			0.5					,
			"DoughnutJelly",			0.5					,
			"DoughnutPlain",			0.5					,
		},									
	};										
											
	SuburbsDistributions["CCW_Purse_22"] = {				--	1150					
		rolls =	1	,							
		items = {									
			"Base.22Clip",			50					,
			"Base.Bullets22Box",			25					,
			"Base.22Clip",			25					,
			"Base.Bullets22",			50					,
			"Base.Bullets22",			40					,
			"Base.Bullets22",			30					,
			"Base.Bullets22",			20					,
											
			"Base.Buckmark",			10		- (20 * xUSA)			,
			"Base.Ruger_MK4",			15		- (20 * xUSA)		- (20 * x90)	,
			"Base.Ruger_MK4_2245",			20		- (20 * xUSA)		- (20 * x90)	,
			"Base.HK4_22",			25		- (20 * xEUR)			,
			"Base.ZIP22",			30		- (20 * xUSA)		- (20 * x90)	,
			"Base.Buckmark",			35		- (20 * xUSA)			,
			"Base.Ruger_MK4",			40		- (20 * xUSA)		- (20 * x90)	,
			"Base.Ruger_MK4_2245",			45		- (20 * xUSA)		- (20 * x90)	,
			"Base.HK4_22",			50		- (20 * xEUR)			,
			"Base.ZIP22",			55		- (20 * xUSA)		- (20 * x90)	,
			"Base.Buckmark",			60		- (20 * xUSA)			,
			"Base.Ruger_MK4",			65		- (20 * xUSA)		- (20 * x90)	,
			"Base.Ruger_MK4_2245",			70		- (20 * xUSA)		- (20 * x90)	,
			"Base.HK4_22",			75		- (20 * xEUR)			,
			"Base.ZIP22",			80		- (20 * xUSA)		- (20 * x90)	,
			"Base.Buckmark",			85		- (20 * xUSA)			,
			"Base.Ruger_MK4",			90		- (20 * xUSA)		- (20 * x90)	,
			"Base.Ruger_MK4_2245",			95		- (20 * xUSA)		- (20 * x90)	,
			"Base.HK4_22",			100		- (20 * xEUR)			,
			"Base.ZIP22",			105		- (20 * xUSA)		- (20 * x90)	,
		},									
	};										
	SuburbsDistributions["CCW_Purse_380"] = {				--	1260					
		rolls =	1	,							
		items = {									
			"Base.380Clip",			50					,
			"Base.Bullets380Box",			25					,
			"Base.380Clip",			25					,
			"Base.Bullets380",			50					,
			"Base.Bullets380",			40					,
			"Base.Bullets380",			30					,
			"Base.Bullets380",			20					,
											
			"Base.Bersa85F",			10		- (20 * xREST)			,
			"Base.G42",			15		- (20 * xEUR)		- (20 * x90)	,
			"Base.LCP380",			20		- (20 * xUSA)		- (20 * x90)	,
			"Base.BodyGuard380",			25		- (20 * xUSA)		- (20 * x90)	,
			"Base.Makarov380",			30		- (20 * xSOV)			,
			"Base.PPK",			35		- (20 * xEUR)			,
			"Base.HK4_380",			40		- (20 * xEUR)			,
			"Base.Bersa85F",			45		- (20 * xREST)			,
			"Base.G42",			50		- (20 * xEUR)		- (20 * x90)	,
			"Base.LCP380",			55		- (20 * xUSA)		- (20 * x90)	,
			"Base.BodyGuard380",			60		- (20 * xUSA)		- (20 * x90)	,
			"Base.Makarov380",			65		- (20 * xSOV)			,
			"Base.PPK",			70		- (20 * xEUR)			,
			"Base.HK4_380",			75		- (20 * xEUR)			,
			"Base.Bersa85F",			80		- (20 * xREST)			,
			"Base.G42",			85		- (20 * xEUR)		- (20 * x90)	,
			"Base.LCP380",			90		- (20 * xUSA)		- (20 * x90)	,
			"Base.BodyGuard380",			95		- (20 * xUSA)		- (20 * x90)	,
			"Base.Makarov380",			100		- (20 * xSOV)			,
			"Base.PPK",			105		- (20 * xEUR)			,
			"Base.HK4_380",			110		- (20 * xEUR)			,
		},									
	};										
	SuburbsDistributions["CCW_Purse_9"] = {				--	1344					
		rolls =	1	,							
		items = {									
			"Base.9mmClip",			50					,
			"Base.Bullets9mmBox",			25					,
			"Base.9mmExtClip",			25					,
			"Base.Bullets9mm",			50					,
			"Base.Bullets9mm",			40					,
			"Base.Bullets9mm",			30					,
			"Base.Bullets9mm",			20					,
											
			"Base.G17",			10		- (20 * xEUR)			,
			"Base.M9",			14		- (20 * xEUR)			,
			"Base.CZ_2075",			18		- (20 * xCZE)		- (20 * x90)	,
			"Base.CZ_75_P01",			22		- (20 * xCZE)			,
			"Base.CZ_75_Compact",			26		- (20 * xCZE)			,
			"Base.G34", 			30		- (20 * xUSA)		- (20 * x90)	,
			"Base.XD9",			34		- (20 * xUSA)		- (20 * x90)	,
			"Base.MP9",			38		- (20 * xUSA)		- (20 * x90)	,
			"Base.Pistol",			42		- (20 * xSOV)			,
			"Base.P226",			46		- (20 * xEUR)			,
			"Base.K5",			50		- (20 * xKOR)			,
			"Base.M5906",			54		- (20 * xUSA)			,
			"Base.G17",			58		- (20 * xEUR)			,
			"Base.M9",			62		- (20 * xEUR)			,
			"Base.CZ_2075",			66		- (20 * xCZE)		- (20 * x90)	,
			"Base.CZ_75_P01",			70		- (20 * xCZE)			,
			"Base.CZ_75_Compact",			74		- (20 * xCZE)			,
			"Base.G34", 			78		- (20 * xUSA)		- (20 * x90)	,
			"Base.XD9",			82		- (20 * xUSA)		- (20 * x90)	,
			"Base.MP9",			86		- (20 * xUSA)		- (20 * x90)	,
			"Base.Pistol",			90		- (20 * xSOV)			,
			"Base.P226",			94		- (20 * xEUR)			,
			"Base.K5",			98		- (20 * xKOR)			,
			"Base.M5906",			102		- (20 * xUSA)			,
		},									
	};										
	SuburbsDistributions["CCW_Purse_357"] = {				--	1375					
		rolls =	1	,							
		items = {									
			"Base.357Speed",			50					,
			"Base.Bullets357Box",			25					,
			"Base.357Speed",			25					,
			"Base.Bullets357",			50					,
			"Base.Bullets357",			40					,
			"Base.Bullets357",			30					,
			"Base.Bullets357",			20					,
											
			"Base.GP100_2_357",			10		- (20 * xUSA)			,
			"Base.Revolver_Short_357",			15		- (20 * xUSA)			,
			"Base.GP100_4_357",			20		- (20 * xUSA)			,
			"Base.Revolver_357",			25		- (20 * xUSA)			,
			"Base.GP100_6_357",			30		- (20 * xUSA)			,
			"Base.Revolver_Long_357",			35		- (20 * xUSA)			,
			"Base.K6S",			40		- (20 * xUSA)		- (20 * x90)	,
			"Base.Taurus856",			45		- (20 * xREST)		- (20 * x90)	,
			"Base.Rhino_200DS",			50		- (20 * xEUR)		- (20 * x90)	,
			"Base.Rhino_40DS",			55		- (20 * xEUR)		- (20 * x90)	,
			"Base.Rhino_60DS",			60		- (20 * xEUR)		- (20 * x90)	,
			"Base.GP100_2_357",			65		- (20 * xUSA)			,
			"Base.Revolver_Short_357",			70		- (20 * xUSA)			,
			"Base.GP100_4_357",			75		- (20 * xUSA)			,
			"Base.Revolver_357",			80		- (20 * xUSA)			,
			"Base.GP100_6_357",			85		- (20 * xUSA)			,
			"Base.Revolver_Long_357",			90		- (20 * xUSA)			,
			"Base.K6S",			95		- (20 * xUSA)		- (20 * x90)	,
			"Base.Taurus856",			100		- (20 * xREST)		- (20 * x90)	,
			"Base.Rhino_200DS",			105		- (20 * xEUR)		- (20 * x90)	,
			"Base.Rhino_40DS",			110		- (20 * xEUR)		- (20 * x90)	,
			"Base.Rhino_60DS",			115		- (20 * xEUR)		- (20 * x90)	,
		},									
	};										
	SuburbsDistributions["CCW_Purse_45_1"] = {				--	1250					
		rolls =	1	,							
		items = {									
			"Base.45Clip",			50					,
			"Base.Bullets45Box",			25					,
			"Base.45ExtClip",			25					,
			"Base.Bullets45",			50					,
			"Base.Bullets45",			40					,
			"Base.Bullets45",			30					,
			"Base.Bullets45",			20					,
											
			"Base.Pistol2",			10		- (20 * xUSA)			,
			"Base.Colt1911",			15		- (20 * xUSA)			,
			"Base.Colt_Commander",			20		- (20 * xUSA)			,
			"Base.AMT1911",			25		- (20 * xUSA)			,
			"Base.AMT1911_Long",			30		- (20 * xUSA)			,
			"Base.PULP_1911",			35		- (20 * xUSA)			,
			"Base.Colt_Kimber",			40		- (20 * xUSA)		- (20 * x90)	,
			"Base.Pistol2",			45		- (20 * xUSA)			,
			"Base.Colt1911",			50		- (20 * xUSA)			,
			"Base.Colt_Commander",			55		- (20 * xUSA)			,
			"Base.AMT1911",			60		- (20 * xUSA)			,
			"Base.AMT1911_Long",			65		- (20 * xUSA)			,
			"Base.PULP_1911",			70		- (20 * xUSA)			,
			"Base.Colt_Kimber",			75		- (20 * xUSA)		- (20 * x90)	,
			"Base.Pistol2",			80		- (20 * xUSA)			,
			"Base.Colt1911",			85		- (20 * xUSA)			,
			"Base.Colt_Commander",			90		- (20 * xUSA)			,
			"Base.AMT1911",			95		- (20 * xUSA)			,
			"Base.AMT1911_Long",			100		- (20 * xUSA)			,
			"Base.PULP_1911",			105		- (20 * xUSA)			,
			"Base.Colt_Kimber",			110		- (20 * xUSA)		- (20 * x90)	,
		},									
	};										
											
	SuburbsDistributions["CCW_Purse_45_2"] = {				--	1375					
		rolls =	1	,							
		items = {									
			"Base.45DSClip",			50					,
			"Base.Bullets45Box",			25					,
			"Base.45DSExtClip",			25					,
			"Base.Bullets45",			50					,
			"Base.Bullets45",			40					,
			"Base.Bullets45",			30					,
			"Base.Bullets45",			20					,
											
			"Base.P220",			10		- (20 * xEUR)			,
			"Base.G21",			15		- (20 * xEUR)			,
			"Base.M4506",			20		- (20 * xUSA)			,
			"Base.XD4",			25		- (20 * xUSA)		- (20 * x90)	,
			"Base.MP45",			30		- (20 * xUSA)		- (20 * x90)	,
			"Base.CZ97B",			35		- (20 * xCZE)		- (20 * x90)	,
			"Base.EAA_Witness_45",			40		- (20 * xEUR)			,
			"Base.PARA1911",			45		- (20 * xUSA)			,
			"Base.HK_MK23",			50		- (20 * xEUR)			,
			"Base.HK_USP",			55		- (20 * xEUR)			,
			"Base.HK_USP_Match",			60		- (20 * xEUR)			,
			"Base.P220",			65		- (20 * xEUR)			,
			"Base.G21",			70		- (20 * xEUR)			,
			"Base.M4506",			75		- (20 * xUSA)			,
			"Base.XD4",			80		- (20 * xUSA)		- (20 * x90)	,
			"Base.MP45",			85		- (20 * xUSA)		- (20 * x90)	,
			"Base.CZ97B",			90		- (20 * xCZE)		- (20 * x90)	,
			"Base.EAA_Witness_45",			95		- (20 * xEUR)			,
			"Base.PARA1911",			100		- (20 * xUSA)			,
			"Base.HK_MK23",			105		- (20 * xEUR)			,
			"Base.HK_USP",			110		- (20 * xEUR)			,
			"Base.HK_USP_Match",			115		- (20 * xEUR)			,
		},									
	};										
											
	SuburbsDistributions["CCW_FannyPack_22"] = {				--	1150					
		rolls =	1	,							
		items = {									
			"Base.22Clip",			50					,
			"Base.Bullets22Box",			25					,
			"Base.22Clip",			25					,
			"Base.Bullets22",			50					,
			"Base.Bullets22",			40					,
			"Base.Bullets22",			30					,
			"Base.Bullets22",			20					,
											
			"Base.Buckmark",			10		- (20 * xUSA)			,
			"Base.Ruger_MK4",			15		- (20 * xUSA)		- (20 * x90)	,
			"Base.Ruger_MK4_2245",			20		- (20 * xUSA)		- (20 * x90)	,
			"Base.HK4_22",			25		- (20 * xEUR)			,
			"Base.ZIP22",			30		- (20 * xUSA)		- (20 * x90)	,
			"Base.Buckmark",			35		- (20 * xUSA)			,
			"Base.Ruger_MK4",			40		- (20 * xUSA)		- (20 * x90)	,
			"Base.Ruger_MK4_2245",			45		- (20 * xUSA)		- (20 * x90)	,
			"Base.HK4_22",			50		- (20 * xEUR)			,
			"Base.ZIP22",			55		- (20 * xUSA)		- (20 * x90)	,
			"Base.Buckmark",			60		- (20 * xUSA)			,
			"Base.Ruger_MK4",			65		- (20 * xUSA)		- (20 * x90)	,
			"Base.Ruger_MK4_2245",			70		- (20 * xUSA)		- (20 * x90)	,
			"Base.HK4_22",			75		- (20 * xEUR)			,
			"Base.ZIP22",			80		- (20 * xUSA)		- (20 * x90)	,
			"Base.Buckmark",			85		- (20 * xUSA)			,
			"Base.Ruger_MK4",			90		- (20 * xUSA)		- (20 * x90)	,
			"Base.Ruger_MK4_2245",			95		- (20 * xUSA)		- (20 * x90)	,
			"Base.HK4_22",			100		- (20 * xEUR)			,
			"Base.ZIP22",			105		- (20 * xUSA)		- (20 * x90)	,
		},									
	};										
	SuburbsDistributions["CCW_FannyPack_380"] = {				--	1260					
		rolls =	1	,							
		items = {									
			"Base.380Clip",			50					,
			"Base.Bullets380Box",			25					,
			"Base.380Clip",			25					,
			"Base.Bullets380",			50					,
			"Base.Bullets380",			40					,
			"Base.Bullets380",			30					,
			"Base.Bullets380",			20					,
											
			"Base.Bersa85F",			10		- (20 * xREST)			,
			"Base.G42",			15		- (20 * xEUR)		- (20 * x90)	,
			"Base.LCP380",			20		- (20 * xUSA)		- (20 * x90)	,
			"Base.BodyGuard380",			25		- (20 * xUSA)		- (20 * x90)	,
			"Base.Makarov380",			30		- (20 * xSOV)			,
			"Base.PPK",			35		- (20 * xEUR)			,
			"Base.HK4_380",			40		- (20 * xEUR)			,
			"Base.Bersa85F",			45		- (20 * xREST)			,
			"Base.G42",			50		- (20 * xEUR)		- (20 * x90)	,
			"Base.LCP380",			55		- (20 * xUSA)		- (20 * x90)	,
			"Base.BodyGuard380",			60		- (20 * xUSA)		- (20 * x90)	,
			"Base.Makarov380",			65		- (20 * xSOV)			,
			"Base.PPK",			70		- (20 * xEUR)			,
			"Base.HK4_380",			75		- (20 * xEUR)			,
			"Base.Bersa85F",			80		- (20 * xREST)			,
			"Base.G42",			85		- (20 * xEUR)		- (20 * x90)	,
			"Base.LCP380",			90		- (20 * xUSA)		- (20 * x90)	,
			"Base.BodyGuard380",			95		- (20 * xUSA)		- (20 * x90)	,
			"Base.Makarov380",			100		- (20 * xSOV)			,
			"Base.PPK",			105		- (20 * xEUR)			,
			"Base.HK4_380",			110		- (20 * xEUR)			,
		},									
	};										
	SuburbsDistributions["CCW_FannyPack_9"] = {				--	1674					
		rolls =	1	,							
		items = {									
			"Base.9mmClip",			50					,
			"Base.Bullets9mmBox",			25					,
			"Base.9mmExtClip",			25					,
			"Base.Bullets9mm",			50					,
			"Base.Bullets9mm",			40					,
			"Base.Bullets9mm",			30					,
			"Base.Bullets9mm",			20					,
											
			"Base.G17",			10		- (20 * xEUR)			,
			"Base.M9",			14		- (20 * xEUR)			,
			"Base.CZ_75b",			18		- (20 * xCZE)			,
			"Base.CZ_75_SP01",			22		- (20 * xCZE)			,
			"Base.CZ_75_Shadow",			26		- (20 * xCZE)		- (20 * x90)	,
			"Base.EAA_Witness_9",			30		- (20 * xEUR)			,
			"Base.EAA_Witness_Long_9",			34		- (20 * xEUR)			,
			"Base.G34", 			38		- (20 * xUSA)		- (20 * x90)	,
			"Base.XD9",			42		- (20 * xUSA)		- (20 * x90)	,
			"Base.MP9",			46		- (20 * xUSA)		- (20 * x90)	,
			"Base.Pistol",			50		- (20 * xSOV)			,
			"Base.P226",			54		- (20 * xEUR)			,
			"Base.K5",			58		- (20 * xKOR)			,
			"Base.M5906",			62		- (20 * xUSA)			,
			"Base.G17",			66		- (20 * xEUR)			,
			"Base.M9",			70		- (20 * xEUR)			,
			"Base.CZ_75b",			74		- (20 * xCZE)			,
			"Base.CZ_75_SP01",			78		- (20 * xCZE)			,
			"Base.EAA_Witness_9",			82		- (20 * xEUR)			,
			"Base.EAA_Witness_Long_9",			86		- (20 * xEUR)			,
			"Base.G34", 			90		- (20 * xUSA)		- (20 * x90)	,
			"Base.XD9",			94		- (20 * xUSA)		- (20 * x90)	,
			"Base.MP9",			98		- (20 * xUSA)		- (20 * x90)	,
			"Base.Pistol",			102		- (20 * xSOV)			,
			"Base.P226",			106		- (20 * xEUR)			,
			"Base.K5",			110		- (20 * xKOR)			,
			"Base.M5906",			114		- (20 * xUSA)			,
		},									
	};										
	SuburbsDistributions["CCW_FannyPack_357"] = {				--	1375					
		rolls =	1	,							
		items = {									
			"Base.357Speed",			50					,
			"Base.Bullets357Box",			25					,
			"Base.357Speed",			25					,
			"Base.Bullets357",			50					,
			"Base.Bullets357",			40					,
			"Base.Bullets357",			30					,
			"Base.Bullets357",			20					,
											
			"Base.GP100_2_357",			10		- (20 * xUSA)			,
			"Base.Revolver_Short_357",			15		- (20 * xUSA)			,
			"Base.GP100_4_357",			20		- (20 * xUSA)			,
			"Base.Revolver_357",			25		- (20 * xUSA)			,
			"Base.GP100_6_357",			30		- (20 * xUSA)			,
			"Base.Revolver_Long_357",			35		- (20 * xUSA)			,
			"Base.K6S",			40		- (20 * xUSA)		- (20 * x90)	,
			"Base.Taurus856",			45		- (20 * xREST)		- (20 * x90)	,
			"Base.Rhino_200DS",			50		- (20 * xEUR)		- (20 * x90)	,
			"Base.Rhino_40DS",			55		- (20 * xEUR)		- (20 * x90)	,
			"Base.Rhino_60DS",			60		- (20 * xEUR)		- (20 * x90)	,
			"Base.GP100_2_357",			65		- (20 * xUSA)			,
			"Base.Revolver_Short_357",			70		- (20 * xUSA)			,
			"Base.GP100_4_357",			75		- (20 * xUSA)			,
			"Base.Revolver_357",			80		- (20 * xUSA)			,
			"Base.GP100_6_357",			85		- (20 * xUSA)			,
			"Base.Revolver_Long_357",			90		- (20 * xUSA)			,
			"Base.K6S",			95		- (20 * xUSA)		- (20 * x90)	,
			"Base.Taurus856",			100		- (20 * xREST)		- (20 * x90)	,
			"Base.Rhino_200DS",			105		- (20 * xEUR)		- (20 * x90)	,
			"Base.Rhino_40DS",			110		- (20 * xEUR)		- (20 * x90)	,
			"Base.Rhino_60DS",			115		- (20 * xEUR)		- (20 * x90)	,
		},									
	};										
	SuburbsDistributions["CCW_FannyPack_45_1"] = {				--	1250					
		rolls =	1	,							
		items = {									
			"Base.45Clip",			50					,
			"Base.Bullets45Box",			25					,
			"Base.45ExtClip",			25					,
			"Base.Bullets45",			50					,
			"Base.Bullets45",			40					,
			"Base.Bullets45",			30					,
			"Base.Bullets45",			20					,
											
			"Base.Pistol2",			10		- (20 * xUSA)			,
			"Base.Colt1911",			15		- (20 * xUSA)			,
			"Base.Colt_Commander",			20		- (20 * xUSA)			,
			"Base.AMT1911",			25		- (20 * xUSA)			,
			"Base.AMT1911_Long",			30		- (20 * xUSA)			,
			"Base.PULP_1911",			35		- (20 * xUSA)			,
			"Base.Colt_Kimber",			40		- (20 * xUSA)		- (20 * x90)	,
			"Base.Pistol2",			45		- (20 * xUSA)			,
			"Base.Colt1911",			50		- (20 * xUSA)			,
			"Base.Colt_Commander",			55		- (20 * xUSA)			,
			"Base.AMT1911",			60		- (20 * xUSA)			,
			"Base.AMT1911_Long",			65		- (20 * xUSA)			,
			"Base.PULP_1911",			70		- (20 * xUSA)			,
			"Base.Colt_Kimber",			75		- (20 * xUSA)		- (20 * x90)	,
			"Base.Pistol2",			80		- (20 * xUSA)			,
			"Base.Colt1911",			85		- (20 * xUSA)			,
			"Base.Colt_Commander",			90		- (20 * xUSA)			,
			"Base.AMT1911",			95		- (20 * xUSA)			,
			"Base.AMT1911_Long",			100		- (20 * xUSA)			,
			"Base.PULP_1911",			105		- (20 * xUSA)			,
			"Base.Colt_Kimber",			110		- (20 * xUSA)		- (20 * x90)	,
		},									
	};										
											
	SuburbsDistributions["CCW_FannyPack_45_2"] = {				--	1620					
		rolls =	1	,							
		items = {									
			"Base.45DSClip",			50					,
			"Base.Bullets45Box",			25					,
			"Base.45DSExtClip",			25					,
			"Base.Bullets45",			50					,
			"Base.Bullets45",			40					,
			"Base.Bullets45",			30					,
			"Base.Bullets45",			20					,
											
			"Base.P220",			10		- (20 * xEUR)			,
			"Base.G21",			15		- (20 * xEUR)			,
			"Base.M4506",			20		- (20 * xUSA)			,
			"Base.XD4",			25		- (20 * xUSA)		- (20 * x90)	,
			"Base.MP45",			30		- (20 * xUSA)		- (20 * x90)	,
			"Base.CZ97B",			35		- (20 * xCZE)		- (20 * x90)	,
			"Base.EAA_Witness_45",			40		- (20 * xEUR)			,
			"Base.EAA_Witness_Long_45",			45		- (20 * xEUR)			,
			"Base.PARA1911",			50		- (20 * xUSA)			,
			"Base.HK_MK23",			55		- (20 * xEUR)			,
			"Base.HK_USP",			60		- (20 * xEUR)			,
			"Base.HK_USP_Match",			65		- (20 * xEUR)			,
			"Base.P220",			70		- (20 * xEUR)			,
			"Base.G21",			75		- (20 * xEUR)			,
			"Base.M4506",			80		- (20 * xUSA)			,
			"Base.XD4",			85		- (20 * xUSA)		- (20 * x90)	,
			"Base.MP45",			90		- (20 * xUSA)		- (20 * x90)	,
			"Base.CZ97B",			95		- (20 * xCZE)		- (20 * x90)	,
			"Base.EAA_Witness_45",			100		- (20 * xEUR)			,
			"Base.EAA_Witness_Long_45",			105		- (20 * xEUR)			,
			"Base.PARA1911",			110		- (20 * xUSA)			,
			"Base.HK_MK23",			115		- (20 * xEUR)			,
			"Base.HK_USP",			120		- (20 * xEUR)			,
			"Base.HK_USP_Match",			125		- (20 * xEUR)			,
		},									
	};										

											
----------------------------------------------------------											
--		INSERTIONS			--						
----------------------------------------------------------											
											
----------------------------------------------------------											
--	ZOMBIE INVENTORY (CCW)				--						
----------------------------------------------------------											
table.insert(SuburbsDistributions["all"]["inventoryfemale"].items,				"Base.CCW_Purse_22"						);	
table.insert(SuburbsDistributions["all"]["inventoryfemale"].items,				CCW	- (CCW * xCCW)	- (CCW * x22)				);	
table.insert(SuburbsDistributions["all"]["inventoryfemale"].items,				"Base.CCW_Purse_380"						);	
table.insert(SuburbsDistributions["all"]["inventoryfemale"].items,				CCW	- (CCW * xCCW)	- (CCW * x380)				);	
table.insert(SuburbsDistributions["all"]["inventoryfemale"].items,				"Base.CCW_Purse_9"						);	
table.insert(SuburbsDistributions["all"]["inventoryfemale"].items,				CCW	- (CCW * xCCW)	- (CCW * x9)				);	
table.insert(SuburbsDistributions["all"]["inventoryfemale"].items,				"Base.CCW_Purse_357"						);	
table.insert(SuburbsDistributions["all"]["inventoryfemale"].items,				CCW	- (CCW * xCCW)	- (CCW * x357)				);	
table.insert(SuburbsDistributions["all"]["inventoryfemale"].items,				"Base.CCW_Purse_45_1"						);	
table.insert(SuburbsDistributions["all"]["inventoryfemale"].items,				CCW	- (CCW * xCCW)	- (CCW * x45)				);	
table.insert(SuburbsDistributions["all"]["inventoryfemale"].items,				"Base.CCW_Purse_45_2"						);	
table.insert(SuburbsDistributions["all"]["inventoryfemale"].items,				CCW	- (CCW * xCCW)	- (CCW * x45)				);	
											
table.insert(SuburbsDistributions["all"]["inventorymale"].items,				"Base.CCW_FannyPack_22"						);	
table.insert(SuburbsDistributions["all"]["inventorymale"].items,				CCW	- (CCW * xCCW)	- (CCW * x22)				);	
table.insert(SuburbsDistributions["all"]["inventorymale"].items,				"Base.CCW_FannyPack_380"						);	
table.insert(SuburbsDistributions["all"]["inventorymale"].items,				CCW	- (CCW * xCCW)	- (CCW * x380)				);	
table.insert(SuburbsDistributions["all"]["inventorymale"].items,				"Base.CCW_FannyPack_9"						);	
table.insert(SuburbsDistributions["all"]["inventorymale"].items,				CCW	- (CCW * xCCW)	- (CCW * x9)				);	
table.insert(SuburbsDistributions["all"]["inventorymale"].items,				"Base.CCW_FannyPack_357"						);	
table.insert(SuburbsDistributions["all"]["inventorymale"].items,				CCW	- (CCW * xCCW)	- (CCW * x357)				);	
table.insert(SuburbsDistributions["all"]["inventorymale"].items,				"Base.CCW_FannyPack_45_1"						);	
table.insert(SuburbsDistributions["all"]["inventorymale"].items,				CCW	- (CCW * xCCW)	- (CCW * x45)				);	
table.insert(SuburbsDistributions["all"]["inventorymale"].items,				"Base.CCW_FannyPack_45_2"						);	
table.insert(SuburbsDistributions["all"]["inventorymale"].items,				CCW	- (CCW * xCCW)	- (CCW * x45)				);	
											
											
											
if getActivatedMods():contains("HydroCraft") then											
	print("HydroCraft Detectedâ€¦ Setting Zombie Loot Rolls to 1")										
	setDistributionRolls( "all", "inventoryfemale", 1 )										
	setDistributionRolls( "all", "inventorymale", 1 )										
end											
											
											
											
--------------------------------------------------											
--		POLICE VEHICLE			--						
--------------------------------------------------											
table.insert(VehicleDistributions.Police["TruckBed"].items,					"Base.Bag_Police"					);	
table.insert(VehicleDistributions.Police["TruckBed"].items,					20	* VLR				);	
table.insert(VehicleDistributions.Police["TruckBed"].items,					"Base.Case_Police"					);	
table.insert(VehicleDistributions.Police["TruckBed"].items,					16	* VLR				);	
table.insert(VehicleDistributions.Police["TruckBed"].items,					"Base.Case_Small3"					);	-- 9mm
table.insert(VehicleDistributions.Police["TruckBed"].items,					6	* VLR	- (w9 * x9)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Police["TruckBed"].items,					"Base.Vest_BulletPolice"					);	
table.insert(VehicleDistributions.Police["TruckBed"].items,					4	* VLR				);	
table.insert(VehicleDistributions.Police["TruckBed"].items,					"Base.Shoes_ArmyBoots"					);	
table.insert(VehicleDistributions.Police["TruckBed"].items,					4	* VLR				);	
table.insert(VehicleDistributions.Police["TruckBed"].items,					"Base.Case_Small8"					);	
table.insert(VehicleDistributions.Police["TruckBed"].items,					10	* VLR				);	
table.insert(VehicleDistributions.Police["TruckBed"].items,					"Base.Extinguisher"					);	
table.insert(VehicleDistributions.Police["TruckBed"].items,					10	* VLR				);	
											
--------------------------------------------------											
--		FIRE VEHICLE			--						
--------------------------------------------------											
table.insert(VehicleDistributions.Fire["TruckBed"].items,					"Base.DingDong"					);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,						Blunt * 2	- (Blunt * xBlunt)			);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,					"Base.Jacket_Fireman"					);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,						4				);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,					"Base.Trousers_Fireman"					);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,						4				);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,					"Base.Hat_Fireman"					);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,						6				);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,					"Base.Glasses_SafetyGoggles"					);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,						8				);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,					"Base.Makita_Chainsaw"					);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,						PowerTool	/ 10		- (PowerTool * xPowerTool)	);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,					"Base.P21_Chainsaw"					);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,						PowerTool	/ 10		- (PowerTool * xPowerTool)	);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,					"Base.H460_Chainsaw"					);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,						PowerTool	/ 10		- (PowerTool * xPowerTool)	);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,					"Base.Case_Small8"					);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,						10				);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,					"Base.Extinguisher"					);	
table.insert(VehicleDistributions.Fire["TruckBed"].items,						20				);	
											
--------------------------------------------------											
--		FOSSOIL VEHICLE			--						
--------------------------------------------------											
table.insert(VehicleDistributions.Fossoil["TruckBed"].items,					"Base.Oil_Filter"					);	
table.insert(VehicleDistributions.Fossoil["TruckBed"].items,					10					);	
table.insert(VehicleDistributions.Fossoil["TruckBed"].items,					"Base.Oil_Filter"					);	
table.insert(VehicleDistributions.Fossoil["TruckBed"].items,					4					);	
											
											
--------------------------------------------------											
--		MCCOY LOGGING VEHICLE			--						
--------------------------------------------------											
table.insert(VehicleDistributions.McCoy["TruckBed"].items,					"Base.P21_Chainsaw"					);	
table.insert(VehicleDistributions.McCoy["TruckBed"].items,						PowerTool	/ 4		- (PowerTool * xPowerTool)	);	
table.insert(VehicleDistributions.McCoy["TruckBed"].items,					"Base.H460_Chainsaw"					);	
table.insert(VehicleDistributions.McCoy["TruckBed"].items,						PowerTool	/ 2		- (PowerTool * xPowerTool)	);	
											
--------------------------------------------------											
--		RANGER VEHICLE			--						
--------------------------------------------------											
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					"Base.Case_Large1"					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					2			- (Case * xCase)		);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					"Base.Case_Small4"					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					2		- (w357 * x357)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					"Base.Light_Large"					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					1					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					"Base.RamboKnife"					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,						LgKnife / 10	- (LgKnife * xLgKnife)			);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					"Base.Sling_2"					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					1					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					"Base.Scope_1-4x"					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					1					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					"Base.Scope_20x"					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					0.5					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					"Base.Makita_Chainsaw"					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,						PowerTool	/ 5		- (PowerTool * xPowerTool)	);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					"Base.P21_Chainsaw"					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,						PowerTool	/ 5		- (PowerTool * xPowerTool)	);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					"Base.H460_Chainsaw"					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,						PowerTool	/ 5		- (PowerTool * xPowerTool)	);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					"Base.Case_Small8"					);	-- FLARE
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					6					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					"Base.Case_Large8"					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					0.5		-(wBOW * xBOW)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					"Base.Case_Large9"					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					0.5		-(wBOW * xBOW)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					"Base.Extinguisher"					);	
table.insert(VehicleDistributions.Ranger["TruckBed"].items,					2					);	
											
--------------------------------------------------											
--		HUNTER VEHICLE			--						
--------------------------------------------------											
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Sako85"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					2		- (w223 * x223)	- (2 * xBOLT)		);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Savage12"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					2		- (w308 * x308)	- (2 * xBOLT)		);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.DT11"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					2		- (w12g * x12g)	- (2 * xBREAK)		);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Ruger_No1_4570"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					1		- (AmmoCan * x4570)	- (1 * xBREAK)		);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Thompson_Center_3006"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					1		- (w3006 * x3006)	- (1 * xBREAK)		);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.NEF_Handi_410"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					1		- (w45LC * x45LC)	- (1 * xBREAK)		);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.RamboKnife"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,						LgKnife / 10	- (LgKnife * xLgKnife)			);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Light_Large"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					1					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Choke_Full"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.5					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Carrier_12g"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.5					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Pad"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.5					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Scope_1-4x"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.5					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Scope_20x"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.5					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.PrimerSM_Pack"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.1			* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.PrimerLG_Pack"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.1			* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.PrimerSG_Pack"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.1			* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Lead9_Pack"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.1	 - (1 * x9)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Lead38_Pack"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.2	 - (1 * x357)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Lead44_Pack"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.2	 - (1 * x44)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Lead45_Pack"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.1	 - (1 * x45)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Lead50_Pack"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.2	 - (1 * xBMG)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Lead556_Pack"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.1	 - (1 * x556)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Lead545_Pack"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.1	 - (1 * x545x39)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Lead30_Pack"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.2			* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Lead00Buck_Pack"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.3	 - (1 * x12g)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.GunPowder"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.3			* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Cleaning"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.4					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.WD"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.4					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.SolventTrap_Adapter"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.4					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Lyman49th_Manual"					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					0.4			* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Case_Small8"					);	-- FLARE
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					2					);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Case_Large8"					);	-- BOW
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					1		-(wBOW * xBOW)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					"Base.Case_Large9"					);	-- BOW
table.insert(VehicleDistributions.Hunter["TruckBed"].items,					1		-(wBOW * xBOW)	- (Case * xCase)		);	
											
--------------------------------------------------											
--		SURVIVALIST VEHICLE		--							
--------------------------------------------------											
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.RamboKnife"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,						LgKnife / 2	- (LgKnife * xLgKnife)			);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Small1"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.2		- (w22 * x22)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Small2"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.2		- (w380 * x380)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Small3"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.5		- (w9 * x9)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Small4"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.4		- (w357 * x357)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Small5"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.3		- (w45 * x45)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Small6"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.4		- (w45 * x45)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Small7"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.2		- (w44 * x44)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Medium3"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.5		- (w45 * x45)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Medium5"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.5		- (w762x39 * x762x39)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Large1"					);	-- MIXED
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.5			- (Case * xCase)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Large3"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.5		- (w556 * x556)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Large4"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.5		- (w762x39 * x762x39)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Large5"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.1		- (w308 * x308)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Large8"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.1		-(wBOW * xBOW)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Large9"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.1		-(wBOW * xBOW)	- (Case * xCase)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Light_Large"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.5					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Light_Small"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.3					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Suppressor_Pistol"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.1	 - (1 * xSuppress)				);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Suppressor_Rifle"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.1	 - (1 * xSuppress)				);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.AmmoCan30_MIX"					);	-- MIXED
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					1			- (AmmoCan * xAmmoCan)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.AmmoCan30_MIX"					);	-- MIXED
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.5			- (AmmoCan * xAmmoCan)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					 "Base.AmmoCan50_MIX"					);	-- MIXED
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					1			- (AmmoCan * xAmmoCan)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					 "Base.AmmoCan50_MIX"					);	-- MIXED
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.5			- (AmmoCan * xAmmoCan)		);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.PrimerSM_Pack"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.1			* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.PrimerLG_Pack"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.1			* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.PrimerSG_Pack"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.1	 - (1 * x12g)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Lead9_Pack"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.1	 - (1 * x9)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Lead38_Pack"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.2	 - (1 * x357)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Lead44_Pack"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.2	 - (1 * x44)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Lead45_Pack"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.1	 - (1 * x45)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Lead50_Pack"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.2	 - (1 * xBMG)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Lead556_Pack"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.1	 - (1 * x556)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Lead545_Pack"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.1	 - (1 * x545x39)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Lead30_Pack"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.2			* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Lead00Buck_Pack"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.3	 - (1 * x12g)		* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.GunPowder"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.3			* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Cleaning"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.4					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.WD"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.4					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.SolventTrap_Adapter"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.4					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Lyman49th_Manual"					);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					0.4			* Reload	- (1 * xReload)	);	
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					"Base.Case_Small8"					);	-- FLARE
table.insert(VehicleDistributions.Survivalist["TruckBed"].items,					4					);	
											
--------------------------------------------------											
--		ALL GLOVEBOX (RARE)		--							
--------------------------------------------------											
table.insert(VehicleDistributions.GloveBox.items,					"Base.Case_Small1"					);	--22
table.insert(VehicleDistributions.GloveBox.items,					Case		- (w22 * x22)	- (Case * xCase)		);	
table.insert(VehicleDistributions.GloveBox.items,					"Base.Case_Small2"					);	--380
table.insert(VehicleDistributions.GloveBox.items,					Case		- (w380 * x380)	- (Case * xCase)		);	
table.insert(VehicleDistributions.GloveBox.items,					"Base.Case_Small3"					);	-- 9
table.insert(VehicleDistributions.GloveBox.items,					Case		- (w9 * x9)	- (Case * xCase)		);	
table.insert(VehicleDistributions.GloveBox.items,					"Base.Case_Small4"					);	--357
table.insert(VehicleDistributions.GloveBox.items,					Case		- (w357 * x357)	- (Case * xCase)		);	
table.insert(VehicleDistributions.GloveBox.items,					"Base.Case_Small5"					);	-- 45SS
table.insert(VehicleDistributions.GloveBox.items,					Case		- (w45 * x45)	- (Case * xCase)		);	
table.insert(VehicleDistributions.GloveBox.items,					"Base.Case_Small6"					);	-- 45DS
table.insert(VehicleDistributions.GloveBox.items,					Case		- (w45 * x45)	- (Case * xCase)		);	
table.insert(VehicleDistributions.GloveBox.items,					"Base.Case_Small7"					);	-- 44
table.insert(VehicleDistributions.GloveBox.items,					Case		- (w44 * x44)	- (Case * xCase)		);	
table.insert(VehicleDistributions.GloveBox.items,					"Base.RamboKnife"					);	
table.insert(VehicleDistributions.GloveBox.items,					Case		- (LgKnife * xLgKnife)			);	
table.insert(VehicleDistributions.GloveBox.items,					 "Base.Butterfly"					);	
table.insert(VehicleDistributions.GloveBox.items,					Case		- (SmKnife * xSmKnife)			);	
table.insert(VehicleDistributions.GloveBox.items,					"Base.PushDagger"					);	
table.insert(VehicleDistributions.GloveBox.items,					Case		- (SmKnife * xSmKnife)			);	
table.insert(VehicleDistributions.GloveBox.items,					"Base.Karambit"					);	
table.insert(VehicleDistributions.GloveBox.items,					Case		- (SmKnife * xSmKnife)			);	
											
--------------------------------------------------											
--		ALL TRUNK STANDARD (RARE)	--								
--------------------------------------------------											
table.insert(VehicleDistributions.TrunkStandard.items,					"Base.Case_Small2"					);	--380
table.insert(VehicleDistributions.TrunkStandard.items,					Case		- (w380 * x380)	- (Case * xCase)		);	
table.insert(VehicleDistributions.TrunkStandard.items,					"Base.Case_Small3"					);	--9
table.insert(VehicleDistributions.TrunkStandard.items,					Case		- (w9 * x9)	- (Case * xCase)		);	
table.insert(VehicleDistributions.TrunkStandard.items,					"Base.Case_Small4"					);	--357
table.insert(VehicleDistributions.TrunkStandard.items,					Case		- (w357 * x357)	- (Case * xCase)		);	
table.insert(VehicleDistributions.TrunkStandard.items,					"Base.Case_Small6"					);	--45DS
table.insert(VehicleDistributions.TrunkStandard.items,					Case		- (w45 * x45)	- (Case * xCase)		);	
											
--------------------------------------------------											
--		ALL TRUNK HEAVY	(RARE)		--						
--------------------------------------------------											
table.insert(VehicleDistributions.TrunkHeavy.items,					"Base.Case_Large1"					);	-- MIXED
table.insert(VehicleDistributions.TrunkHeavy.items,					Case			- (Case * xCase)		);	
table.insert(VehicleDistributions.TrunkHeavy.items,					"Base.Oil_Filter"					);	
table.insert(VehicleDistributions.TrunkHeavy.items,					0.1					);	
table.insert(VehicleDistributions.TrunkHeavy.items,					"Base.Case_Small8"					);	-- FLARE
table.insert(VehicleDistributions.TrunkHeavy.items,					0.01					);	
table.insert(VehicleDistributions.TrunkHeavy.items,					"Base.Extinguisher"					);	
table.insert(VehicleDistributions.TrunkHeavy.items,					0.02					);	
											
--------------------------------------------------											
--		ALL TRUNK SPORTS (RARE)		--							
--------------------------------------------------											
table.insert(VehicleDistributions.TrunkSports.items,					"Base.Case_Medium2"					);	
table.insert(VehicleDistributions.TrunkSports.items,					Case		- (w9 * x9)	- (Case * xCase)		);	
											
--------------------------------------------------											
--		SKILL BOOKS		--							
--------------------------------------------------											
table.insert(ProceduralDistributions.list["GunStoreMagazineRack"].items,					"Base.Lyman49th_Manual"					);	
table.insert(ProceduralDistributions.list["GunStoreMagazineRack"].items,					20			* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["BookstoreBooks"].items,					"Base.Lyman49th_Manual"					);	
table.insert(ProceduralDistributions.list["BookstoreBooks"].items,					0.5			* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["SurvivalGear"].items,					"Base.Lyman49th_Manual"					);	
table.insert(ProceduralDistributions.list["SurvivalGear"].items,					2			* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["Trapper"].items,					"Base.Lyman49th_Manual"					);	
table.insert(ProceduralDistributions.list["Trapper"].items,					2			* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["CrateBooks"].items,					"Base.Lyman49th_Manual"					);	
table.insert(ProceduralDistributions.list["CrateBooks"].items,					1			* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Lyman49th_Manual"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					1			* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["LivingRoomShelf"].items,					"Base.Lyman49th_Manual"					);	
table.insert(ProceduralDistributions.list["LivingRoomShelf"].items,					0.01			* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["LivingRoomShelfNoTapes"].items,					"Base.Lyman49th_Manual"					);	
table.insert(ProceduralDistributions.list["LivingRoomShelfNoTapes"].items,					0.01			* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["ShelfGeneric"].items,					"Base.Lyman49th_Manual"					);	
table.insert(ProceduralDistributions.list["ShelfGeneric"].items,					0.01			* Reload	- (1 * xReload)	);	
											
table.insert(ProceduralDistributions.list["GunStoreMagazineRack"].items,					"Base.Stoner_Book"					);	
table.insert(ProceduralDistributions.list["GunStoreMagazineRack"].items,					20					);	
table.insert(ProceduralDistributions.list["BookstoreBooks"].items,					"Base.Stoner_Book"					);	
table.insert(ProceduralDistributions.list["BookstoreBooks"].items,					0.5					);	
table.insert(ProceduralDistributions.list["SurvivalGear"].items,					"Base.Stoner_Book"					);	
table.insert(ProceduralDistributions.list["SurvivalGear"].items,					2					);	
table.insert(ProceduralDistributions.list["Trapper"].items,					"Base.Stoner_Book"					);	
table.insert(ProceduralDistributions.list["Trapper"].items,					2					);	
table.insert(ProceduralDistributions.list["CrateBooks"].items,					"Base.Stoner_Book"					);	
table.insert(ProceduralDistributions.list["CrateBooks"].items,					1					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Stoner_Book"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					1					);	
table.insert(ProceduralDistributions.list["LivingRoomShelf"].items,					"Base.Stoner_Book"					);	
table.insert(ProceduralDistributions.list["LivingRoomShelf"].items,					0.01					);	
table.insert(ProceduralDistributions.list["LivingRoomShelfNoTapes"].items,					"Base.Stoner_Book"					);	
table.insert(ProceduralDistributions.list["LivingRoomShelfNoTapes"].items,					0.01					);	
table.insert(ProceduralDistributions.list["ShelfGeneric"].items,					"Base.Stoner_Book"					);	
table.insert(ProceduralDistributions.list["ShelfGeneric"].items,					0.01					);	
											
table.insert(ProceduralDistributions.list["GunStoreMagazineRack"].items,					"Base.Kalashnikov_Book"					);	
table.insert(ProceduralDistributions.list["GunStoreMagazineRack"].items,					20					);	
table.insert(ProceduralDistributions.list["BookstoreBooks"].items,					"Base.Kalashnikov_Book"					);	
table.insert(ProceduralDistributions.list["BookstoreBooks"].items,					0.5					);	
table.insert(ProceduralDistributions.list["SurvivalGear"].items,					"Base.Kalashnikov_Book"					);	
table.insert(ProceduralDistributions.list["SurvivalGear"].items,					2					);	
table.insert(ProceduralDistributions.list["Trapper"].items,					"Base.Kalashnikov_Book"					);	
table.insert(ProceduralDistributions.list["Trapper"].items,					2					);	
table.insert(ProceduralDistributions.list["CrateBooks"].items,					"Base.Kalashnikov_Book"					);	
table.insert(ProceduralDistributions.list["CrateBooks"].items,					1					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Kalashnikov_Book"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					1					);	
table.insert(ProceduralDistributions.list["LivingRoomShelf"].items,					"Base.Kalashnikov_Book"					);	
table.insert(ProceduralDistributions.list["LivingRoomShelf"].items,					0.01					);	
table.insert(ProceduralDistributions.list["LivingRoomShelfNoTapes"].items,					"Base.Kalashnikov_Book"					);	
table.insert(ProceduralDistributions.list["LivingRoomShelfNoTapes"].items,					0.01					);	
table.insert(ProceduralDistributions.list["ShelfGeneric"].items,					"Base.Kalashnikov_Book"					);	
table.insert(ProceduralDistributions.list["ShelfGeneric"].items,					0.01					);	
											
table.insert(ProceduralDistributions.list["GunStoreMagazineRack"].items,					"Base.HecklerKoch_Book"					);	
table.insert(ProceduralDistributions.list["GunStoreMagazineRack"].items,					20					);	
table.insert(ProceduralDistributions.list["BookstoreBooks"].items,					"Base.HecklerKoch_Book"					);	
table.insert(ProceduralDistributions.list["BookstoreBooks"].items,					0.5					);	
table.insert(ProceduralDistributions.list["SurvivalGear"].items,					"Base.HecklerKoch_Book"					);	
table.insert(ProceduralDistributions.list["SurvivalGear"].items,					2					);	
table.insert(ProceduralDistributions.list["Trapper"].items,					"Base.HecklerKoch_Book"					);	
table.insert(ProceduralDistributions.list["Trapper"].items,					2					);	
table.insert(ProceduralDistributions.list["CrateBooks"].items,					"Base.HecklerKoch_Book"					);	
table.insert(ProceduralDistributions.list["CrateBooks"].items,					1					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.HecklerKoch_Book"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					1					);	
table.insert(ProceduralDistributions.list["LivingRoomShelf"].items,					"Base.HecklerKoch_Book"					);	
table.insert(ProceduralDistributions.list["LivingRoomShelf"].items,					0.01					);	
table.insert(ProceduralDistributions.list["LivingRoomShelfNoTapes"].items,					"Base.HecklerKoch_Book"					);	
table.insert(ProceduralDistributions.list["LivingRoomShelfNoTapes"].items,					0.01					);	
table.insert(ProceduralDistributions.list["ShelfGeneric"].items,					"Base.HecklerKoch_Book"					);	
table.insert(ProceduralDistributions.list["ShelfGeneric"].items,					0.01					);	
											
table.insert(ProceduralDistributions.list["GunStoreMagazineRack"].items,					"Base.FNHerstal_Book"					);	
table.insert(ProceduralDistributions.list["GunStoreMagazineRack"].items,					20					);	
table.insert(ProceduralDistributions.list["BookstoreBooks"].items,					"Base.FNHerstal_Book"					);	
table.insert(ProceduralDistributions.list["BookstoreBooks"].items,					0.5					);	
table.insert(ProceduralDistributions.list["SurvivalGear"].items,					"Base.FNHerstal_Book"					);	
table.insert(ProceduralDistributions.list["SurvivalGear"].items,					2					);	
table.insert(ProceduralDistributions.list["Trapper"].items,					"Base.FNHerstal_Book"					);	
table.insert(ProceduralDistributions.list["Trapper"].items,					2					);	
table.insert(ProceduralDistributions.list["CrateBooks"].items,					"Base.FNHerstal_Book"					);	
table.insert(ProceduralDistributions.list["CrateBooks"].items,					1					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.FNHerstal_Book"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					1					);	
table.insert(ProceduralDistributions.list["LivingRoomShelf"].items,					"Base.FNHerstal_Book"					);	
table.insert(ProceduralDistributions.list["LivingRoomShelf"].items,					0.01					);	
table.insert(ProceduralDistributions.list["LivingRoomShelfNoTapes"].items,					"Base.FNHerstal_Book"					);	
table.insert(ProceduralDistributions.list["LivingRoomShelfNoTapes"].items,					0.01					);	
table.insert(ProceduralDistributions.list["ShelfGeneric"].items,					"Base.FNHerstal_Book"					);	
table.insert(ProceduralDistributions.list["ShelfGeneric"].items,					0.01					);	
											
table.insert(ProceduralDistributions.list["CampingStoreBooks"].items,					"Base.BoyScout_Book"					);	
table.insert(ProceduralDistributions.list["CampingStoreBooks"].items,					20					);	
table.insert(ProceduralDistributions.list["BookstoreBooks"].items,					"Base.BoyScout_Book"					);	
table.insert(ProceduralDistributions.list["BookstoreBooks"].items,					0.5					);	
table.insert(ProceduralDistributions.list["SurvivalGear"].items,					"Base.BoyScout_Book"					);	
table.insert(ProceduralDistributions.list["SurvivalGear"].items,					4					);	
table.insert(ProceduralDistributions.list["Trapper"].items,					"Base.BoyScout_Book"					);	
table.insert(ProceduralDistributions.list["Trapper"].items,					4					);	
table.insert(ProceduralDistributions.list["CrateBooks"].items,					"Base.BoyScout_Book"					);	
table.insert(ProceduralDistributions.list["CrateBooks"].items,					1					);	
table.insert(ProceduralDistributions.list["LivingRoomShelf"].items,					"Base.BoyScout_Book"					);	
table.insert(ProceduralDistributions.list["LivingRoomShelf"].items,					0.01					);	
table.insert(ProceduralDistributions.list["LivingRoomShelfNoTapes"].items,					"Base.BoyScout_Book"					);	
table.insert(ProceduralDistributions.list["LivingRoomShelfNoTapes"].items,					0.01					);	
table.insert(ProceduralDistributions.list["ShelfGeneric"].items,					"Base.BoyScout_Book"					);	
table.insert(ProceduralDistributions.list["ShelfGeneric"].items,					0.01					);	
											
table.insert(ProceduralDistributions.list["BookstoreBooks"].items,					"Base.BeLikeWater_Book"					);	
table.insert(ProceduralDistributions.list["BookstoreBooks"].items,					1					);	
table.insert(ProceduralDistributions.list["LibraryBooks"].items,					"Base.BeLikeWater_Book"					);	
table.insert(ProceduralDistributions.list["LibraryBooks"].items,					1					);	
table.insert(ProceduralDistributions.list["CrateBooks"].items,					"Base.BeLikeWater_Book"					);	
table.insert(ProceduralDistributions.list["CrateBooks"].items,					1					);	
table.insert(ProceduralDistributions.list["LivingRoomShelf"].items,					"Base.BeLikeWater_Book"					);	
table.insert(ProceduralDistributions.list["LivingRoomShelf"].items,					0.02					);	
table.insert(ProceduralDistributions.list["LivingRoomShelfNoTapes"].items,					"Base.BeLikeWater_Book"					);	
table.insert(ProceduralDistributions.list["LivingRoomShelfNoTapes"].items,					0.02					);	
table.insert(ProceduralDistributions.list["ShelfGeneric"].items,					"Base.BeLikeWater_Book"					);	
table.insert(ProceduralDistributions.list["ShelfGeneric"].items,					0.02					);	
											
											
------------------------------------------------------------------											
--		PROCEDURAL LIST	(MELEE)				--				
------------------------------------------------------------------											
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.RussianMachete"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.BGMachete"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.RamboKnife"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.Butterfly"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						SmKnife	- (SmKnife * xSmKnife)			);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.PushDagger"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						SmKnife	- (SmKnife * xSmKnife)			);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.Karambit"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						SmKnife	- (SmKnife * xSmKnife)			);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.Tactical_Axe"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						Axe	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.Tactical_Sickle"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						Axe	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.Trench_Axe"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						Axe	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.Broad_Axe"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						Axe	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.DingDong"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						Blunt / 4	- (Blunt * xBlunt)			);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.MilitaryBaton"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						Blunt	- (Blunt * xBlunt)			);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.ASP"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						Blunt	- (Blunt * xBlunt)			);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.KillBill"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						0.001	- (Sword * xSword)			);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.CH_WarSword"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						0.001	- (Sword * xSword)			);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,					"Base.Conan_Sword"					);	
table.insert(ProceduralDistributions.list["MeleeWeapons"].items,						0.001	- (Sword * xSword)			);	
											
table.insert(ProceduralDistributions.list["PrisonGuardLockers"].items,					"Base.MilitaryBaton"					);	
table.insert(ProceduralDistributions.list["PrisonGuardLockers"].items,						Blunt	- (Blunt * xBlunt)			);	
table.insert(ProceduralDistributions.list["PrisonGuardLockers"].items,					"Base.ASP"					);	
table.insert(ProceduralDistributions.list["PrisonGuardLockers"].items,						Blunt * 2	- (Blunt * xBlunt)			);	
											
table.insert(ProceduralDistributions.list["PoliceLockers"].items,					"Base.ASP"					);	
table.insert(ProceduralDistributions.list["PoliceLockers"].items,						Blunt * 2	- (Blunt * xBlunt)			);	
table.insert(ProceduralDistributions.list["PoliceLockers"].items,					"Base.Bag_Police"					);	
table.insert(ProceduralDistributions.list["PoliceLockers"].items,						20				);	
											
table.insert(ProceduralDistributions.list["HuntingLockers"].items,					"Base.RamboKnife"					);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,					"Base.RussianMachete"					);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,					"Base.BGMachete"					);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,					"Base.Tactical_Axe"					);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,						Axe	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,					"Base.Cleaning"					);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,						1				);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,					"Base.WD"					);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,						1				);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,					"Base.SolventTrap_Adapter"					);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,						1				);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,					"Base.Case_Large8"					);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,						1	-(wBOW * xBOW)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,					"Base.Case_Large9"					);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,						1	-(wBOW * xBOW)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,					"Base.Case_Large1"					);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,						1		- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,					"Base.Case_Heavy4"					);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,						0.5	-(wBMG * xBMG)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,					"Base.Lyman49th_Manual"					);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,						1		* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,					"Base.BoyScout_Book"					);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,						1				);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,					"Base.Crafted_Torch_OFF"					);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,						1				);	
table.insert(ProceduralDistributions.list["HuntingLockers"].items,					"Base.Case_Small8"					);	-- FLARE
table.insert(ProceduralDistributions.list["HuntingLockers"].items,						1				);	
											
table.insert(ProceduralDistributions.list["SecurityLockers"].items,					"Base.ASP"					);	
table.insert(ProceduralDistributions.list["SecurityLockers"].items,						Blunt * 2	- (Blunt * xBlunt)			);	
											
table.insert(ProceduralDistributions.list["DrugShackWeapons"].items,					"Base.RussianMachete"					);	
table.insert(ProceduralDistributions.list["DrugShackWeapons"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["DrugShackWeapons"].items,					"Base.BGMachete"					);	
table.insert(ProceduralDistributions.list["DrugShackWeapons"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["DrugShackWeapons"].items,					"Base.RamboKnife"					);	
table.insert(ProceduralDistributions.list["DrugShackWeapons"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["DrugShackWeapons"].items,					"Base.Butterfly"					);	
table.insert(ProceduralDistributions.list["DrugShackWeapons"].items,						SmKnife	- (SmKnife * xSmKnife)			);	
table.insert(ProceduralDistributions.list["DrugShackWeapons"].items,					"Base.PushDagger"					);	
table.insert(ProceduralDistributions.list["DrugShackWeapons"].items,						SmKnife	- (SmKnife * xSmKnife)			);	
table.insert(ProceduralDistributions.list["DrugShackWeapons"].items,					"Base.Karambit"					);	
table.insert(ProceduralDistributions.list["DrugShackWeapons"].items,						SmKnife	- (SmKnife * xSmKnife)			);	
table.insert(ProceduralDistributions.list["DrugShackWeapons"].items,					"Base.Tactical_Axe"					);	
table.insert(ProceduralDistributions.list["DrugShackWeapons"].items,						Axe	- (Axe * xAxe)			);	
											
table.insert(ProceduralDistributions.list["DrugShackTools"].items,					"Base.DingDong"					);	
table.insert(ProceduralDistributions.list["DrugShackTools"].items,						Blunt / 4	- (Blunt * xBlunt)			);	
table.insert(ProceduralDistributions.list["DrugShackTools"].items,					"Base.M2A1_Can"					);	
table.insert(ProceduralDistributions.list["DrugShackTools"].items,						wBB	- (wBB * xBB)			);	
											
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,					"Base.RussianMachete"					);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,					"Base.BGMachete"					);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,					"Base.RamboKnife"					);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,					"Base.Butterfly"					);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,						SmKnife	- (SmKnife * xSmKnife)			);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,					"Base.PushDagger"					);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,						SmKnife	- (SmKnife * xSmKnife)			);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,					"Base.Karambit"					);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,						SmKnife	- (SmKnife * xSmKnife)			);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,					"Base.Trench_Axe"					);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,						Axe	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,					"Base.Broad_Axe"					);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,						Axe	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,					"Base.KillBill"					);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,						0.001	- (Sword * xSword)			);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,					"Base.CH_WarSword"					);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,						0.001	- (Sword * xSword)			);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,					"Base.Conan_Sword"					);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,						0.001	- (Sword * xSword)			);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,					"Base.Val_Spear"					);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,						0.001	- (Spear * xSpear)			);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,					"Base.Spartan_Spear"					);	
table.insert(ProceduralDistributions.list["PawnShopKnives"].items,						0.001	- (Spear * xSpear)			);	
											
table.insert(ProceduralDistributions.list["GarageCarpentry"].items,					"Base.Tactical_Axe"					);	
table.insert(ProceduralDistributions.list["GarageCarpentry"].items,						1	- (Axe * xAxe)			);	
											
table.insert(ProceduralDistributions.list["GardenStoreTools"].items,					"Base.Tactical_Axe"					);	
table.insert(ProceduralDistributions.list["GardenStoreTools"].items,						1	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["GardenStoreTools"].items,					"Base.Tactical_Sickle"					);	
table.insert(ProceduralDistributions.list["GardenStoreTools"].items,						1	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["GardenStoreTools"].items,					"Base.Makita_Chainsaw"					);	
table.insert(ProceduralDistributions.list["GardenStoreTools"].items,						PowerTool	/ 5		- (PowerTool * xPowerTool)	);	
table.insert(ProceduralDistributions.list["GardenStoreTools"].items,					"Base.P21_Chainsaw"					);	
table.insert(ProceduralDistributions.list["GardenStoreTools"].items,						PowerTool	/ 5		- (PowerTool * xPowerTool)	);	
table.insert(ProceduralDistributions.list["GardenStoreTools"].items,					"Base.H460_Chainsaw"					);	
table.insert(ProceduralDistributions.list["GardenStoreTools"].items,						PowerTool	/ 5		- (PowerTool * xPowerTool)	);	
											
table.insert(ProceduralDistributions.list["GigamartFarming"].items,					"Base.RussianMachete"					);	
table.insert(ProceduralDistributions.list["GigamartFarming"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["GigamartFarming"].items,					"Base.BGMachete"					);	
table.insert(ProceduralDistributions.list["GigamartFarming"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["GigamartFarming"].items,					"Base.Tactical_Sickle"					);	
table.insert(ProceduralDistributions.list["GigamartFarming"].items,						Axe	- (Axe * xAxe)			);	
											
table.insert(ProceduralDistributions.list["GigamartTools"].items,					"Base.Tactical_Axe"					);	
table.insert(ProceduralDistributions.list["GigamartTools"].items,						Axe	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["GigamartTools"].items,					"Base.DingDong"					);	
table.insert(ProceduralDistributions.list["GigamartTools"].items,						Blunt / 4	- (Blunt * xBlunt)			);	
table.insert(ProceduralDistributions.list["GigamartTools"].items,					"Base.Makita_Chainsaw"					);	
table.insert(ProceduralDistributions.list["GigamartTools"].items,						PowerTool	/ 3		- (PowerTool * xPowerTool)	);	
table.insert(ProceduralDistributions.list["GigamartTools"].items,					"Base.P21_Chainsaw"					);	
table.insert(ProceduralDistributions.list["GigamartTools"].items,						PowerTool	/ 4		- (PowerTool * xPowerTool)	);	
table.insert(ProceduralDistributions.list["GigamartTools"].items,					"Base.H460_Chainsaw"					);	
table.insert(ProceduralDistributions.list["GigamartTools"].items,						PowerTool	/ 5		- (PowerTool * xPowerTool)	);	
table.insert(ProceduralDistributions.list["GigamartTools"].items,					"Base.FirePlace_Poker"					);	
table.insert(ProceduralDistributions.list["GigamartTools"].items,						Axe	- (Axe * xAxe)			);	
											
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,					"Base.RussianMachete"					);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,					"Base.BGMachete"					);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,					"Base.RamboKnife"					);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,						LgKnife	- (LgKnife * xLgKnife)			);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,					"Base.Tactical_Axe"					);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,						Axe	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,					"Base.Tactical_Sickle"					);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,						Axe	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,					"Base.DingDong"					);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,						Blunt / 4	- (Blunt * xBlunt)			);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,					"Base.Makita_Chainsaw"					);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,						PowerTool	- (PowerTool * xPowerTool)			);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,					"Base.P21_Chainsaw"					);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,						PowerTool	- (PowerTool * xPowerTool)			);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,					"Base.H460_Chainsaw"					);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,						PowerTool	- (PowerTool * xPowerTool)			);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,					"Base.FirePlace_Poker"					);	
table.insert(ProceduralDistributions.list["ToolStoreTools"].items,						Axe	- (Axe * xAxe)			);	
											
table.insert(ProceduralDistributions.list["ToolStoreFarming"].items,					"Base.Tactical_Axe"					);	
table.insert(ProceduralDistributions.list["ToolStoreFarming"].items,						Axe	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["ToolStoreFarming"].items,					"Base.Tactical_Sickle"					);	
table.insert(ProceduralDistributions.list["ToolStoreFarming"].items,						Axe	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["ToolStoreFarming"].items,					"Base.Makita_Chainsaw"					);	
table.insert(ProceduralDistributions.list["ToolStoreFarming"].items,						PowerTool	- (PowerTool * xPowerTool)			);	
table.insert(ProceduralDistributions.list["ToolStoreFarming"].items,					"Base.P21_Chainsaw"					);	
table.insert(ProceduralDistributions.list["ToolStoreFarming"].items,						PowerTool	- (PowerTool * xPowerTool)			);	
table.insert(ProceduralDistributions.list["ToolStoreFarming"].items,					"Base.H460_Chainsaw"					);	
table.insert(ProceduralDistributions.list["ToolStoreFarming"].items,						PowerTool	- (PowerTool * xPowerTool)			);	
											
table.insert(ProceduralDistributions.list["ForestFireTools"].items,					"Base.Makita_Chainsaw"					);	
table.insert(ProceduralDistributions.list["ForestFireTools"].items,						PowerTool		- (PowerTool * xPowerTool)		);	
table.insert(ProceduralDistributions.list["ForestFireTools"].items,					"Base.P21_Chainsaw"					);	
table.insert(ProceduralDistributions.list["ForestFireTools"].items,						PowerTool		- (PowerTool * xPowerTool)		);	
table.insert(ProceduralDistributions.list["ForestFireTools"].items,					"Base.H460_Chainsaw"					);	
table.insert(ProceduralDistributions.list["ForestFireTools"].items,						PowerTool	* 3	- (PowerTool * xPowerTool)		);	
table.insert(ProceduralDistributions.list["ForestFireTools"].items,					"Base.M2A1_Can"					);	
table.insert(ProceduralDistributions.list["ForestFireTools"].items,						wFLAME	- (wFLAME * xFLAME)			);	
table.insert(ProceduralDistributions.list["ForestFireTools"].items,					"Base.Trench_Axe"					);	
table.insert(ProceduralDistributions.list["ForestFireTools"].items,						0.001	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["ForestFireTools"].items,					"Base.Broad_Axe"					);	
table.insert(ProceduralDistributions.list["ForestFireTools"].items,						0.001	- (Axe * xAxe)			);	
											
table.insert(ProceduralDistributions.list["LoggingFactoryTools"].items,					"Base.Makita_Chainsaw"					);	
table.insert(ProceduralDistributions.list["LoggingFactoryTools"].items,						PowerTool	- (PowerTool * xPowerTool)			);	
table.insert(ProceduralDistributions.list["LoggingFactoryTools"].items,					"Base.P21_Chainsaw"					);	
table.insert(ProceduralDistributions.list["LoggingFactoryTools"].items,						PowerTool	- (PowerTool * xPowerTool)			);	
table.insert(ProceduralDistributions.list["LoggingFactoryTools"].items,					"Base.H460_Chainsaw"					);	
table.insert(ProceduralDistributions.list["LoggingFactoryTools"].items,						PowerTool	- (PowerTool * xPowerTool)			);	
table.insert(ProceduralDistributions.list["LoggingFactoryTools"].items,					"Base.M2A1_Can"					);	
table.insert(ProceduralDistributions.list["LoggingFactoryTools"].items,						wFLAME	- (wFLAME * xFLAME)			);	
table.insert(ProceduralDistributions.list["LoggingFactoryTools"].items,					"Base.Trench_Axe"					);	
table.insert(ProceduralDistributions.list["LoggingFactoryTools"].items,						0.001	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["LoggingFactoryTools"].items,					"Base.Broad_Axe"					);	
table.insert(ProceduralDistributions.list["LoggingFactoryTools"].items,						0.001	- (Axe * xAxe)			);	
											
table.insert(ProceduralDistributions.list["GarageTools"].items,					"Base.Makita_Chainsaw"					);	
table.insert(ProceduralDistributions.list["GarageTools"].items,						PowerTool	/ 10		- (PowerTool * xPowerTool)	);	
table.insert(ProceduralDistributions.list["GarageTools"].items,					"Base.P21_Chainsaw"					);	
table.insert(ProceduralDistributions.list["GarageTools"].items,						PowerTool	/ 10		- (PowerTool * xPowerTool)	);	
table.insert(ProceduralDistributions.list["GarageTools"].items,					"Base.H460_Chainsaw"					);	
table.insert(ProceduralDistributions.list["GarageTools"].items,						PowerTool	/ 10		- (PowerTool * xPowerTool)	);	
table.insert(ProceduralDistributions.list["GarageTools"].items,					"Base.M2A1_Can"					);	
table.insert(ProceduralDistributions.list["GarageTools"].items,						wBB	- (wBB * xBB)			);	
											
table.insert(ProceduralDistributions.list["SushiKitchenCutlery"].items,					"Base.KillBill"					);	
table.insert(ProceduralDistributions.list["SushiKitchenCutlery"].items,						0.001	- (Sword * xSword)			);	
											
table.insert(ProceduralDistributions.list["ChineseKitchenCutlery"].items,					"Base.CH_WarSword"					);	
table.insert(ProceduralDistributions.list["ChineseKitchenCutlery"].items,						0.001	- (Sword * xSword)			);	
											
table.insert(ProceduralDistributions.list["Antiques"].items,					"Base.Conan_Sword"					);	
table.insert(ProceduralDistributions.list["Antiques"].items,						0.001	- (Sword * xSword)			);	
table.insert(ProceduralDistributions.list["Antiques"].items,					"Base.Trench_Axe"					);	
table.insert(ProceduralDistributions.list["Antiques"].items,						0.001	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["Antiques"].items,					"Base.Broad_Axe"					);	
table.insert(ProceduralDistributions.list["Antiques"].items,						0.001	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["Antiques"].items,					"Base.Val_Spear"					);	
table.insert(ProceduralDistributions.list["Antiques"].items,						0.001	- (Spear * xSpear)			);	
table.insert(ProceduralDistributions.list["Antiques"].items,					"Base.Spartan_Spear"					);	
table.insert(ProceduralDistributions.list["Antiques"].items,						0.001	- (Spear * xSpear)			);	
											
table.insert(ProceduralDistributions.list["GrillAcessories"].items,					"Base.FirePlace_Poker"					);	
table.insert(ProceduralDistributions.list["GrillAcessories"].items,						Axe	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["GrillAcessories"].items,					"Base.M2A1_Can"					);	
table.insert(ProceduralDistributions.list["GrillAcessories"].items,						wBB	- (wBB * xBB)			);	
											
table.insert(ProceduralDistributions.list["FireStorageTools"].items,					"Base.FirePlace_Poker"					);	
table.insert(ProceduralDistributions.list["FireStorageTools"].items,						Axe	- (Axe * xAxe)			);	
table.insert(ProceduralDistributions.list["FireStorageTools"].items,					"Base.DingDong"					);	
table.insert(ProceduralDistributions.list["FireStorageTools"].items,						Blunt * 3	- (Blunt * xBlunt)			);	
table.insert(ProceduralDistributions.list["FireStorageTools"].items,					"Base.Makita_Chainsaw"					);	
table.insert(ProceduralDistributions.list["FireStorageTools"].items,						PowerTool		- (PowerTool * xPowerTool)		);	
table.insert(ProceduralDistributions.list["FireStorageTools"].items,					"Base.P21_Chainsaw"					);	
table.insert(ProceduralDistributions.list["FireStorageTools"].items,						PowerTool		- (PowerTool * xPowerTool)		);	
table.insert(ProceduralDistributions.list["FireStorageTools"].items,					"Base.H460_Chainsaw"					);	
table.insert(ProceduralDistributions.list["FireStorageTools"].items,						PowerTool	* 3	- (PowerTool * xPowerTool)		);	
											
table.insert(ProceduralDistributions.list["CampingStoreGear"].items,					"Base.Crafted_Torch_OFF"					);	
table.insert(ProceduralDistributions.list["CampingStoreGear"].items,						4				);	
table.insert(ProceduralDistributions.list["CampingStoreGear"].items,					"Base.M2A1_Can"					);	
table.insert(ProceduralDistributions.list["CampingStoreGear"].items,						wBB	- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["Homesteading"].items,					"Base.Crafted_Torch_OFF"					);	
table.insert(ProceduralDistributions.list["Homesteading"].items,						4				);	
table.insert(ProceduralDistributions.list["Hiker"].items,					"Base.Crafted_Torch_OFF"					);	
table.insert(ProceduralDistributions.list["Hiker"].items,						2				);	
table.insert(ProceduralDistributions.list["ImprovisedCrafts"].items,					"Base.Crafted_Torch_OFF"					);	
table.insert(ProceduralDistributions.list["ImprovisedCrafts"].items,						1				);	
											
------------------------------------------------------------------											
--		PROCEDURAL LIST	(OIL FILTER, WD, CLEANING)			--					
------------------------------------------------------------------											
table.insert(ProceduralDistributions.list["StoreShelfMechanics"].items,					"Base.Oil_Filter"					);	
table.insert(ProceduralDistributions.list["StoreShelfMechanics"].items,					8					);	
table.insert(ProceduralDistributions.list["StoreShelfMechanics"].items,					"Base.WD"					);	
table.insert(ProceduralDistributions.list["StoreShelfMechanics"].items,					8					);	
table.insert(ProceduralDistributions.list["StoreShelfMechanics"].items,					"Base.SolventTrap_Adapter"					);	
table.insert(ProceduralDistributions.list["StoreShelfMechanics"].items,					0.01					);	
											
table.insert(ProceduralDistributions.list["MechanicShelfTools"].items,					"Base.Oil_Filter"					);	
table.insert(ProceduralDistributions.list["MechanicShelfTools"].items,					8					);	
table.insert(ProceduralDistributions.list["MechanicShelfTools"].items,					"Base.WD"					);	
table.insert(ProceduralDistributions.list["MechanicShelfTools"].items,					8					);	
table.insert(ProceduralDistributions.list["MechanicShelfTools"].items,					"Base.SolventTrap_Adapter"					);	
table.insert(ProceduralDistributions.list["MechanicShelfTools"].items,					0.01					);	
											
table.insert(ProceduralDistributions.list["CrateMechanics"].items,					"Base.Oil_Filter"					);	
table.insert(ProceduralDistributions.list["CrateMechanics"].items,					8					);	
table.insert(ProceduralDistributions.list["CrateMechanics"].items,					"Base.WD"					);	
table.insert(ProceduralDistributions.list["CrateMechanics"].items,					8					);	
table.insert(ProceduralDistributions.list["CrateMechanics"].items,					"Base.SolventTrap_Adapter"					);	
table.insert(ProceduralDistributions.list["CrateMechanics"].items,					0.01					);	
											
-- table.insert(ProceduralDistributions.list["GarageMechanic"].items,					"Base.Oil_Filter"					);	
-- table.insert(ProceduralDistributions.list["GarageMechanic"].items,					8					);	
-- table.insert(ProceduralDistributions.list["GarageMechanic"].items,					"Base.WD"					);	
-- table.insert(ProceduralDistributions.list["GarageMechanic"].items,					8					);	
											
table.insert(ProceduralDistributions.list["GarageTools"].items,					"Base.Oil_Filter"					);	
table.insert(ProceduralDistributions.list["GarageTools"].items,					8					);	
table.insert(ProceduralDistributions.list["GarageTools"].items,					"Base.WD"					);	
table.insert(ProceduralDistributions.list["GarageTools"].items,					8					);	
table.insert(ProceduralDistributions.list["GarageTools"].items,					"Base.SolventTrap_Adapter"					);	
table.insert(ProceduralDistributions.list["GarageTools"].items,					0.01					);	
											
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.PrimerSM_Pack"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.1			* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.PrimerLG_Pack"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.1			* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.PrimerSG_Pack"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.1		- (1 * x12g)	* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Lead9_Pack"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.1		- (1 * x9)	* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Lead38_Pack"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.2		- (1 * x357)	* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Lead44_Pack"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.2		- (1 * x44)	* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Lead45_Pack"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.1		- (1 * x45)	* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Lead50_Pack"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.2		- (1 * xBMG)	* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Lead556_Pack"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.1		- (1 * x556)	* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Lead545_Pack"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.1		- (1 * x545x39)	* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Lead30_Pack"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.2			* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Lead00Buck_Pack"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.3		- (1 * x12g)	* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.GunPowder"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.3			* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Lyman_TMag"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.01			* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Lee_LoadMaster"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.01			* Reload	- (1 * xReload)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.TriggerGroup_AR"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.001	- (0.001 * xPart)				);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.TriggerGroup_AK"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.001	- (0.001 * xPart)				);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.TriggerGroup_HK"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.001	- (0.001 * xPart)				);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.TriggerGroup_FN"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.001	- (0.001 * xPart)				);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Switch_Striker_Black"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.001	- (0.001 * xPart)			- (0.001 * x90)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Switch_Striker_Red"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.001	- (0.001 * xPart)			- (0.001 * x90)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Switch_Striker_Blue"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.001	- (0.001 * xPart)			- (0.001 * x90)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Switch_Striker_Green"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					0.001	- (0.001 * xPart)			- (0.001 * x90)	);	
											
table.insert(ProceduralDistributions.list["CrateTools"].items,					"Base.Cleaning"					);	
table.insert(ProceduralDistributions.list["CrateTools"].items,					5					);	
table.insert(ProceduralDistributions.list["CrateTools"].items,					"Base.Oil_Filter"					);	
table.insert(ProceduralDistributions.list["CrateTools"].items,					5					);	
table.insert(ProceduralDistributions.list["CrateTools"].items,					"Base.WD"					);	
table.insert(ProceduralDistributions.list["CrateTools"].items,					5					);	
											
table.insert(ProceduralDistributions.list["CratePetSupplies"].items,					"Base.DogChain"					);	
table.insert(ProceduralDistributions.list["CratePetSupplies"].items,					5					);	
table.insert(ProceduralDistributions.list["PetShopShelf"].items,					"Base.DogChain"					);	
table.insert(ProceduralDistributions.list["PetShopShelf"].items,					5					);	
table.insert(ProceduralDistributions.list["CrateRandomJunk"].items,					"Base.DogChain"					);	
table.insert(ProceduralDistributions.list["CrateRandomJunk"].items,					2					);	
table.insert(ProceduralDistributions.list["KitchenRandom"].items,					"Base.DogChain"					);	
table.insert(ProceduralDistributions.list["KitchenRandom"].items,					2					);	
											
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					"Base.M1014_Wick"					);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					w12g	- (w12g * xSEMI)	- (w12g * x12g)	- (w12g * xEUR)	- (w12g * x90)	);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					"Base.AKM_Gold"					);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					w762x39	- (w762x39 * xAUTO)	- (w762x39 * x762x39)	- (w762x39 * xSOV)		);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					"Base.AKM_Custom"					);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					w762x39	- (w762x39 * xAUTO)	- (w762x39 * x762x39)	- (w762x39 * xSOV)	- (w762x39 * x90)	);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					"Base.AK74_Custom"					);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					w545x39	- (w545x39 * xAUTO)	- (w545x39 * x545x39)	- (w545x39 * xSOV)	- (w545x39 * x90)	);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					"Base.AK74_Alpha"					);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					w545x39	- (w545x39 * xAUTO)	- (w545x39 * x545x39)	- (w545x39 * xSOV)	- (w545x39 * x90)	);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					"Base.G34"					);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					w9	- (w9 * xSEMI)	- (w9 * x9)	- (w9 * xUSA)	- (w9 * x90)	);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					"Base.SKS30_A26"					);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					w762x39	- (w762x39 * xSEMI)	- (w762x39 * x762x39)	- (w762x39 * xUSA)		);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					"Base.Marlin_M70_A26"					);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					w22	- (w22 * xSEMI)	- (w22 * x22)	- (w22 * xUSA)		);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					"Base.PULP_1911"					);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					w45	- (w45 * xSEMI)	- (w45 * x45)	- (w45 * xUSA)		);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					"Base.Colt_Kimber"					);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					w45	- (w45 * xSEMI)	- (w45 * x45)	- (w45 * xUSA)	- (w45 * x90)	);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					"Base.Triple_Crown"					);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					w12g	- (w12g * xBREAK)	- (w12g * x12g)	- (w12g * xEUR)		);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					"Base.Saiga12_Tromix"					);	
table.insert(ProceduralDistributions.list["PawnShopGunsSpecial"].items,					w12g	- (w12g * xAUTO)	- (w12g * x12g)	- (w12g * xSOV)	- (w12g * x90)	);	
											
table.insert(ProceduralDistributions.list["DrugLabGuns"].items,					"Base.AKM_Gold"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].items,					w762x39	- (w762x39 * xAUTO)	- (w762x39 * x762x39)	- (w762x39 * xSOV)		);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].items,					"Base.PULP_1911"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].items,					w45	- (w45 * xSEMI)	- (w45 * x45)	- (w45 * xUSA)		);	
											
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					"Base.TriggerGroup_AR"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					Part	- (Part * xPart)				);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					"Base.TriggerGroup_AK"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					Part	- (Part * xPart)				);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					"Base.TriggerGroup_HK"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					Part	- (Part * xPart)				);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					"Base.TriggerGroup_FN"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					Part	- (Part * xPart)				);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					"Base.Switch_Striker_Black"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					Part	- (Part * xPart)			- (Part * x90)	);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					"Base.Switch_Striker_Red"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					Part	- (Part * xPart)			- (Part * x90)	);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					"Base.Switch_Striker_Blue"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					Part	- (Part * xPart)			- (Part * x90)	);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					"Base.Switch_Striker_Green"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					Part	- (Part * xPart)			- (Part * x90)	);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					"Base.Suppressor_Pistol"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					Suppress	- (Suppress * xSuppress)				);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					"Base.Suppressor_Rifle"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					Suppress	- (Suppress * xSuppress)				);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					"Base.Suppressor_Socom_Pistol"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					Suppress	- (Suppress * xSuppress)				);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					"Base.Suppressor_PBS1_Rifle"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					Suppress	- (Suppress * xSuppress)				);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					"Base.Suppressor_PBS4_Rifle"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					Suppress	- (Suppress * xSuppress)				);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					"Base.SolventTrap_Adapter"					);	
table.insert(ProceduralDistributions.list["DrugLabGuns"].junk.items,					Part	- (Part * xPart)				);	
											
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					"Base.TriggerGroup_AR"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					Part	- (Part * xPart)				);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					"Base.TriggerGroup_AK"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					Part	- (Part * xPart)				);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					"Base.TriggerGroup_HK"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					Part	- (Part * xPart)				);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					"Base.TriggerGroup_FN"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					Part	- (Part * xPart)				);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					"Base.Switch_Striker_Black"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					Part	- (Part * xPart)			- (Part * x90)	);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					"Base.Switch_Striker_Red"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					Part	- (Part * xPart)			- (Part * x90)	);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					"Base.Switch_Striker_Blue"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					Part	- (Part * xPart)			- (Part * x90)	);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					"Base.Switch_Striker_Green"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					Part	- (Part * xPart)			- (Part * x90)	);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					"Base.Suppressor_Pistol"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					Suppress	- (Suppress * xSuppress)				);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					"Base.Suppressor_Socom_Pistol"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					Suppress	- (Suppress * xSuppress)				);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					"Base.SolventTrap_Adapter"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].junk.items,					Part	- (Part * xPart)				);	
											
------------------------------------------------------------------											
--		PROCEDURAL LIST	(TOYS)				--				
------------------------------------------------------------------											
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.VM_68"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					0.4		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.Auto_Cocker"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					0.3		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.Tippmann_SL68"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					0.5		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.Sheridan_PGP"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					0.4		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.PB68Bag"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					2		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.Standard_PB_Hopper"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					0.1		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.Large_PB_Hopper"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					0.1		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.UmarexSS"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					0.5		- (wBB * xBB)		- (wBB * CIVx * x90)	);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.CO2_Cartridge_Box"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					2		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.Benjamin_M397"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					0.5		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.RWS_M34"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					0.5		- (wBB * xBB)		- (wBB * CIVx * x90)	);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.SS2000"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					0.5		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.BB177Box"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					2		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.SlingShot_Marble"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					0.5		- (wBOW * xBOW)			);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.WristRocket_Marble"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					0.5		- (wBOW * xBOW)			);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					"Base.Jar_Marbles"					);	
table.insert(ProceduralDistributions.list["GigamartToys"].items,					2		- (wBOW * xBOW)			);	
											
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.VM_68"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					0.4		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.Auto_Cocker"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					0.3		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.Tippmann_SL68"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					0.5		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.Sheridan_PGP"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					0.4		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.PB68Bag"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					2		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.Standard_PB_Hopper"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					0.1		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.Large_PB_Hopper"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					0.1		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.UmarexSS"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					0.5		- (wBB * xBB)		- (wBB * CIVx * x90)	);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.CO2_Cartridge_Box"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					2		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.Benjamin_M397"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					0.5		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.RWS_M34"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					0.5		- (wBB * xBB)		- (wBB * CIVx * x90)	);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.SS2000"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					0.5		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.BB177Box"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					2		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.SlingShot_Marble"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					0.5		- (wBOW * xBOW)			);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.WristRocket_Marble"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					0.5		- (wBOW * xBOW)			);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					"Base.Jar_Marbles"					);	
table.insert(ProceduralDistributions.list["CrateToys"].items,					2		- (wBOW * xBOW)			);	
											
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.VM_68"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.001		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.Auto_Cocker"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.001		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.Tippmann_SL68"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.001		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.Sheridan_PGP"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.001		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.PB68"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.5		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.PB68Bag"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.005		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.Standard_PB_Hopper"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.001		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.Large_PB_Hopper"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.001		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.UmarexSS"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.001		- (wBB * xBB)		- (wBB * CIVx * x90)	);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.CO2_Cartridge"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.5		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.Benjamin_M397"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.001		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.RWS_M34"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.001		- (wBB * xBB)		- (wBB * CIVx * x90)	);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.SS2000"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.005		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.BB177"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.005		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.BB177Box"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.05		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.Butterfly"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.001		- (SmKnife * xSmKnife)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.NinjaStar"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.001		- (SmKnife * xSmKnife)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.ZIP22"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.0001		- (w22 * x22)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.SlingShot_Marble"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.005		- (wBOW * xBOW)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.WristRocket_Marble"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.005		- (wBOW * xBOW)			);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					"Base.Jar_Marbles"					);	
table.insert(ProceduralDistributions.list["SchoolLockers"].items,					0.5		- (wBOW * xBOW)			);	
											
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.VM_68"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					0.005		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.Auto_Cocker"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					0.005		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.Tippmann_SL68"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					0.005		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.Sheridan_PGP"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					0.005		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.PB68"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					1		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.Standard_PB_Hopper"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					0.05		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.Large_PB_Hopper"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					0.05		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.UmarexSS"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					0.01		- (wBB * xBB)		- (wBB * CIVx * x90)	);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.CO2_Cartridge"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					1		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.Benjamin_M397"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					0.01		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.RWS_M34"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					0.01		- (wBB * xBB)		- (wBB * CIVx * x90)	);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.SS2000"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					0.1		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.BB177Box"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					1		- (wBB * xBB)			);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.SlingShot_Marble"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					0.5		- (wBOW * xBOW)			);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.WristRocket_Marble"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					0.5		- (wBOW * xBOW)			);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					"Base.Jar_Marbles"					);	
table.insert(ProceduralDistributions.list["WardrobeChild"].items,					1		- (wBOW * xBOW)			);	
											
											
------------------------------------------------------------------											
--		PROCEDURAL LIST	(PLANKSTASHGUN ) CASES		--						
--		NOTE : VANILLA CALLS FOR PLANKSTASHWEAPON	--								
--		WONT DO ANYTHING TILL THEY CHOOSE WHICH		--							
------------------------------------------------------------------											
table.insert(ProceduralDistributions.list["PlankStashGun"].items,					"Base.Case_Small1"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].items,					5		- (w22 * x22)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["PlankStashGun"].items,					"Base.Case_Small2"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].items,					5		- (w380 * x380)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["PlankStashGun"].items,					"Base.Case_Small3"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].items,					2		- (w9 * x9)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["PlankStashGun"].items,					"Base.Case_Small4"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].items,					2		- (w357 * x357)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["PlankStashGun"].items,					"Base.Case_Small5"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].items,					5		- (w45 * x45)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["PlankStashGun"].items,					"Base.Case_Small6"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].items,					3		- (w45 * x45)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["PlankStashGun"].items,					"Base.Case_Small7"					);	
table.insert(ProceduralDistributions.list["PlankStashGun"].items,					2		- (w44 * x44)	- (Case * xCase)		);	
											
------------------------------------------------------------------											
--		PROCEDURAL LIST	(GARAGEFIREARMS) CASE (RARE) 	--							
------------------------------------------------------------------											
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Cute"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w22 * x22)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Medium1"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w380 * x380)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Medium2"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w9 * x9)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Medium3"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w45 * x45)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Medium4"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w556 * x556)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Medium5"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w762x39 * x762x39)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Medium6"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w12g * x12g)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Large1"					);	-- MIXED
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case			- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Large2"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w545x39 * x545x39)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Large3"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w556 * x556)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Large4"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w762x39 * x762x39)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Large5"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w308 * x308)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Large6"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w12g * x12g)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Large7"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w12g * x12g)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Large8"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		-(wBOW * xBOW)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Large9"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		-(wBOW * xBOW)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					"Base.Case_Heavy4"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		-(wBMG * xBMG)	- (Case * xCase)		);	
											
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan30_22"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w22 * x22)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan30_380"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w380 * x380)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan30_9"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w9 * x9)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan30_57"					);	-- REMOVE NOT 90
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w57 * x57)	- (AmmoCan * xAmmoCan)	- (AmmoCan * x90)	);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan30_38"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w357 * x357)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan30_357"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w357 * x357)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan30_45"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w45 * x45)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan30_45LC"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w45LC * x45LC)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan30_44"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w44 * x44)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan30_4570"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (AmmoCan * x4570)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan30_MIX"					);	-- MIXED
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case			- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan50_223"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w223 * x223)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan50_556"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w556 * x556)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan50_545x39"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w545x39 * x545x39)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan50_762x39"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w762x39 * x762x39)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan50_762x54r"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w762x54r * x762x54r)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan50_308"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w308 * x308)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan50_3006"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w3006 * x3006)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan50_50"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (Case * xCase)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan50_MIX"					);	-- MIXED
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case			- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan50_410"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w45LC * x45LC)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan50_20"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w20g * x20g)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan50_12"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w12g * x12g)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan50_10"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w20g * x20g)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan50_4"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case		- (w4g * x4g)	- (AmmoCan * xAmmoCan)		);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					 "Base.AmmoCan50_SHOT"					);	
table.insert(ProceduralDistributions.list["GarageFirearms"].items,					Case			- (AmmoCan * xAmmoCan)		);	
											
											
table.insert(ProceduralDistributions.list["BedroomSideTable"].junk.items,					"Base.Case_Small1"					);	
table.insert(ProceduralDistributions.list["BedroomSideTable"].junk.items,					Case		- (w22 * x22)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["BedroomSideTable"].junk.items,					"Base.Case_Small2"					);	
table.insert(ProceduralDistributions.list["BedroomSideTable"].junk.items,					Case		- (w380 * x380)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["BedroomSideTable"].junk.items,					"Base.Case_Small3"					);	
table.insert(ProceduralDistributions.list["BedroomSideTable"].junk.items,					Case		- (w9 * x9)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["BedroomSideTable"].junk.items,					"Base.Case_Small4"					);	
table.insert(ProceduralDistributions.list["BedroomSideTable"].junk.items,					Case		- (w357 * x357)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["BedroomSideTable"].junk.items,					"Base.Case_Small5"					);	
table.insert(ProceduralDistributions.list["BedroomSideTable"].junk.items,					Case		- (w45 * x45)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["BedroomSideTable"].junk.items,					"Base.Case_Small6"					);	
table.insert(ProceduralDistributions.list["BedroomSideTable"].junk.items,					Case		- (w45 * x45)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["BedroomSideTable"].junk.items,					"Base.Case_Small7"					);	
table.insert(ProceduralDistributions.list["BedroomSideTable"].junk.items,					Case		- (w44 * x44)	- (Case * xCase)		);	
											
table.insert(ProceduralDistributions.list["OfficeDeskHome"].junk.items,					"Base.Case_Small1"					);	
table.insert(ProceduralDistributions.list["OfficeDeskHome"].junk.items,					Case		- (w22 * x22)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["OfficeDeskHome"].junk.items,					"Base.Case_Small2"					);	
table.insert(ProceduralDistributions.list["OfficeDeskHome"].junk.items,					Case		- (w380 * x380)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["OfficeDeskHome"].junk.items,					"Base.Case_Small3"					);	
table.insert(ProceduralDistributions.list["OfficeDeskHome"].junk.items,					Case		- (w9 * x9)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["OfficeDeskHome"].junk.items,					"Base.Case_Small4"					);	
table.insert(ProceduralDistributions.list["OfficeDeskHome"].junk.items,					Case		- (w357 * x357)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["OfficeDeskHome"].junk.items,					"Base.Case_Small5"					);	
table.insert(ProceduralDistributions.list["OfficeDeskHome"].junk.items,					Case		- (w45 * x45)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["OfficeDeskHome"].junk.items,					"Base.Case_Small6"					);	
table.insert(ProceduralDistributions.list["OfficeDeskHome"].junk.items,					Case		- (w45 * x45)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["OfficeDeskHome"].junk.items,					"Base.Case_Small7"					);	
table.insert(ProceduralDistributions.list["OfficeDeskHome"].junk.items,					Case		- (w44 * x44)	- (Case * xCase)		);	
											
table.insert(ProceduralDistributions.list["BedroomDresser"].junk.items,					"Base.Case_Medium1"					);	
table.insert(ProceduralDistributions.list["BedroomDresser"].junk.items,					Case		- (w380 * x380)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["BedroomDresser"].junk.items,					"Base.Case_Medium2"					);	
table.insert(ProceduralDistributions.list["BedroomDresser"].junk.items,					Case		- (w9 * x9)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["BedroomDresser"].junk.items,					"Base.Case_Medium3"					);	
table.insert(ProceduralDistributions.list["BedroomDresser"].junk.items,					Case		- (w45 * x45)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["BedroomDresser"].junk.items,					"Base.Case_Medium4"					);	
table.insert(ProceduralDistributions.list["BedroomDresser"].junk.items,					Case		- (w556 * x556)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["BedroomDresser"].junk.items,					"Base.Case_Medium5"					);	
table.insert(ProceduralDistributions.list["BedroomDresser"].junk.items,					Case		- (w762x39 * x762x39)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["BedroomDresser"].junk.items,					"Base.Case_Medium6"					);	
table.insert(ProceduralDistributions.list["BedroomDresser"].junk.items,					Case		- (w12g * x12g)	- (Case * xCase)		);	
											
table.insert(ProceduralDistributions.list["DresserGeneric"].junk.items,					"Base.Case_Medium1"					);	
table.insert(ProceduralDistributions.list["DresserGeneric"].junk.items,					Case		- (w380 * x380)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["DresserGeneric"].junk.items,					"Base.Case_Medium2"					);	
table.insert(ProceduralDistributions.list["DresserGeneric"].junk.items,					Case		- (w9 * x9)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["DresserGeneric"].junk.items,					"Base.Case_Medium3"					);	
table.insert(ProceduralDistributions.list["DresserGeneric"].junk.items,					Case		- (w45 * x45)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["DresserGeneric"].junk.items,					"Base.Case_Medium4"					);	
table.insert(ProceduralDistributions.list["DresserGeneric"].junk.items,					Case		- (w556 * x556)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["DresserGeneric"].junk.items,					"Base.Case_Medium5"					);	
table.insert(ProceduralDistributions.list["DresserGeneric"].junk.items,					Case		- (w762x39 * x762x39)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["DresserGeneric"].junk.items,					"Base.Case_Medium6"					);	
table.insert(ProceduralDistributions.list["DresserGeneric"].junk.items,					Case		- (w12g * x12g)	- (Case * xCase)		);	
											
table.insert(ProceduralDistributions.list["WardrobeMan"].junk.items,					"Base.Case_Large2"					);	
table.insert(ProceduralDistributions.list["WardrobeMan"].junk.items,					Case		- (w545x39 * x545x39)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["WardrobeMan"].junk.items,					"Base.Case_Large3"					);	
table.insert(ProceduralDistributions.list["WardrobeMan"].junk.items,					Case		- (w556 * x556)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["WardrobeMan"].junk.items,					"Base.Case_Large6"					);	
table.insert(ProceduralDistributions.list["WardrobeMan"].junk.items,					Case		- (w12g * x12g)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["WardrobeManClassy"].junk.items,					"Base.Case_Large5"					);	
table.insert(ProceduralDistributions.list["WardrobeManClassy"].junk.items,					Case		- (w308 * x308)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["WardrobeManClassy"].junk.items,					"Base.Case_Large7"					);	
table.insert(ProceduralDistributions.list["WardrobeManClassy"].junk.items,					Case		- (w12g * x12g)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["WardrobeManClassy"].junk.items,					"Base.Case_Large8"					);	
table.insert(ProceduralDistributions.list["WardrobeManClassy"].junk.items,					Case		-(wBOW * xBOW)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["WardrobeManClassy"].junk.items,					"Base.Case_Heavy4"					);	
table.insert(ProceduralDistributions.list["WardrobeManClassy"].junk.items,					Case		-(wBMG * xBMG)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["WardrobeRedneck"].junk.items,					"Base.Case_Large1"					);	-- MIXED
table.insert(ProceduralDistributions.list["WardrobeRedneck"].junk.items,					Case			- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["WardrobeRedneck"].junk.items,					"Base.Case_Large4"					);	
table.insert(ProceduralDistributions.list["WardrobeRedneck"].junk.items,					Case		- (w762x39 * x762x39)	- (Case * xCase)		);	
table.insert(ProceduralDistributions.list["WardrobeRedneck"].junk.items,					"Base.Case_Large9"					);	
table.insert(ProceduralDistributions.list["WardrobeRedneck"].junk.items,					Case		-(wBOW * xBOW)	- (Case * xCase)		);	
											
											
if (xArmor == 0) then					-- << MEANS ARMOR IS NOT DISABLED						
	print ("ARMOR DISTRO OVERRIDE OPTION ENABLED")										
	if getActivatedMods():contains("Brita_2") or getActivatedMods():contains("Brita_2_WIP") then									--	2
		print("Brita_2 DETECTEDâ€¦ RESETTING DISTROâ€¦ RE-INSERT DISTRO IN MIL LOCKERS")								--	4
		require "Items/Brita_Armor_Distributrions"									
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Leather_Jacket_Bennett",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Field_Jacket",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Wolf_Jacket",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Tactical_Hood",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.BARS_Hoodie",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Gorka6_Hoodie",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.M65_Jacket",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Suit_Army",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Military_Coat_Long",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Jacket_Bomber",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Jacket_Polizei",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.ELA_Bomber",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.ANA_Shirts",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.ANA_Hood",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.ANA_Classic",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Officer_Overcoat",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.USCM_Jacket",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Winter_Jacket_Heavy",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Winter_Jacket_Camo_Heavy",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Coast_Jacket",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Paramedic_Jacket",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Police_Waterproof_Jacket",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Gunsmith_Jacket",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Viking_Fire_Jacket",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Shirts_Bennett",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Ela_Pants",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Anorak_Pants",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.M42_Pants",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.GEN2_Pants",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.USCM_Pants",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Chempak_Blauer",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Chempak_BRN",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Chempak_Tychem",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Chempak_Level",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Tac_Boots",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Boots_Trackstar",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.USCM_Boots",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Military_Gaiter",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.OZK_Gaiter",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.SET_Boots",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_Sniper_Pack",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_ARVN_Rucksack",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_ST53_Set",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_ZIP",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_SSO",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_Savotta",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_Bush",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_Hunting",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_Radio_Pack",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_SCBA",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_Tactical_Alice",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_M2A1_Pack",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_Hazard_Cross",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.ELA_Bag",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.OMNI_Bag",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.KIP5",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.AP3",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.IP46",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Sheriff_Bag",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Trauma_Bag",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bushcraft_Bag",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Army_Duffle_Bag",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_Tactical_Belt_Front",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_D3M",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_Duty_Belt_Front",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_Blackhawk",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_X_Vest",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_SKS_Vest",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_AK_Vest",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bottle_Bag",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Rig_Smersh",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Rig_Smersh_A",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Rig_Smersh_B",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Rig_Smersh_C",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Rig_ELA",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.K1_Bag",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Radio_Rig",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.C420_PAPR",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Shotgun_Rig",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Belt_Pack_AR",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Belt_Pack_Gas",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Belt_Pack_Pouch",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Belt_Pack_Duty",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Belt_Pack_War",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.D3CR",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_Tactical_Boonie",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_Tactical_Boonie_Fold",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_Tactical_Cap",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_Tactical_Cap_Camo",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_Patrol_Cap",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_Tactical_Beret",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Officer_Hat",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Police_Officer_Hat",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bear_Mask",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_FAST_Opscore",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_Gentex_Helmet",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_HGU56",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_PSGT_Helmet",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_PSGT_Helmet_Camo",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Wolf_Helmet",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.USCM_Helmet",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Viper_Helmet",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Maska_1_Helmet",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.6B6_Helmet",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Fire_Helmet",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_HGU56_Shield",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_HGU56_Visor",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_PSGT_Visor",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_Riot_Visor",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_PSGT_Neck",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Maska_1_Visor",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.6B6_Visor",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Vityaz_Visor",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.ZSH_Visor",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Fire_Visor",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Fire_Visor_UP",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Viper_Helmet_Shield",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Armor_Defender",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Armor_Defender_Set",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_Plate_Carrier",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Armor_6B13",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Sheriff_Vest",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Sheriff_Vest_Full",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Wolf_Plate_Carrier",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Wolf_Plate_Carrier_B",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.EXO_Suit",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.SET_Armor",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.SET_Armor_FULL",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.USCM_Armor",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Wolf_Knee_Pad",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Wolf_Holster",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Dozer_Leg",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Dozer_Arm",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Dozer_Pouch",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.SET_Leg_Pouch",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Shell_Chest_Bandolier",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Shell_Arm_Bandolier",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Shell_Thigh_Bandolier",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Shell_Arm_Bandolier_B",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Shell_Thigh_Bandolier_B",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Glasses_X1000",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Glasses_Napier",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Glasses_Crewman_Goggles",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.SET_Goggles",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_Sordin",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_Astrocom",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.SET_Headset",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Aviation_Headsets",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Comtac_Headsets",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Comtac4_Headsets",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bowman_Headsets",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_Sam_NV",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.NV_PVS5",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.NV_PNV_57",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.NV_PVS7",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.NV_PVS21",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_Sniper_Hood",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Bag_Sniper_Suit",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Military_Cloak",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Balaclava_Mask_1",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Balaclava_Mask_2",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Balaclava_Mask_3",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Balaclava_Mask_4",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Balaclava_Mask_5",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Balaclava_Mask_6",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_MSA_Gas_Mask",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.Hat_MSA_Gas_Mask_AMP",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.K1_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.K1_Hood",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.K1_Half",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.PMK1_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.PMK1_Half",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.PMK2_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.PMK2_Half",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.S10_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.S10_Gasmask_Set",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.GP4U_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.MM1_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.SHMS_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.SHMS_Gasmask_Set",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.GP5M_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(ProceduralDistributions.list,			"Base.PMG_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Leather_Jacket_Bennett",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Field_Jacket",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Wolf_Jacket",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Tactical_Hood",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.BARS_Hoodie",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Gorka6_Hoodie",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.M65_Jacket",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Suit_Army",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Military_Coat_Long",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Jacket_Bomber",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Jacket_Polizei",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.ELA_Bomber",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.ANA_Shirts",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.ANA_Hood",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.ANA_Classic",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Officer_Overcoat",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.USCM_Jacket",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Winter_Jacket_Heavy",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Winter_Jacket_Camo_Heavy",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Coast_Jacket",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Paramedic_Jacket",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Police_Waterproof_Jacket",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Gunsmith_Jacket",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Viking_Fire_Jacket",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Shirts_Bennett",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Ela_Pants",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Anorak_Pants",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.M42_Pants",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.GEN2_Pants",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.USCM_Pants",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Chempak_Blauer",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Chempak_BRN",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Chempak_Tychem",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Chempak_Level",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Tac_Boots",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Boots_Trackstar",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.USCM_Boots",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Military_Gaiter",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.OZK_Gaiter",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.SET_Boots",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_Sniper_Pack",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_ARVN_Rucksack",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_ST53_Set",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_ZIP",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_SSO",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_Savotta",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_Bush",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_Hunting",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_Radio_Pack",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_SCBA",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_Tactical_Alice",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_M2A1_Pack",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_Hazard_Cross",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.ELA_Bag",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.OMNI_Bag",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.KIP5",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.AP3",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.IP46",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Sheriff_Bag",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Trauma_Bag",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bushcraft_Bag",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Army_Duffle_Bag",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_Tactical_Belt_Front",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_D3M",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_Duty_Belt_Front",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_Blackhawk",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_X_Vest",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_SKS_Vest",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_AK_Vest",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bottle_Bag",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Rig_Smersh",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Rig_Smersh_A",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Rig_Smersh_B",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Rig_Smersh_C",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Rig_ELA",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.K1_Bag",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Radio_Rig",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.C420_PAPR",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Shotgun_Rig",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Belt_Pack_AR",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Belt_Pack_Gas",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Belt_Pack_Pouch",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Belt_Pack_Duty",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Belt_Pack_War",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.D3CR",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_Tactical_Boonie",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_Tactical_Boonie_Fold",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_Tactical_Cap",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_Tactical_Cap_Camo",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_Patrol_Cap",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_Tactical_Beret",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Officer_Hat",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Police_Officer_Hat",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bear_Mask",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_FAST_Opscore",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_Gentex_Helmet",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_HGU56",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_PSGT_Helmet",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_PSGT_Helmet_Camo",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Wolf_Helmet",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.USCM_Helmet",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Viper_Helmet",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Maska_1_Helmet",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.6B6_Helmet",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Fire_Helmet",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_HGU56_Shield",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_HGU56_Visor",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_PSGT_Visor",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_Riot_Visor",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_PSGT_Neck",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Maska_1_Visor",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.6B6_Visor",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Vityaz_Visor",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.ZSH_Visor",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Fire_Visor",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Fire_Visor_UP",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Viper_Helmet_Shield",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Armor_Defender",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Armor_Defender_Set",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_Plate_Carrier",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Armor_6B13",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Sheriff_Vest",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Sheriff_Vest_Full",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Wolf_Plate_Carrier",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Wolf_Plate_Carrier_B",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.EXO_Suit",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.SET_Armor",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.SET_Armor_FULL",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.USCM_Armor",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Wolf_Knee_Pad",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Wolf_Holster",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Dozer_Leg",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Dozer_Arm",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Dozer_Pouch",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.SET_Leg_Pouch",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Shell_Chest_Bandolier",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Shell_Arm_Bandolier",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Shell_Thigh_Bandolier",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Shell_Arm_Bandolier_B",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Shell_Thigh_Bandolier_B",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Glasses_X1000",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Glasses_Napier",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Glasses_Crewman_Goggles",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.SET_Goggles",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_Sordin",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_Astrocom",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.SET_Headset",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Aviation_Headsets",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Comtac_Headsets",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Comtac4_Headsets",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bowman_Headsets",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_Sam_NV",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.NV_PVS5",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.NV_PNV_57",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.NV_PVS7",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.NV_PVS21",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_Sniper_Hood",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Bag_Sniper_Suit",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Military_Cloak",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Balaclava_Mask_1",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Balaclava_Mask_2",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Balaclava_Mask_3",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Balaclava_Mask_4",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Balaclava_Mask_5",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Balaclava_Mask_6",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_MSA_Gas_Mask",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.Hat_MSA_Gas_Mask_AMP",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.K1_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.K1_Hood",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.K1_Half",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.PMK1_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.PMK1_Half",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.PMK2_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.PMK2_Half",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.S10_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.S10_Gasmask_Set",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.GP4U_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.MM1_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.SHMS_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.SHMS_Gasmask_Set",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.GP5M_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(SuburbsDistributions,			"Base.PMG_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Leather_Jacket_Bennett",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Field_Jacket",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Wolf_Jacket",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Tactical_Hood",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.BARS_Hoodie",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Gorka6_Hoodie",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.M65_Jacket",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Suit_Army",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Military_Coat_Long",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Jacket_Bomber",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Jacket_Polizei",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.ELA_Bomber",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.ANA_Shirts",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.ANA_Hood",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.ANA_Classic",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Officer_Overcoat",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.USCM_Jacket",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Winter_Jacket_Heavy",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Winter_Jacket_Camo_Heavy",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Coast_Jacket",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Paramedic_Jacket",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Police_Waterproof_Jacket",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Gunsmith_Jacket",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Viking_Fire_Jacket",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Shirts_Bennett",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Ela_Pants",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Anorak_Pants",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.M42_Pants",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.GEN2_Pants",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.USCM_Pants",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Chempak_Blauer",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Chempak_BRN",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Chempak_Tychem",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Chempak_Level",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Tac_Boots",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Boots_Trackstar",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.USCM_Boots",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Military_Gaiter",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.OZK_Gaiter",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.SET_Boots",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_Sniper_Pack",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_ARVN_Rucksack",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_ST53_Set",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_ZIP",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_SSO",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_Savotta",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_Bush",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_Hunting",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_Radio_Pack",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_SCBA",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_Tactical_Alice",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_M2A1_Pack",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_Hazard_Cross",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.ELA_Bag",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.OMNI_Bag",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.KIP5",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.AP3",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.IP46",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Sheriff_Bag",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Trauma_Bag",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bushcraft_Bag",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Army_Duffle_Bag",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_Tactical_Belt_Front",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_D3M",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_Duty_Belt_Front",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_Blackhawk",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_X_Vest",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_SKS_Vest",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_AK_Vest",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bottle_Bag",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Rig_Smersh",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Rig_Smersh_A",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Rig_Smersh_B",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Rig_Smersh_C",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Rig_ELA",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.K1_Bag",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Radio_Rig",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.C420_PAPR",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Shotgun_Rig",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Belt_Pack_AR",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Belt_Pack_Gas",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Belt_Pack_Pouch",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Belt_Pack_Duty",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Belt_Pack_War",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.D3CR",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_Tactical_Boonie",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_Tactical_Boonie_Fold",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_Tactical_Cap",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_Tactical_Cap_Camo",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_Patrol_Cap",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_Tactical_Beret",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Officer_Hat",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Police_Officer_Hat",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bear_Mask",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_FAST_Opscore",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_Gentex_Helmet",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_HGU56",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_PSGT_Helmet",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_PSGT_Helmet_Camo",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Wolf_Helmet",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.USCM_Helmet",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Viper_Helmet",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Maska_1_Helmet",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.6B6_Helmet",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Fire_Helmet",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_HGU56_Shield",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_HGU56_Visor",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_PSGT_Visor",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_Riot_Visor",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_PSGT_Neck",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Maska_1_Visor",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.6B6_Visor",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Vityaz_Visor",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.ZSH_Visor",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Fire_Visor",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Fire_Visor_UP",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Viper_Helmet_Shield",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Armor_Defender",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Armor_Defender_Set",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_Plate_Carrier",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Armor_6B13",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Sheriff_Vest",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Sheriff_Vest_Full",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Wolf_Plate_Carrier",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Wolf_Plate_Carrier_B",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.EXO_Suit",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.SET_Armor",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.SET_Armor_FULL",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.USCM_Armor",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Wolf_Knee_Pad",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Wolf_Holster",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Dozer_Leg",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Dozer_Arm",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Dozer_Pouch",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.SET_Leg_Pouch",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Shell_Chest_Bandolier",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Shell_Arm_Bandolier",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Shell_Thigh_Bandolier",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Shell_Arm_Bandolier_B",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Shell_Thigh_Bandolier_B",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Glasses_X1000",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Glasses_Napier",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Glasses_Crewman_Goggles",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.SET_Goggles",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_Sordin",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_Astrocom",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.SET_Headset",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Aviation_Headsets",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Comtac_Headsets",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Comtac4_Headsets",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bowman_Headsets",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_Sam_NV",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.NV_PVS5",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.NV_PNV_57",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.NV_PVS7",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.NV_PVS21",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_Sniper_Hood",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Bag_Sniper_Suit",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Military_Cloak",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Balaclava_Mask_1",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Balaclava_Mask_2",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Balaclava_Mask_3",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Balaclava_Mask_4",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Balaclava_Mask_5",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Balaclava_Mask_6",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_MSA_Gas_Mask",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.Hat_MSA_Gas_Mask_AMP",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.K1_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.K1_Hood",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.K1_Half",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.PMK1_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.PMK1_Half",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.PMK2_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.PMK2_Half",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.S10_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.S10_Gasmask_Set",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.GP4U_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.MM1_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.SHMS_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.SHMS_Gasmask_Set",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.GP5M_Gasmask",	 nil, true);					
		RemoveItemFromDistribution(Distributions[1],			"Base.PMG_Gasmask",	 nil, true);					
											
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Leather_Jacket_Bennett"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Field_Jacket"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Wolf_Jacket"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Tactical_Hood"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.BARS_Hoodie"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Gorka6_Hoodie"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.M65_Jacket"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Suit_Army"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Military_Coat_Long"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Jacket_Bomber"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Jacket_Polizei"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.ELA_Bomber"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.ANA_Shirts"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.ANA_Hood"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.ANA_Classic"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Officer_Overcoat"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.USCM_Jacket"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Winter_Jacket_Heavy"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Winter_Jacket_Camo_Heavy"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Coast_Jacket"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Paramedic_Jacket"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Police_Waterproof_Jacket"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Gunsmith_Jacket"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Viking_Fire_Jacket"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Shirts_Bennett"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Ela_Pants"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Anorak_Pants"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.M42_Pants"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.GEN2_Pants"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.USCM_Pants"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Chempak_Blauer"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Chempak_BRN"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Chempak_Tychem"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Chempak_Level"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Tac_Boots"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Boots_Trackstar"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.USCM_Boots"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Military_Gaiter"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.OZK_Gaiter"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.SET_Boots"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_Sniper_Pack"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_ARVN_Rucksack"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_ST53_Set"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_ZIP"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_SSO"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_Savotta"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_Bush"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_Hunting"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_Radio_Pack"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_SCBA"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_Tactical_Alice"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_M2A1_Pack"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_Hazard_Cross"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.ELA_Bag"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.OMNI_Bag"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.KIP5"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.AP3"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.IP46"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Sheriff_Bag"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Trauma_Bag"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bushcraft_Bag"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Army_Duffle_Bag"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_Tactical_Belt_Front"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_D3M"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_Duty_Belt_Front"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_Blackhawk"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_X_Vest"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_SKS_Vest"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_AK_Vest"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bottle_Bag"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Rig_Smersh"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Rig_Smersh_A"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Rig_Smersh_B"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Rig_Smersh_C"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Rig_ELA"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.K1_Bag"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Radio_Rig"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.C420_PAPR"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Shotgun_Rig"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Belt_Pack_AR"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Belt_Pack_Gas"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Belt_Pack_Pouch"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Belt_Pack_Duty"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Belt_Pack_War"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.D3CR"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_Tactical_Boonie"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_Tactical_Boonie_Fold"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_Tactical_Cap"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_Tactical_Cap_Camo"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_Patrol_Cap"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_Tactical_Beret"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Officer_Hat"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Police_Officer_Hat"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bear_Mask"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_FAST_Opscore"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_Gentex_Helmet"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_HGU56"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_PSGT_Helmet"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_PSGT_Helmet_Camo"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Wolf_Helmet"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.USCM_Helmet"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Viper_Helmet"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Maska_1_Helmet"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.6B6_Helmet"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Fire_Helmet"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_HGU56_Shield"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_HGU56_Visor"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_PSGT_Visor"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_Riot_Visor"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_PSGT_Neck"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Maska_1_Visor"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.6B6_Visor"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Vityaz_Visor"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.ZSH_Visor"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Fire_Visor"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Fire_Visor_UP"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Viper_Helmet_Shield"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Armor_Defender"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Armor_Defender_Set"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_Plate_Carrier"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Armor_6B13"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Sheriff_Vest"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Sheriff_Vest_Full"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Wolf_Plate_Carrier"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Wolf_Plate_Carrier_B"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.EXO_Suit"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.SET_Armor"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.SET_Armor_FULL"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.USCM_Armor"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Wolf_Knee_Pad"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Wolf_Holster"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Dozer_Leg"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Dozer_Arm"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Dozer_Pouch"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.SET_Leg_Pouch"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Shell_Chest_Bandolier"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Shell_Arm_Bandolier"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Shell_Thigh_Bandolier"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Shell_Arm_Bandolier_B"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Shell_Thigh_Bandolier_B"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Glasses_X1000"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Glasses_Napier"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Glasses_Crewman_Goggles"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.SET_Goggles"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_Sordin"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_Astrocom"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.SET_Headset"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Aviation_Headsets"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Comtac_Headsets"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Comtac4_Headsets"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bowman_Headsets"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_Sam_NV"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.NV_PVS5"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.NV_PNV_57"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.NV_PVS7"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.NV_PVS21"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_Sniper_Hood"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Bag_Sniper_Suit"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Military_Cloak"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Balaclava_Mask_1"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Balaclava_Mask_2"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Balaclava_Mask_3"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Balaclava_Mask_4"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Balaclava_Mask_5"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Balaclava_Mask_6"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_MSA_Gas_Mask"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_MSA_Gas_Mask_AMP"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.K1_Gasmask"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.K1_Hood"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.K1_Half"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.PMK1_Gasmask"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.PMK1_Half"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.PMK2_Gasmask"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.PMK2_Half"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.S10_Gasmask"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.S10_Gasmask_Set"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)		- (Armor * MILxNON)		);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.GP4U_Gasmask"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.MM1_Gasmask"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.SHMS_Gasmask"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.SHMS_Gasmask_Set"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.GP5M_Gasmask"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.PMG_Gasmask"						);
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)				);
											
											
		table.insert(SuburbsDistributions.Bag_Police.items,			"Base.Bag_Duty_Belt_Front"						);
		table.insert(SuburbsDistributions.Bag_Police.items,				Armor * 2	- (Armor * xArmor)				);
		table.insert(SuburbsDistributions.Bag_Police.items,			"Base.Sheriff_Vest"						);
		table.insert(SuburbsDistributions.Bag_Police.items,				Armor * 2	- (Armor * xArmor)				);
		table.insert(SuburbsDistributions.Bag_Police.items,			"Base.Sheriff_Vest_Full"						);
		table.insert(SuburbsDistributions.Bag_Police.items,				Armor * 2	- (Armor * xArmor)				);
		table.insert(SuburbsDistributions.Bag_Police.items,			"Base.Police_Jumper"						);
		table.insert(SuburbsDistributions.Bag_Police.items,				Armor * 2	- (Armor * xArmor)				);
		table.insert(SuburbsDistributions.Bag_Police.items,			"Base.Sheriff_Jumper"						);
		table.insert(SuburbsDistributions.Bag_Police.items,				Armor * 2	- (Armor * xArmor)				);
											
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,			"Base.Winter_Jacket_Heavy"						);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,				Armor * 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,			"Base.Winter_Jacket_Camo_Heavy"						);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,				Armor * 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,			"Base.OZK_Gaiter"						);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,				Armor * 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,			"Base.SET_Boots"						);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,				Armor * 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,			"Base.Bag_Sniper_Pack"						);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,				Armor * 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,			"Base.Bag_Bush"						);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,				Armor * 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,			"Base.Bag_Hunting"						);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,				Armor * 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,			"Base.Bushcraft_Bag"						);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,				Armor * 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,			"Base.Bag_Sniper_Hood"						);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,				Armor * 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,			"Base.Bag_Sniper_Suit"						);
		table.insert(ProceduralDistributions.list["HuntingLockers"].items,				Armor * 2	- (Armor * xArmor)				);
											
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.Viking_Fire_Jacket"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.Fire_Helmet"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.Fire_Visor"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.Bag_SCBA"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.OMNI_Bag"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.Trauma_Bag"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.Hat_MSA_Gas_Mask"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.Hat_MSA_Gas_Mask_AMP"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)			- (Armor * x90)	);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.K1_Gasmask"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.K1_Hood"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.K1_Half"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.PMK1_Gasmask"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.PMK1_Half"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.PMK2_Gasmask"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.PMK2_Half"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.S10_Gasmask"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.S10_Gasmask_Set"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.GP4U_Gasmask"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.MM1_Gasmask"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.SHMS_Gasmask"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.SHMS_Gasmask_Set"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.GP5M_Gasmask"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,			"Base.PMG_Gasmask"						);
		table.insert(ProceduralDistributions.list["FireDeptLockers"].items,				Armor / 2	- (Armor * xArmor)				);
	end										
											
	if getActivatedMods():contains("DRK_1") then										
		print("DRK_1 DETECTEDâ€¦ RESETTING DISTROâ€¦ RE-INSERT DISTRO IN MIL LOCKERS")									
		require "Items/DRK_Armor_Distributions"									
		RemoveItemFromDistribution(ProceduralDistributions.list, "Base.Hat_PASGT_Helmet",			nil, true);						
		RemoveItemFromDistribution(ProceduralDistributions.list, "Base.Hat_TPASGT_Helmet",			nil, true);						
		RemoveItemFromDistribution(ProceduralDistributions.list, "Base.Interceptor_Armor",			nil, true);						
		RemoveItemFromDistribution(ProceduralDistributions.list, "Base.Interceptor_Armor_v",			nil, true);						
		RemoveItemFromDistribution(ProceduralDistributions.list, "Base.Interceptor_Armor_s",			nil, true);						
		RemoveItemFromDistribution(ProceduralDistributions.list, "Base.Marpat_Jacket_w",			nil, true);						
		RemoveItemFromDistribution(ProceduralDistributions.list, "Base.Marpat_Jacket_d",			nil, true);						
		RemoveItemFromDistribution(ProceduralDistributions.list, "Base.Marpat_Pants_w",			nil, true);						
		RemoveItemFromDistribution(ProceduralDistributions.list, "Base.Marpat_Pants_d",			nil, true);						
		RemoveItemFromDistribution(ProceduralDistributions.list, "Base.Interceptor_Pouches",			nil, true);						
		RemoveItemFromDistribution(ProceduralDistributions.list, "Base.Hat_USMC_Cap",			nil, true);						
		RemoveItemFromDistribution(ProceduralDistributions.list, "Base.Hat_USMC_Cap_d",			nil, true);						
											
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_PASGT_Helmet"					);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_TPASGT_Helmet"					);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Interceptor_Armor"					);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Interceptor_Armor_v"					);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Interceptor_Armor_s"					);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Marpat_Jacket_w"					);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Marpat_Jacket_d"					);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Marpat_Pants_w"					);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Marpat_Pants_d"					);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Interceptor_Pouches"					);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_USMC_Cap_w"					);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,			"Base.Hat_USMC_Cap_d"					);	
		table.insert(ProceduralDistributions.list["LockerArmyBedroom"].items,				Armor / 2	- (Armor * xArmor)			);	
	end										
else print ("ARMOR DISTRO OVERRIDE OPTION DISABLED")											
end											
											
----------------------------------------------------------											
--	ZOMBIE SPAWN IMPALED W/WEAPON or ARROW or BOLT				--						
----------------------------------------------------------											
											
if	(xBOW ~= 100) then						-- BOW				
	table.insert(AttachedWeaponDefinitions["knifeStomach"].weapons,				 "Base.Arrow_Fiberglass");						
	table.insert(AttachedWeaponDefinitions["knifeStomach"].weapons,				 "Base.Bolt_Bear");						
	table.insert(AttachedWeaponDefinitions["knifeBack"].weapons,				 "Base.Arrow_Fiberglass");						
	table.insert(AttachedWeaponDefinitions["knifeBack"].weapons,				 "Base.Bolt_Bear");						
	table.insert(AttachedWeaponDefinitions["knifeLeftLeg"].weapons,				 "Base.Arrow_Fiberglass");						
	table.insert(AttachedWeaponDefinitions["knifeLeftLeg"].weapons,				 "Base.Bolt_Bear");						
	table.insert(AttachedWeaponDefinitions["knifeRightLeg"].weapons,				 "Base.Arrow_Fiberglass");						
	table.insert(AttachedWeaponDefinitions["knifeRightLeg"].weapons,				 "Base.Bolt_Bear");						
	table.insert(AttachedWeaponDefinitions["knifeShoulder"].weapons,				 "Base.Arrow_Fiberglass");						
	table.insert(AttachedWeaponDefinitions["knifeShoulder"].weapons,				 "Base.Bolt_Bear");						
end											
											
if	(xSword ~= 100) then						-- SWORD				
	table.insert(AttachedWeaponDefinitions["katanaStomach"].weapons,				 "Base.KillBill");						
end											
											
if	(xAxe ~= 100) then						-- AXE				
	table.insert(AttachedWeaponDefinitions["axeBack"].weapons,				 "Base.Tactical_Axe");						
	table.insert(AttachedWeaponDefinitions["axeBack"].weapons,				 "Base.Tactical_Sickle");						
	table.insert(AttachedWeaponDefinitions["axeBack"].weapons,				"Base.FirePlace_Poker");						
	table.insert(AttachedWeaponDefinitions["lumberjack"].weapons,				 "Base.Tactical_Axe");						
end											
											
if	(xSmKnife ~= 100) then						-- SMALL KNIFE				
	table.insert(AttachedWeaponDefinitions["knifeStomach"].weapons,				 "Base.Butterfly");						
	table.insert(AttachedWeaponDefinitions["knifeStomach"].weapons,				 "Base.Karambit");						
	table.insert(AttachedWeaponDefinitions["knifeStomach"].weapons,				 "Base.PushDagger");						
	table.insert(AttachedWeaponDefinitions["knifeStomach"].weapons,				 "Base.ThrowingKnife");						
	table.insert(AttachedWeaponDefinitions["knifeStomach"].weapons,				 "Base.NinjaStar");						
	table.insert(AttachedWeaponDefinitions["knifeBack"].weapons,				 "Base.Butterfly");						
	table.insert(AttachedWeaponDefinitions["knifeBack"].weapons,				 "Base.Karambit");						
	table.insert(AttachedWeaponDefinitions["knifeBack"].weapons,				 "Base.PushDagger");						
	table.insert(AttachedWeaponDefinitions["knifeBack"].weapons,				 "Base.ThrowingKnife");						
	table.insert(AttachedWeaponDefinitions["knifeBack"].weapons,				 "Base.NinjaStar");						
	table.insert(AttachedWeaponDefinitions["knifeLeftLeg"].weapons,				 "Base.Butterfly");						
	table.insert(AttachedWeaponDefinitions["knifeLeftLeg"].weapons,				 "Base.Karambit");						
	table.insert(AttachedWeaponDefinitions["knifeLeftLeg"].weapons,				 "Base.PushDagger");						
	table.insert(AttachedWeaponDefinitions["knifeLeftLeg"].weapons,				 "Base.ThrowingKnife");						
	table.insert(AttachedWeaponDefinitions["knifeLeftLeg"].weapons,				 "Base.NinjaStar");						
	table.insert(AttachedWeaponDefinitions["knifeRightLeg"].weapons,				 "Base.Butterfly");						
	table.insert(AttachedWeaponDefinitions["knifeRightLeg"].weapons,				 "Base.Karambit");						
	table.insert(AttachedWeaponDefinitions["knifeRightLeg"].weapons,				 "Base.PushDagger");						
	table.insert(AttachedWeaponDefinitions["knifeRightLeg"].weapons,				 "Base.ThrowingKnife");						
	table.insert(AttachedWeaponDefinitions["knifeRightLeg"].weapons,				 "Base.NinjaStar");						
	table.insert(AttachedWeaponDefinitions["knifeShoulder"].weapons,				 "Base.Butterfly");						
	table.insert(AttachedWeaponDefinitions["knifeShoulder"].weapons,				 "Base.Karambit");						
	table.insert(AttachedWeaponDefinitions["knifeShoulder"].weapons,				 "Base.PushDagger");						
	table.insert(AttachedWeaponDefinitions["knifeShoulder"].weapons,				 "Base.ThrowingKnife");						
	table.insert(AttachedWeaponDefinitions["knifeShoulder"].weapons,				 "Base.NinjaStar");						
--	table.insert(AttachedWeaponDefinitions["knivesBelt"].weapons,				 "Base.Butterfly");						
--	table.insert(AttachedWeaponDefinitions["knivesBelt"].weapons,				 "Base.Karambit");						
--	table.insert(AttachedWeaponDefinitions["knivesBelt"].weapons,				 "Base.PushDagger");						
--	table.insert(AttachedWeaponDefinitions["knivesBelt"].weapons,				 "Base.ThrowingKnife");						
--	table.insert(AttachedWeaponDefinitions["knivesBelt"].weapons,				 "Base.NinjaStar");						
end											
											
if	(xLgKnife ~= 100) then						-- LARGE KNIFE				
	table.insert(AttachedWeaponDefinitions["knifeStomach"].weapons,				"Base.RamboKnife");						
	table.insert(AttachedWeaponDefinitions["knifeBack"].weapons,				"Base.RamboKnife");						
	table.insert(AttachedWeaponDefinitions["knifeLeftLeg"].weapons,				"Base.RamboKnife");						
	table.insert(AttachedWeaponDefinitions["knifeRightLeg"].weapons,				"Base.RamboKnife");						
	table.insert(AttachedWeaponDefinitions["knifeShoulder"].weapons,				"Base.RamboKnife");						
	table.insert(AttachedWeaponDefinitions["MacheteShoulder"].weapons,				 "Base.BGMachete");						
	table.insert(AttachedWeaponDefinitions["MacheteShoulder"].weapons,				 "Base.RussianMachete");						
--	table.insert(AttachedWeaponDefinitions["knivesBelt"].weapons,				"Base.RamboKnife");						
	table.insert(AttachedWeaponDefinitions["macheteInBack"].weapons,				 "Base.BGMachete");						
	table.insert(AttachedWeaponDefinitions["macheteInBack"].weapons,				 "Base.RussianMachete");						
end											
											
											
											
if	(xUSA ~= 100) then						-- USA				
	if	(x9 ~= 100) then					-- 9mm				
		if	(xSEMI ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.M5906");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.M39");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.M1Carbine");								
		end									
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.M2Carbine");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.M635");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.M635S");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.M635SD");								
		end									
	end										
	if	(x357 ~= 100) then					-- 357/38				
		if	(xREV ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.Revolver_Short");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.Revolver");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.Revolver_Long");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.GP100_2");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.GP100_4");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.GP100_6");								
		end									
		if	(xBREAK ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.NEF_Handi_38");								
		end									
		if	(xLEVER ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.Marlin_1894");								
		end									
	end										
	if	(x45 ~= 100) then					-- 45 ACP				
		if	(xSEMI ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.Pistol2");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.PARA1911");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.AMT1911");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.AMT1911_Long");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.Colt1911");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.Colt_Commander");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.M4506");								
		end									
	end										
	if	(x44 ~= 100) then					--44 MAG				
		if	(xLEVER ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.Win_1894");								
		end									
	end										
	if	(x45LC ~= 100) then					-- 45 LC				
		if	(xLEVER ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.Winchester1866");								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.Winchester1873");								
		end									
		if	(xREV ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.TXS_804_45LC");								
		end									
	end										
	if	(x12g ~= 100) then					-- 12g SHOT				
		if	(xSEMI ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_shotgunPolice"].weapons, "Base.R11_87");								
		end									
		if	(xPUMP ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_shotgunPolice"].weapons, "Base.Shotgun");								
			table.insert(AttachedWeaponDefinitions["A26_shotgunPolice"].weapons, "Base.M870");								
			table.insert(AttachedWeaponDefinitions["A26_shotgunPolice"].weapons, "Base.M1897");								
			table.insert(AttachedWeaponDefinitions["A26_shotgunPolice"].weapons, "Base.M870_Police");								
			table.insert(AttachedWeaponDefinitions["A26_shotgunPolice"].weapons, "Base.M870_MCS");								
			table.insert(AttachedWeaponDefinitions["A26_shotgunPolice"].weapons, "Base.M870_CQB");								
			table.insert(AttachedWeaponDefinitions["A26_shotgunPolice"].weapons, "Base.M870_Breaching_Pistol");								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.M870_Wingmaster");								
		end									
		if	(xREV ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_shotgunPolice"].weapons, "Base.DAO12");								
		end									
		if	(xBREAK ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_shotgunPolice"].weapons, "Base.Coachgun");								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.DoubleBarrelShotgun");								
		end									
	end										
	if	(x223 ~= 100) then					-- 223				
		if	(xBOLT ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.VarmintRifle");								
		end									
	end										
	if	(x556 ~= 100) then					-- 556				
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.AssaultRifle");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.CAR15SMG");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.CAR15_Survival");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.M16A1");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.M16A2");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.M16A3");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.M723");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.M4");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.M4A1");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.ColtM16");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.M16Wood");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.M16Tape");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.AR18");								
		end									
	end										
	if	(x308 ~= 100) then					-- 308				
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.AssaultRifle2");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.M14");								
		end									
		if	(xBOLT ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.Savage12");								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.M40");								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.M40A1");								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.M40A2");								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.M40A3");								
		end									
		if	(xLEVER ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.Win_1895");								
		end									
	end										
	if	(x3006 ~= 100) then					-- 3006				
		if	(xBREAK ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.Thompson_Center_3006");								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.Ruger_No1_3006");								
		end									
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.BAR");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.BAR_Monitor");								
		end									
		if	(xBOLT ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.M1903");								
		end									
	end										
	if	(xBMG ~= 100) then					-- BMG				
		if	(xBREAK ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.BOAR");								
		end									
		if	(xBOLT ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.Harris50");								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.TAC50");								
		end									
		if	(xSEMI ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.M82");								
		end									
	end										
end											
											
if	(xSOV ~= 100) then						-- SOV				
	if	(x762x39 ~= 100) then					-- 762x39				
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.AK74");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.AKS74");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.AKS74U");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.AKM");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.MD65_Stock");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.AKMS_Stock");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.Ots14_1A_01");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.Ots14_1A_02");								
		end									
	end										
	if	(x556 ~= 100) then					-- 556				
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.M85_Stock");								
		end									
	end										
	if	(x762x54r ~= 100) then					-- 762x54r				
		if	(xBOLT ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.Mosin");								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.SV_98");								
		end									
	end										
end											
											
if	(xKOR ~= 100) then						-- KOR				
	if	(x9 ~= 100) then					-- 9mm				
		if	(xSEMI ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.K5");								
		end									
	end										
	if	(x12g ~= 100) then					-- 12g SHOT				
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_shotgunPolice"].weapons, "Base.USAS_12");								
		end									
	end										
	if	(x556 ~= 100) then					--556				
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.K2_1");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.K2_203");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.K1_1");								
		end									
	end										
end											
											
if	(xPAC ~= 100) then						-- PAC				
	if	(x556 ~= 100) then					-- 556				
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.Type89");								
		end									
	end										
	if	(x762x39 ~= 100) then					-- 762x39				
		if	(xSEMI ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.SKS");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.SKS_PARA");								
		end									
	end										
	if	(x308 ~= 100) then					-- 308				
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.Type64");								
		end									
		if	(xBOLT ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.Type38");								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.Type99");								
		end									
	end										
	if	(x3006 ~= 100) then					-- 3006				
		if	(xBOLT ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.HuntingRifle");								
		end									
	end										
end											
											
if	(xCZE ~= 100) then						-- CZE				
	if	(x9 ~= 100) then					-- 9mm				
		if	(xSEMI ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.CZ75");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.CZ_75b");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.CZ_75_Compact");								
		end									
	end										
	if	(x762x39 ~= 100) then					-- 762x39				
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.Vz58");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.Vz58_Stock");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.Vz58_Mini_Stock");								
		end									
	end										
end											
											
if	(xEUR ~= 100) then						-- EUR				
	if	(x9 ~= 100) then					-- 9mm				
		if	(xSEMI ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.M9");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.M9A3");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.G17");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.P226");								
		end									
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.MP5_Fixed");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.MP5_Stock");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.MP5SD6_Fixed");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.MP5SD6_Stock");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.AUG9");								
		end									
	end										
	if	(x45 ~= 100) then					-- 45 ACP				
		if	(xSEMI ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.P220");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.G21");								
		end									
	end										
	if	(x223 ~= 100) then					-- 223				
		if	(xBOLT ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.Sako85");								
		end									
	end										
	if	(x556 ~= 100) then					-- 556				
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.G33");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.FN_FNC");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.L85");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.FAMAS");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.FAMAS_G2");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.FAMAS_Felin");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.AUG");								
		end									
	end										
	if	(x308 ~= 100) then					-- 308				
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.G3");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.FAL");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.FAL_PARA_Stock");								
		end									
		if	(xSEMI ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.MAS44");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.MAS49");								
		end									
		if	(xBOLT ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.MAS36");								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.L96");								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.WA2000");								
		end									
	end										
	if	(xBMG ~= 100) then					-- BMG				
		if	(xBOLT ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.Gepard_M6");								
		end									
	end										
	if	(x12g ~= 100) then					-- 12g SHOT				
		if	(xSEMI ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_shotgunPolice"].weapons, "Base.SPAS12_Fixed");								
			table.insert(AttachedWeaponDefinitions["A26_shotgunPolice"].weapons, "Base.SPAS12_Fold");								
			table.insert(AttachedWeaponDefinitions["A26_shotgunPolice"].weapons, "Base.SPAS_15");								
		end									
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_shotgunPolice"].weapons, "Base.CAWS");								
		end									
		if	(xBREAK ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.Triple_Crown");								
		end									
	end										
	if	(x10g ~= 100) then					-- 10g SHOT				
		if	(xBREAK ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.ROYAL_SXS");								
		end									
	end										
	if	(x20g ~= 100) then					-- 20g SHOT				
		if	(xSEMI ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_huntingRifleOnBack"].weapons, "Base.10855_Silver");								
		end									
	end										
end											
											
if	(xISR ~= 100) then						-- ISR				
	if	(x44 ~= 100) then					-- 44 MAG				
		if	(xSEMI ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.Pistol3");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.DEagle");								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.DEagle_Long");								
		end									
	end										
	if	(x9 ~= 100) then					-- 9mm				
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.UZI");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.UZI_Wood");								
		end									
	end										
	if	(x308 ~= 100) then					-- 308				
		if	(xAUTO ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.Galil");								
			table.insert(AttachedWeaponDefinitions["A26_assaultRifleOnBack"].weapons, "Base.Galil_Sniper");								
		end									
	end										
end											
											
if	(xREST ~= 100) then						-- REST				
	if	(x9 ~= 100) then					-- 9mm				
		if	(xSEMI ~= 100) then								
			table.insert(AttachedWeaponDefinitions["A26_handgunHolster"].weapons, "Base.Pistol");								
		end									
	end										
end											
											
if	(xBlunt == 0) then						-- MELEE BLUNT				
	table.insert(AttachedWeaponDefinitions["A26_nightstick"].weapons, "Base.ASP_B");										
	table.insert(AttachedWeaponDefinitions["A26_nightstick"].weapons, "Base.MilitaryBaton");										
	table.insert(AttachedWeaponDefinitions["A26_nightstick"].weapons, "Base.Nightstick");										
end											

A26ProcDistro = {};																		
A26ProcDistro.list = {																		
																		
	GunStoreGuns = {																	
		rolls =	GUNRollGUN	,														
		items = {																
			"Base.UmarexSS",	wBB	 * CIVx	- (wBB * xBB)		- (wBB * CIVx * xUSA)			- (wBB * CIVx * x90)	,						
			"Base.Benjamin_M397",	wBB	 * CIVx	- (wBB * xBB)		- (wBB * CIVx * xUSA)				,						
			"Base.RWS_M34",	wBB	 * CIVx	- (wBB * xBB)		- (wBB * CIVx * xUSA)			- (wBB * CIVx * x90)	,						
			"Base.VM_68",	wBB	 * CIVx	- (wBB * xBB)		- (wBB * CIVx * xUSA)				,						
			"Base.Auto_Cocker",	wBB	 * CIVx	- (wBB * xBB)		- (wBB * CIVx * xUSA)				,						
			"Base.Tippmann_SL68",	wBB	 * CIVx	- (wBB * xBB)		- (wBB * CIVx * xUSA)				,						
			"Base.Sheridan_PGP",	wBB	 * CIVx	- (wBB * xBB)		- (wBB * CIVx * xUSA)				,						
			"Base.CP33",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)			- (w22 * CIVx * x90)	,						
			"Base.Ruger_MK4",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)			- (w22 * CIVx * x90)	,						
			"Base.Ruger_MK4_2245",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)			- (w22 * CIVx * x90)	,						
			"Base.Buckmark",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)				,						
			"Base.Buckmark_Long",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)				,						
			"Base.Buckmark_Carbine",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)				,						
			"Base.HK4_22",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xEUR)				,						
			"Base.ZIP22",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)			- (w22 * CIVx * x90)	,						
			"Base.Ruger_1022",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)				,						
			"Base.Marlin_M70",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)				,						
			"Base.Cricket_22",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xBOLT)	- (w22 * CIVx * xUSA)				,						
			"Base.AR7",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)				,						
			"Base.Calico_22LR",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSMG)	- (w22 * CIVx * xUSA)				,						
			"Base.American180",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSMG)	- (w22 * CIVx * xUSA)				,						
			"Base.Winchester1903",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xLEVER)	- (w22 * CIVx * xUSA)				,						
			"Base.KRISS22_MK11_Stock",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSMG)	- (w22 * CIVx * xUSA)			- (w22 * CIVx * x90)	,						
			"Base.KRISS22_CRB_Stock",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSMG)	- (w22 * CIVx * xUSA)			- (w22 * CIVx * x90)	,						
			"Base.CMR_30",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)			- (w22 * CIVx * x90)	,						
			"Base.G42",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xEUR)			- (w380 * CIVx * x90)	,						
			"Base.LCP380",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xUSA)			- (w380 * CIVx * x90)	,						
			"Base.BodyGuard380",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xUSA)			- (w380 * CIVx * x90)	,						
			"Base.Bersa85F",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xREST)				,						
			"Base.Colt1903",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xUSA)				,						
			"Base.Makarov380",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xSOV)				,						
			"Base.PPK",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xEUR)				,						
			"Base.HK4_380",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xEUR)				,						
			"Base.VP70",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSMG)	- (w380 * CIVx * xEUR)		- (w380 * CIVx * CIVxMIL)		,						
			"Base.VP70_Stock",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSMG)	- (w380 * CIVx * xEUR)		- (w380 * CIVx * CIVxMIL)		,						
			"Base.Vz61_Fixed",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSMG)	- (w380 * CIVx * xCZE)		- (w380 * CIVx * CIVxMIL)		,						
			"Base.Vz61_Fold",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSMG)	- (w380 * CIVx * xCZE)		- (w380 * CIVx * CIVxMIL)		,						
			"Base.BT380_Stock",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xEUR)			- (w380 * CIVx * x90)	,						
			"Base.FN_57", 	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSEMI)	- (w57 * CIVx * xEUR)			- (w57 * CIVx * x90)	,						
			"Base.FN_57_MK2", 	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSEMI)	- (w57 * CIVx * xEUR)			- (w57 * CIVx * x90)	,						
			"Base.FN_P90",	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSMG)	- (w57 * CIVx * xEUR)	- (w57 * CIVx * CIVxLEO)		- (w57 * CIVx * x90)	,						
			"Base.FN_PS90",	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSMG)	- (w57 * CIVx * xEUR)			- (w57 * CIVx * x90)	,						
			"Base.MPA57DMG",	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSMG)	- (w57 * CIVx * xUSA)			- (w57 * CIVx * x90)	,						
			"Base.MPA57DMG_Carbine",	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSMG)	- (w57 * CIVx * xUSA)			- (w57 * CIVx * x90)	,						
			"Base.AR57_PDW",	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSMG)	- (w57 * CIVx * xUSA)			- (w57 * CIVx * x90)	,						
			"Base.AR57_PDW_Long",	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSMG)	- (w57 * CIVx * xUSA)			- (w57 * CIVx * x90)	,						
			"Base.Ruger_PCC",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.Ruger_PCC_R",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.Ruger_PCC_M",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.HiPoint",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)				,						
			"Base.HiPoint_Carbine",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)				,						
			"Base.STAR_BM", 	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xREST)				,						
			"Base.M39",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)				,						
			"Base.MK22",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)				,						
			"Base.G43",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)			- (w9 * CIVx * x90)	,						
			"Base.CZ75",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)				,						
			"Base.CZ_75b",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)				,						
			"Base.CZ_75_SP01_SS",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)				,						
			"Base.CZ_75_SP01",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)				,						
			"Base.CZ_75_Compact",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)				,						
			"Base.CZ_75_P01",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)				,						
			"Base.CZ_2075",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)			- (w9 * CIVx * x90)	,						
			"Base.CZ_75_Shadow",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)			- (w9 * CIVx * x90)	,						
			"Base.CZ_75_Czechmate",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)			- (w9 * CIVx * x90)	,						
			"Base.EAA_Witness_9",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)				,						
			"Base.EAA_Witness_Long_9",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)				,						
			"Base.G17",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)				,						
			"Base.G18",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.G34", 	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.K5",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xKOR)				,						
			"Base.RPD_92FS",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)	- (w9 * CIVx * CIVxLEO)			,						
			"Base.M9",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)				,						
			"Base.M9A3",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)			- (w9 * CIVx * x90)	,						
			"Base.B93R",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.M5906",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)				,						
			"Base.XD9",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.MP9",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.P226",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)				,						
			"Base.APS",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xSOV)				,						
			"Base.Makarov",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xSOV)				,						
			"Base.PB",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xSOV)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.Luger",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.Luger_WW1",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.Luger_Carbine",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.UZI", 	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xREST)				,						
			"Base.UZI_Wood",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xREST)				,						
			"Base.UZI_Micro",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xREST)				,						
			"Base.BT9_Fold",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)			- (w9 * CIVx * x90)	,						
			"Base.UMP9_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)	- (w9 * CIVx * CIVxLEO)		- (w9 * CIVx * x90)	,						
			"Base.SUB2000",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.MP5_Fixed",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)	- (w9 * CIVx * CIVxLEO)			,						
			"Base.MP5_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)	- (w9 * CIVx * CIVxLEO)			,						
			"Base.MP5SD6_Fixed",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.MP5SD6_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.EVO_Fold",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xCZE)			- (w9 * CIVx * x90)	,						
			"Base.K7_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xKOR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.AUG9",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.KG9",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)				,						
			"Base.Calico_M900_Fold",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)				,						
			"Base.Calico_M950_Pistol",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)				,						
			"Base.Bizon2_01_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xSOV)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.VSS",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xSOV)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.ASVAL",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xSOV)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.M1Carbine",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)				,						
			"Base.M2Carbine",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.M635",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)	- (w9 * CIVx * CIVxLEO)			,						
			"Base.M635S",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)	- (w9 * CIVx * CIVxLEO)			,						
			"Base.M635SD",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.MP7",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)	- (w9 * CIVx * CIVxLEO)		- (w9 * CIVx * x90)	,						
			"Base.Jatimatic",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.Sten",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.Sten_MK2",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.Sten_MK2SD",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.STAR_Z45_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.STAR_Z45_Fixed",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.KRISS9_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.KRISS9_MLOK_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.JW3_TTI_MPX",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.M5238",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xSEMI)	- (w357 * CIVx * xUSA)				,						
			"Base.Taurus856",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xREST)			- (w357 * CIVx * x90)	,						
			"Base.Colt_Service38",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xUSA)				,						
			"Base.GP100_2",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xUSA)				,						
			"Base.GP100_4",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xUSA)				,						
			"Base.GP100_6",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xUSA)				,						
			"Base.K6S",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xUSA)			- (w357 * CIVx * x90)	,						
			"Base.Rhino_200DS",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xEUR)			- (w357 * CIVx * x90)	,						
			"Base.Rhino_40DS",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xEUR)			- (w357 * CIVx * x90)	,						
			"Base.Rhino_60DS",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xEUR)			- (w357 * CIVx * x90)	,						
			"Base.SW_327",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xUSA)			- (w357 * CIVx * x90)	,						
			"Base.M1936",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xUSA)				,						
			"Base.NEF_Handi_38",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xBREAK)	- (w357 * CIVx * xUSA)				,						
			"Base.Marlin_1894",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xLEVER)	- (w357 * CIVx * xUSA)				,						
			"Base.CZ97B",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xCZE)			- (w45 * CIVx * x90)	,						
			"Base.EAA_Witness_45",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xEUR)				,						
			"Base.EAA_Witness_Long_45",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xEUR)				,						
			"Base.G21",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xEUR)				,						
			"Base.XD4",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)			- (w45 * CIVx * x90)	,						
			"Base.MP45",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)			- (w45 * CIVx * x90)	,						
			"Base.P220",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xEUR)				,						
			"Base.M4506",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.HK_MK23",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xEUR)		- (w45 * CIVx * CIVxMIL)		,						
			"Base.HK_USP",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xEUR)				,						
			"Base.HK_USP_Match",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xEUR)				,						
			"Base.PULP_1911",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.PARA1911",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.AMT1911",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.AMT1911_Long",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.M1911_Carbine",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.Colt1911",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.Colt_Kimber",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)			- (w45 * CIVx * x90)	,						
			"Base.Colt_Commander",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.UMP45_Stock",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xEUR)	- (w45 * CIVx * CIVxLEO)		- (w45 * CIVx * x90)	,						
			"Base.MAC10_Fold",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xUSA)				,						
			"Base.KRISS_Stock",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xUSA)			- (w45 * CIVx * x90)	,						
			"Base.Commando",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xBOLT)	- (w45 * CIVx * xEUR)		- (w45 * CIVx * CIVxMIL)		,						
			"Base.Thompson",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xUSA)				,						
			"Base.Thompson_1928",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xUSA)				,						
			"Base.M2Hyde",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xUSA)		- (w45 * CIVx * CIVxMIL)		,						
			"Base.Model55_Fold",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xUSA)		- (w45 * CIVx * CIVxMIL)		,						
			"Base.Model50",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xUSA)		- (w45 * CIVx * CIVxMIL)		,						
			"Base.Colt_Navy_1851",	w44	 * CIVx	- (w44 * x44)	- (w44 * CIVx * xREV)	- (w44 * CIVx * xUSA)				,						
			"Base.M29_44",	w44	 * CIVx	- (w44 * x44)	- (w44 * CIVx * xREV)	- (w44 * CIVx * xUSA)				,						
			"Base.M29_44Carbine",	w44	 * CIVx	- (w44 * x44)	- (w44 * CIVx * xREV)	- (w44 * CIVx * xUSA)				,						
			"Base.Automag",	w44	 * CIVx	- (w44 * x44)	- (w44 * CIVx * xSEMI)	- (w44 * CIVx * xUSA)				,						
			"Base.DEagle",	w44	 * CIVx	- (w44 * x44)	- (w44 * CIVx * xSEMI)	- (w44 * CIVx * xISR)				,						
			"Base.DEagle_Long",	w44	 * CIVx	- (w44 * x44)	- (w44 * CIVx * xSEMI)	- (w44 * CIVx * xISR)				,						
			"Base.DEagle_Hawk",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xSEMI)	- (wBMG * CIVx * xISR)				,						
			"Base.Winchester1866",	w45LC	 * CIVx	- (w44 * x44)	- (w45LC * CIVx * xLEVER)	- (w45LC * CIVx * xUSA)				,						
			"Base.Win_1894",	w44	 * CIVx	- (w44 * x44)	- (w44 * CIVx * xLEVER)	- (w44 * CIVx * xUSA)				,						
			"Base.Colt_Service45",	w45LC	 * CIVx	- (w45LC * x45LC)	- (w45LC * CIVx * xREV)	- (w45LC * CIVx * xUSA)				,						
			"Base.Judge_45LC",	w45LC	 * CIVx	- (w45LC * x45LC)	- (w45LC * CIVx * xREV)	- (w45LC * CIVx * xREST)			- (w45LC * CIVx * x90)	,						
			"Base.Judge513_45LC",	w45LC	 * CIVx	- (w45LC * x45LC)	- (w45LC * CIVx * xREV)	- (w45LC * CIVx * xREST)			- (w45LC * CIVx * x90)	,						
			"Base.Judge513_Long_45LC",	w45LC	 * CIVx	- (w45LC * x45LC)	- (w45LC * CIVx * xREV)	- (w45LC * CIVx * xREST)			- (w45LC * CIVx * x90)	,						
			"Base.TXS_804_45LC",	w45LC	 * CIVx	- (w45LC * x45LC)	- (w45LC * CIVx * xREV)	- (w45LC * CIVx * xREST)				,						
			"Base.Winchester1873",	w45LC	 * CIVx	- (w45LC * x45LC)	- (w45LC * CIVx * xLEVER)	- (w45LC * CIVx * xUSA)				,						
			"Base.Sako85",	w223	 * CIVx	- (w223 * x223)	- (w223 * CIVx * xBOLT)	- (w223 * CIVx * xEUR)				,						
			"Base.MINI14",	w223	 * CIVx	- (w223 * x223)	- (w223 * CIVx * xSEMI)	- (w223 * CIVx * xUSA)				,						
			"Base.MINI14_Stock",	w223	 * CIVx	- (w223 * x223)	- (w223 * CIVx * xSEMI)	- (w223 * CIVx * xUSA)				,						
			"Base.MINI14_T",	w223	 * CIVx	- (w223 * x223)	- (w223 * CIVx * xSEMI)	- (w223 * CIVx * xUSA)	- (w223 * CIVx * CIVxLEO)			,						
			"Base.Viper",	w223	 * CIVx	- (w223 * x223)	- (w223 * CIVx * xLEVER)	- (w223 * CIVx * xREST)			- (w223 * CIVx * x90)	,						
			"Base.Carbon15_97",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.CAR15SMG",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)	- (w556 * CIVx * CIVxLEO)			,						
			"Base.CAR15_Survival",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)	- (w556 * CIVx * CIVxLEO)			,						
			"Base.XM8Compact_Pistol",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.XM8",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.SCARSC_Stock",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.SCARL",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.SCAR_B",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.G33",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.G36",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.G36C",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.G36KV",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.G11K3",	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xAUTO)	- (w57 * CIVx * xEUR)		- (w57 * CIVx * CIVxMIL)	- (w57 * CIVx * x90)	,						
			"Base.MK18",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.AK5C",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.M16A1",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.M16A2",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)				,						
			"Base.M16A3",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.M723",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.XM117",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.H416",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.M4",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.M4A1",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.ADAR",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xSOV)			- (w556 * CIVx * x90)	,						
			"Base.K2C1_PH",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)	- (w556 * CIVx * CIVxLEO)		- (w556 * CIVx * x90)	,						
			"Base.K2_ADVK2",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.K2_Grunt",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.K1A_DEV",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.K1DEV",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.K2_C1",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.K2_1",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.K2_203",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.K1_1",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.DR_200",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)	- (w556 * CIVx * CIVxLEO)		- (w556 * CIVx * x90)	,						
			"Base.LVOA_C",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xSEMI)	- (w556 * CIVx * xUSA)			- (w556 * CIVx * x90)	,						
			"Base.AAC_Honey",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.AAC_HoneySD",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.Bush_AR15_MOE",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xSEMI)	- (w556 * CIVx * xUSA)				,						
			"Base.Bush_XM15",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xSEMI)	- (w556 * CIVx * xUSA)				,						
			"Base.Bush_XM15_Custom",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xSEMI)	- (w556 * CIVx * xUSA)				,						
			"Base.MCX_Virtus",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)			- (w556 * CIVx * x90)	,						
			"Base.MCX_VirtusPatrol",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)			- (w556 * CIVx * x90)	,						
			"Base.MCX_Socom",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.MCX_Spear",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xSEMI)	- (w556 * CIVx * xEUR)			- (w556 * CIVx * x90)	,						
			"Base.ColtM16",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.M16Wood",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)				,						
			"Base.M16Tape",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.FAMAS",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.FAMAS_G2",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.FAMAS_Felin",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.AUG",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)				,						
			"Base.AUG_A3",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)			- (w556 * CIVx * x90)	,						
			"Base.M85_Stock",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xSOV)				,						
			"Base.AN94",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xAUTO)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)		,						
			"Base.AK74",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xAUTO)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)		,						
			"Base.AKS74",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xAUTO)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)		,						
			"Base.AKS74U",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xAUTO)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)		,						
			"Base.AK74_Alpha",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xAUTO)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)	- (w545x39 * CIVx * x90)	,						
			"Base.AK12",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xAUTO)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)	- (w545x39 * CIVx * x90)	,						
			"Base.AK12_New",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xAUTO)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)	- (w545x39 * CIVx * x90)	,						
			"Base.RPK74",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xLMG)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)		,						
			"Base.RPK16",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xLMG)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)	- (w545x39 * CIVx * x90)	,						
			"Base.L85",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.L85A2",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.L86",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.L22",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.F2000",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.Tavor",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xISR)			- (w556 * CIVx * x90)	,						
			"Base.AR18",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)				,						
			"Base.Type20",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xPAC)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.Type89",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xPAC)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.QBZ_95",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xPAC)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.Shrike",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xLMG)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.XM8LMG",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xLMG)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.M249",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xLMG)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.M249E3",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xLMG)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.K3LMG",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xLMG)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.AK47",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.AKM",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.AK103",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)		- (w762x39 * CIVx * CIVxMIL)	- (w762x39 * CIVx * x90)	,						
			"Base.MD65_Stock",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.AKMS_Stock",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.Vz58",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xCZE)				,						
			"Base.Vz58_Stock",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xCZE)				,						
			"Base.Vz58_Mini_Stock",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xCZE)				,						
			"Base.SKS",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xSEMI)	- (w762x39 * CIVx * xSOV)				,						
			"Base.SKS_PARA",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xSEMI)	- (w762x39 * CIVx * xPAC)				,						
			"Base.MK47",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xSEMI)	- (w762x39 * CIVx * xUSA)			- (w762x39 * CIVx * x90)	,						
			"Base.AKM_Custom",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xUSA)			- (w762x39 * CIVx * x90)	,						
			"Base.AK74_Custom",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xLMG)	- (w545x39 * CIVx * xSOV)			- (w545x39 * CIVx * x90)	,						
			"Base.Ots14_1A_01",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.Ots14_1A_02",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.Ots14_4A",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.Ots14_4A_01",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.Ots14_4A_03",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.Ots14_4A_GL",	wGREN	 * CIVx	- (wGREN * xGREN)	- (wGREN * CIVx * xAUTO)	- (wGREN * CIVx * xSOV)		- (wGREN * CIVx * CIVxMIL)		,						
			"Base.AK308",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xSOV)			- (w308 * CIVx * x90)	,						
			"Base.SCARH",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)	- (w308 * CIVx * x90)	,						
			"Base.SCAR20",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)	- (w308 * CIVx * x90)	,						
			"Base.G28",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)	- (w308 * CIVx * x90)	,						
			"Base.G3",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.PSG1",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xSEMI)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.MSG90",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xSEMI)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.Type64",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xPAC)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.FAL",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.FAL_PARA_Stock",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.FN_FNC",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.WA2000",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xEUR)				,						
			"Base.SVD",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xSEMI)	- (w762x54r * CIVx * xSOV)		- (w762x54r * CIVx * CIVxMIL)		,						
			"Base.SVDK",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xSEMI)	- (w762x54r * CIVx * xSOV)		- (w762x54r * CIVx * CIVxMIL)		,						
			"Base.SV_98",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xBOLT)	- (w762x54r * CIVx * xSOV)		- (w762x54r * CIVx * CIVxMIL)		,						
			"Base.OTS_03_SVU",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xBOLT)	- (w762x54r * CIVx * xSOV)		- (w762x54r * CIVx * CIVxMIL)	- (w762x54r * CIVx * x90)	,						
			"Base.M14EBR",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xUSA)	- (w308 * CIVx * CIVxLEO)		- (w308 * CIVx * x90)	,						
			"Base.M14",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xUSA)				,						
			"Base.K14",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xKOR)		- (w308 * CIVx * CIVxMIL)	- (w308 * CIVx * x90)	,						
			"Base.Savage12",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xUSA)				,						
			"Base.Ruger_No1_3006",	w3006	 * CIVx	- (w3006 * x3006)	- (w3006 * CIVx * xBREAK)	- (w3006 * CIVx * xUSA)				,						
			"Base.M40",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xUSA)				,						
			"Base.M40A1",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xUSA)				,						
			"Base.M40A2",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xUSA)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.M40A3",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xUSA)	- (w308 * CIVx * CIVxLEO)			,						
			"Base.M46_Mauser",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xBOLT)	- (w762x54r * CIVx * xPAC)				,						
			"Base.Mosin",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xBOLT)	- (w762x54r * CIVx * xSOV)				,						
			"Base.MosinObrez_Pistol",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xBOLT)	- (w762x54r * CIVx * xSOV)				,						
			"Base.M1",	w3006	 * CIVx	- (w3006 * x3006)	- (w3006 * CIVx * xSEMI)	- (w3006 * CIVx * xUSA)				,						
			"Base.M1903",	w3006	 * CIVx	- (w3006 * x3006)	- (w3006 * CIVx * xBOLT)	- (w3006 * CIVx * xUSA)				,						
			"Base.BAR",	w3006	 * CIVx	- (w3006 * x3006)	- (w3006 * CIVx * xAUTO)	- (w3006 * CIVx * xUSA)		- (w3006 * CIVx * CIVxMIL)		,						
			"Base.BAR_Monitor",	w3006	 * CIVx	- (w3006 * x3006)	- (w3006 * CIVx * xAUTO)	- (w3006 * CIVx * xUSA)		- (w3006 * CIVx * CIVxMIL)		,						
			"Base.MAS36",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.MAS44",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.MAS49",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.Win_1895",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xLEVER)	- (w308 * CIVx * xUSA)				,						
			"Base.Galil",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xISR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.Galil_Sniper",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xISR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.Thompson_Center_3006",	w3006	 * CIVx	- (w3006 * x3006)	- (w3006 * CIVx * xBREAK)	- (w3006 * CIVx * xUSA)				,						
			"Base.Type38",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xPAC)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.Type99",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xPAC)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.L96",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xEUR)				,						
			"Base.M240",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xLMG)	- (w308 * CIVx * xUSA)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.G21LMG",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xLMG)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)	- (w308 * CIVx * x90)	,						
			"Base.K12",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xLMG)	- (w308 * CIVx * xKOR)		- (w308 * CIVx * CIVxMIL)	- (w308 * CIVx * x90)	,						
			"Base.PKM",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xLMG)	- (w762x54r * CIVx * xSOV)		- (w762x54r * CIVx * CIVxMIL)		,						
			"Base.MG42",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xLMG)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.M60",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xLMG)	- (w308 * CIVx * xUSA)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.MK43",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xLMG)	- (w308 * CIVx * xUSA)		- (w308 * CIVx * CIVxMIL)	- (w308 * CIVx * x90)	,						
			"Base.RPD",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xLMG)	- (w762x39 * CIVx * xSOV)		- (w762x39 * CIVx * CIVxMIL)		,						
			"Base.DSHK_Fold",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xMINI)	- (wBMG * CIVx * xSOV)		- (wBMG * CIVx * CIVxMIL)		,						
			"Base.BOAR",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBREAK)	- (wBMG * CIVx * xUSA)				,						
			"Base.EDM96",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBOLT)	- (wBMG * CIVx * xUSA)	- (wBMG * CIVx * CIVxLEO)		- (wBMG * CIVx * x90)	,						
			"Base.M82",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xSEMI)	- (wBMG * CIVx * xUSA)		- (wBMG * CIVx * CIVxMIL)		,						
			"Base.BFG50",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBREAK)	- (wBMG * CIVx * xUSA)			- (wBMG * CIVx * x90)	,						
			"Base.Harris50",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBOLT)	- (wBMG * CIVx * xUSA)				,						
			"Base.TAC50",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBOLT)	- (wBMG * CIVx * xUSA)		- (wBMG * CIVx * CIVxMIL)		,						
			"Base.CheyTac50",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBOLT)	- (wBMG * CIVx * xUSA)		- (wBMG * CIVx * CIVxMIL)	- (wBMG * CIVx * x90)	,						
			"Base.Gepard_M6",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBOLT)	- (wBMG * CIVx * xEUR)		- (wBMG * CIVx * CIVxMIL)		,						
			"Base.OSV_96",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBOLT)	- (wBMG * CIVx * xSOV)		- (wBMG * CIVx * CIVxMIL)	- (wBMG * CIVx * x90)	,						
			"Base.Ash",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xAUTO)	- (wBMG * CIVx * xSOV)		- (wBMG * CIVx * CIVxMIL)	- (wBMG * CIVx * x90)	,						
			"Base.VSSK",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBOLT)	- (wBMG * CIVx * xSOV)		- (wBMG * CIVx * CIVxMIL)	- (wBMG * CIVx * x90)	,						
			"Base.SW_M500",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xREV)	- (wBMG * CIVx * xUSA)			- (wBMG * CIVx * x90)	,						
			"Base.SPAS12_Fixed",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xEUR)	- (w12g * CIVx * CIVxLEO)			,						
			"Base.SPAS12_Fold",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xEUR)	- (w12g * CIVx * CIVxLEO)			,						
			"Base.Origin",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xUSA)			- (w12g * CIVx * x90)	,						
			"Base.SPAS_15",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xEUR)				,						
			"Base.USAS_12",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xAUTO)	- (w12g * CIVx * xKOR)		- (w12g * CIVx * CIVxMIL)		,						
			"Base.Shorty_Pistol",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)		- (w12g * CIVx * x90)	,						
			"Base.R11_87",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xUSA)				,						
			"Base.M870",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)				,						
			"Base.M1897",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)				,						
			"Base.DT11",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xBREAK)	- (w12g * CIVx * xEUR)				,						
			"Base.Coachgun",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xBREAK)	- (w12g * CIVx * xUSA)				,						
			"Base.Terminator",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xBREAK)	- (w12g * CIVx * xUSA)				,						
			"Base.SIX12",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xREV)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)		- (w12g * CIVx * x90)	,						
			"Base.SIX12SD",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xREV)	- (w12g * CIVx * xUSA)		- (w12g * CIVx * CIVxMIL)	- (w12g * CIVx * x90)	,						
			"Base.M870_Wingmaster",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)				,						
			"Base.M870_Police",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)			,						
			"Base.M870_MCS",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)			,						
			"Base.M870_CQB",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)			,						
			"Base.M870_Breaching_Pistol",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)			,						
			"Base.M870_Express",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)				,						
			"Base.Ithaca_M37",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)				,						
			"Base.AUTO_5",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xUSA)				,						
			"Base.A400",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xEUR)			- (w12g * CIVx * x90)	,						
			"Base.M1014",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xEUR)			- (w12g * CIVx * x90)	,						
			"Base.M1014_Fold",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xEUR)			- (w12g * CIVx * x90)	,						
			"Base.M1014_Wick",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xEUR)			- (w12g * CIVx * x90)	,						
			"Base.DAO12",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xREV)	- (w12g * CIVx * xREST)	- (w12g * CIVx * CIVxLEO)			,						
			"Base.M1887",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xLEVER)	- (w12g * CIVx * xUSA)				,						
			"Base.M1208",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xREV)	- (w12g * CIVx * xUSA)			- (w12g * CIVx * x90)	,						
			"Base.M1212",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xREV)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)		- (w12g * CIVx * x90)	,						
			"Base.M1216",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xREV)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)		- (w12g * CIVx * x90)	,						
			"Base.AA12",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xAUTO)	- (w12g * CIVx * xUSA)		- (w12g * CIVx * CIVxMIL)	- (w12g * CIVx * x90)	,						
			"Base.CAWS",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xAUTO)	- (w12g * CIVx * xEUR)		- (w12g * CIVx * CIVxMIL)		,						
			"Base.ROYAL_SXS",	w10g	 * CIVx	- (w10g * x10g)	- (w10g * CIVx * xBREAK)	- (w10g * CIVx * xEUR)				,						
			"Base.KS23",	w4g	 * CIVx	- (w4g * x4g)	- (w4g * CIVx * xPUMP)	- (w4g * CIVx * xSOV)				,						
			"Base.KS23_S_Pistol",	w4g	 * CIVx	- (w4g * x4g)	- (w4g * CIVx * xPUMP)	- (w4g * CIVx * xSOV)				,						
			"Base.Triple_Crown",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xBREAK)	- (w12g * CIVx * xEUR)				,						
			"Base.Moss500_20",	w20g	 * CIVx	- (w20g * x20g)	- (w20g * CIVx * xPUMP)	- (w20g * CIVx * xUSA)				,						
			"Base.10855_Silver",	w20g	 * CIVx	- (w20g * x20g)	- (w20g * CIVx * xSEMI)	- (w20g * CIVx * xEUR)				,						
			"Base.Colt1855",	w20g	 * CIVx	- (w20g * x20g)	- (w20g * CIVx * xREV)	- (w20g * CIVx * xUSA)				,						
			"Base.TOZ106",	w20g	 * CIVx	- (w20g * x20g)	- (w20g * CIVx * xBOLT)	- (w20g * CIVx * xSOV)				,						
			"Base.TOZ194_Pistol",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xSOV)				,						
			"Base.Saiga12",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xAUTO)	- (w12g * CIVx * xSOV)			- (w12g * CIVx * x90)	,						
			"Base.Saiga12_Long",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xAUTO)	- (w12g * CIVx * xSOV)			- (w12g * CIVx * x90)	,						
			"Base.Saiga12_Tromix",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xAUTO)	- (w12g * CIVx * xSOV)		- (w12g * CIVx * CIVxMIL)	- (w12g * CIVx * x90)	,						
			"Base.MP133",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xSOV)			- (w12g * CIVx * x90)	,						
			"Base.MP133S_Pistol",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xSOV)			- (w12g * CIVx * x90)	,						
			"Base.KSG",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)			- (w12g * CIVx * x90)	,						
			"Base.KSG25",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)			- (w12g * CIVx * x90)	,						
			"Base.UTS15",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xREST)			- (w12g * CIVx * x90)	,						
			"Base.EX41_HE",	wGREN	 * CIVx		- (wGREN * CIVx * xGREN)	- (wGREN * CIVx * xUSA)		- (wGREN * CIVx * CIVxMIL)		,						
			"Base.Federal_HE",	wGREN	 * CIVx		- (wGREN * CIVx * xGREN)	- (wGREN * CIVx * xUSA)		- (wGREN * CIVx * CIVxMIL)		,						
			"Base.M32_HE",	wGREN	 * CIVx		- (wGREN * CIVx * xGREN)	- (wGREN * CIVx * xUSA)		- (wGREN * CIVx * CIVxMIL)		,						
			"Base.GM94_HE",	wGREN	 * CIVx		- (wGREN * CIVx * xGREN)	- (wGREN * CIVx * xSOV)		- (wGREN * CIVx * CIVxMIL)	- (wGREN * CIVx * x90)	,						
			"Base.K11",	wGREN	 * CIVx	- (wGREN * CIVx * xAUTO)	- (wGREN * CIVx * xGREN)	- (wGREN * CIVx * xKOR)		- (wGREN * CIVx * CIVxMIL)	- (wGREN * CIVx * x90)	,						
			"Base.M72_LAW",	wGREN	 * CIVx		- (wGREN * CIVx * xGREN)	- (wGREN * CIVx * xUSA)		- (wGREN * CIVx * CIVxMIL)		,						
			"Base.RPG_7",	wGREN	 * CIVx		- (wGREN * CIVx * xGREN)	- (wGREN * CIVx * xSOV)		- (wGREN * CIVx * CIVxMIL)		,						
			"Base.XM214",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xMINI)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.GAU17",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xMINI)	- (w308 * CIVx * xUSA)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.GAU19",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xMINI)	- (wBMG * CIVx * xUSA)		- (wBMG * CIVx * CIVxMIL)		,						
			"Base.TAC15",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.HortonScout_125",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.MissionMXB_400",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.TenPointTurbo_XLT",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.HZRedback_RTS",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.Genesis_X_Bow",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.Genesis_Bow",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.Genesis_Mini_Bow",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.BowTechSR_350",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.HoytSpectra_1000",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.SlingShot_Rock",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.WristRocket_Rock",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.M2A1",	wFLAME	 * CIVx		- (wFLAME * CIVx * xFLAME)	- (wFLAME * CIVx * xUSA)		- (wFLAME * CIVx * CIVxMIL)		,						
			"Base.Musk",	wFLAME	 * CIVx		- (wFLAME * CIVx * xFLAME)	- (wFLAME * CIVx * xUSA)			- (wFLAME * CIVx * x90)	,						
		},																
		dontSpawnAmmo = 		 CIVammo	,													
	},																	
																		
	GunStoreParts = {																	
		rolls =	GUNRollPART	,														
		items = {																
			"Base.Launcher",	Part		- (wGREN * xGREN)		- (Part * xUSA)		- (Part * CIVxMIL)		,						
			"Base.Launcher2",	Part		- (wGREN * xGREN)		- (Part * xSOV)		- (Part * CIVxMIL)		,						
			"Base.Bipod",	Part		- (Part * xPart)						,						
			"Base.Ammobelt",	Part		- (Part * xPart)						,						
			"Base.Sling_1",	Part		- (Part * xPart)						,						
			"Base.Sling_2",	Part		- (Part * xPart)						,						
			"Base.Sling_3",	Part		- (Part * xPart)						,						
			"Base.ForeGrip",	Part		- (Part * xPart)						,						
			"Base.Grip_Magpul",	Part		- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_MLOK",	Part		- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_TG",	Part		- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_BCM",	Part		- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_Fold",	Part		- (Part * xPart)						,						
			"Base.Light_Small",	Light		- (Light * xLight)						,						
			"Base.Light_Medium_M952V",	Light		- (Light * xLight)						,						
			"Base.Laser_Green",	Light		- (Light * xLight)						,						
			"Base.Laser_Red",	Light		- (Light * xLight)						,						
			"Base.Laser_DVAL",	Light		- (Light * xLight)			- (Light * CIVxLEO)			,						
			"Base.Laser_PEQ15",	Light		- (Light * xLight)				- (Light * CIVxMIL)		,						
			"Base.Light_Small_Socom",	Light		- (Light * xLight)				- (Light * CIVxMIL)		,						
			"Base.Light_Small_TLR_7AH",	Light		- (Light * xLight)						,						
			"Base.Light_Medium_M900",	Light		- (Light * xLight)						,						
			"Base.Suppressor_Pistol",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)		,						
			"Base.Suppressor_Rifle",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)		,						
			"Base.Suppressor_Shotgun",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)		,						
			"Base.Suppressor_BMG",	Suppress		- (Suppress * xSuppress)	- (wBMG * xBMG)			- (Suppress * CIVxMIL)		,						
			"Base.Suppressor_Socom_Pistol",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)		,						
			"Base.Suppressor_NorthStar_Pistol",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)		,						
			"Base.Suppressor_PBS1_Rifle",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)		,						
			"Base.Suppressor_PBS4_Rifle",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)		,						
			"Base.Suppressor_ROME_BMG",	Suppress		- (Suppress * xSuppress)	- (wBMG * xBMG)			- (Suppress * CIVxMIL)		,						
			"Base.Bayonet_M4",	Part		- (Part * xPart)						,						
			"Base.Bayonet_AK",	Part		- (Part * xPart)		- (Part * xSOV)				,						
			"Base.Bayonet_M1917",	Part		- (Part * xPart)						,						
			"Base.Bayonet_Type30",	Part		- (Part * xPart)						,						
			"Base.Choke_Full",	Part		- (Part * xPart)						,						
			"Base.Choke_Full_Dbl",	Part		- (Part * xPart)						,						
			"Base.Compensator",	Part		- (Part * xPart)						,						
			"Base.LinearComp_Noveske",	Part		- (Part * xPart)						,						
			"Base.MuzzleBrake",	Part		- (Part * xPart)						,						
			"Base.MuzzleBrake_DK1",	Part		- (Part * xPart)						,						
			"Base.MuzzleBrake_DK2",	Part		- (Part * xPart)						,						
			"Base.Pad",	Part		- (Part * xPart)						,						
			"Base.Carrier_12g",	Part		- (Part * xPart)						,						
			"Base.GhostRing",	Optic		- (Optic * xOptic)						,						
			"Base.Sight_MicroDot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_RaceDot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Phantom_XL",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_OKP7_Reflex",	Optic		- (Optic * xOptic)		- (Optic * xSOV)			- (Optic * x90)	,						
			"Base.Sight_SRS",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_EOTech",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_3xEOTech",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_4xACOG",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_4xACOG_ECO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_6xELCAN",	Optic		- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_6xHensoldt",	Optic		- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_KOBRA",	Optic		- (Optic * xOptic)		- (Optic * xSOV)				,						
			"Base.Scope_4xPSO",	Optic		- (Optic * xOptic)		- (Optic * xSOV)				,						
			"Base.Scope_12xPSO",	Optic		- (Optic * xOptic)		- (Optic * xSOV)				,						
			"Base.Scope_1-4x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_Trijicon_1-6x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_TANGO6T_1-6x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_20x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Thermal",	Optic		- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * CIVxMIL)		,						
			"Base.Sight_Thermal_AK",	Optic		- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * CIVxMIL)		,						
			"Base.Sight_Aimpoint",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Aimpoint_Dot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Fiber_Shotgun",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Mepro_M21",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_Mepro_MOR",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_UH1",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_C79",	Optic		- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_SUSAT",	Optic		- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_Raven",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_G28_Scope",	Optic		- (Optic * xOptic)		- (Optic * xEUR)	- (Optic * CIVxLEO)	- (Optic * CIVxMIL)		,						
			"Base.Scope_ATACR7_F1",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_ATACR7_F1r",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_ACRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_MRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_SRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_Nikon",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_M8",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_VX3",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_1P87",	Optic		- (Optic * xOptic)		- (Optic * xSOV)				,						
			"Base.Sight_1P63",	Optic		- (Optic * xOptic)		- (Optic * xSOV)				,						
			"Base.Sight_Brownells",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_L2",	Optic		- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_Malcom",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_LUX",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_NO32",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_PKAS",	Optic		- (Optic * xOptic)		- (Optic * xSOV)				,						
			"Base.Sight_PU",	Optic		- (Optic * xOptic)		- (Optic * xSOV)				,						
			"Base.Sight_XPS",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_PVS4",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Burris_NV",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Armasight_NV",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Barrel_308",	w308	- (w308 * xBREAK)	- (w308 * xPart)	- (w308 * x308)	- (w308 * xUSA)				,						
			"Base.Barrel_3006",	w3006	- (w3006 * xBREAK)	- (w3006 * xPart)	- (w3006 * x3006)	- (w3006 * xUSA)				,						
			"Base.Barrel_4570",	w4570	- (w4570 * xBREAK)	- (w4570 * xPart)	- (w4570 * x4570)	- (w4570 * xUSA)				,						
			"Base.Barrel_357",	w357	- (w357 * xBREAK)	- (w357 * xPart)	- (w357 * x357)	- (w357 * xUSA)				,						
			"Base.Barrel_357_Short",	w357	- (w357 * xBREAK)	- (w357 * xPart)	- (w357 * x357)	- (w357 * xUSA)				,						
			"Base.Barrel_45LC",	w45LC	- (w45LC * xBREAK)	- (w45LC * xPart)	- (w45LC * x45LC)	- (w45LC * xUSA)				,						
			"Base.Barrel_45LC_Short",	w45LC	- (w45LC * xBREAK)	- (w45LC * xPart)	- (w45LC * x45LC)	- (w45LC * xUSA)				,						
			"Base.TriggerGroup_AR",	Part	- (Part * xAUTO)	- (Part * xPart)		- (Part * xUSA)				,						
			"Base.TriggerGroup_AK",	Part	- (Part * xAUTO)	- (Part * xPart)		- (Part * xSOV)				,						
			"Base.TriggerGroup_HK",	Part	- (Part * xAUTO)	- (Part * xPart)		- (Part * xEUR)				,						
			"Base.TriggerGroup_FN",	Part	- (Part * xAUTO)	- (Part * xPart)		- (Part * xEUR)				,						
			"Base.Switch_Striker_Black",	Part 	- (Part  * xAUTO)	- (Part * xPart)		- (Part  * xUSA)			- (Part  * x90)	,						
			"Base.Switch_Striker_Red",	Part	- (Part * xAUTO)	- (Part * xPart)		- (Part * xUSA)			- (Part * x90)	,						
			"Base.Switch_Striker_Blue",	Part	- (Part * xAUTO)	- (Part * xPart)		- (Part * xUSA)			- (Part * x90)	,						
			"Base.Switch_Striker_Green",	Part	- (Part * xAUTO)	- (Part * xPart)		- (Part * xUSA)			- (Part * x90)	,						
			"Base.Grip_G10_Blue",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_G10_Brown",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * CIVxLEO)			,						
			"Base.Grip_G10_Black",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * CIVxLEO)			,						
			"Base.Grip_G10_Red",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_G10_Green",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * CIVxLEO)			,						
			"Base.Grip_G10_Pink",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_Alloy_Black",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * CIVxLEO)			,						
			"Base.Grip_Alloy_Silver",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_Alloy_Blue",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_Alloy_Red",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_Wood",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_Punisher",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * CIVxLEO)			,						
			"Base.Grip_Spartan",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * CIVxLEO)			,						
			"Base.Grip_Ivory",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * CIVxLEO)			,						
			"Base.Grip_Carbon",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.38Speed",	StdMag	* w357 - (StdMag * xStdMag)	- (w357 * x357)	- (StdMag * xREV)					,						
			"Base.44Speed",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)	- (StdMag * xREV)					,						
			"Base.SRM1208_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * x90)	,						
			"Base.SRM1212_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * CIVxLEO)		- (StdMag * x90)	,						
			"Base.SRM1216_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * CIVxLEO)		- (StdMag * x90)	,						
			"Base.SIX12_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * x90)	,						
			"Base.CP33Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)		- (StdMag * xUSA)			- (StdMag * x90)	,						
			"Base.CP33_17MagBase",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)		- (ExtMag * xUSA)			- (ExtMag * x90)	,						
			"Base.22Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)						,						
			"Base.22ExtClip",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)						,						
			"Base.380Clip",	StdMag	* w380 - (StdMag * xStdMag)	- (w380 * x380)						,						
			"Base.380StdClip",	StdMag	* w380 - (StdMag * xStdMag)	- (w380 * x380)						,						
			"Base.380ExtClip",	ExtMag	* w380 - (ExtMag * xExtMag)	- (w380 * x380)						,						
			"Base.9mmSSClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)						,						
			"Base.9mmSSExtClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)						,						
			"Base.9mmClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)						,						
			"Base.9mmExtClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)						,						
			"Base.45DSClip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)						,						
			"Base.45DSExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)						,						
			"Base.45Clip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)						,						
			"Base.45ExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)						,						
			"Base.44Clip",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)						,						
			"Base.50Clip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)						,						
			"Base.223StdClip",	StdMag	* w223 - (StdMag * xStdMag)	- (w223 * x223)						,						
			"Base.223ExtClip",	ExtMag	* w223 - (ExtMag * xExtMag)	- (w223 * x223)						,						
			"Base.556Clip",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)						,						
			"Base.308StdClip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)						,						
			"Base.308ExtClip",	ExtMag	* w308 - (ExtMag * xExtMag)	- (w308 * x308)						,						
			"Base.3006ExtClip",	ExtMag	* w3006 - (ExtMag * xExtMag)	- (w3006 * x3006)		- (ExtMag * xUSA)				,						
			"Base.SVDClip",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)		- (StdMag * xSOV)				,						
			"Base.ASHClip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xSOV)		- (StdMag * CIVxMIL)	- (StdMag * x90)	,						
			"Base.M82Clip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xUSA)		- (StdMag * CIVxMIL)		,						
			"Base.M1Clip",	StdMag	* w3006 - (StdMag * xStdMag)	- (w3006 * x3006)		- (StdMag * xUSA)				,						
			"Base.SKSClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)		- (StdMag * xSOV)				,						
			"Base.1903Clip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)						,						
			"Base.545StdClip",	StdMag	* w545x39 - (StdMag * xStdMag)	- (w545x39 * x545x39)		- (StdMag * xSOV)				,						
			"Base.AKClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)						,						
			"Base.ASVALClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)		- (ExtMag * xSOV)				,						
			"Base.VSSClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)		- (StdMag * xSOV)				,						
			"Base.57Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)			- (StdMag * x90)	,						
			"Base.P90Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)			- (StdMag * x90)	,						
			"Base.22Drum",	DrumMag	* w22 - (DrumMag * xDrumMag)	- (w22 * x22)						,						
			"Base.9mmDrum",	DrumMag	* w9 - (DrumMag * xDrumMag)	- (w9 * x9)						,						
			"Base.45Drum",	DrumMag	* w45 - (DrumMag * xDrumMag)	- (w45 * x45)						,						
			"Base.556Drum",	DrumMag	* w556 - (DrumMag * xDrumMag)	- (w556 * x556)						,						
			"Base.545Drum",	DrumMag	* w545x39 - (DrumMag * xDrumMag)	- (w545x39 * x545x39)		- (DrumMag * xSOV)				,						
			"Base.762Drum",	DrumMag	* w762x39 - (DrumMag * xDrumMag)	- (w762x39 * x762x39)						,						
			"Base.12gDrum",	DrumMag	* w12g - (DrumMag * xDrumMag)	- (w12g * x12g)						,						
			"Base.308Belt",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wLMG * xLMG)			- (StdMag * CIVxMIL)		,						
			"Base.556Belt",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wLMG * xLMG)			- (StdMag * CIVxMIL)		,						
			"Base.762x39Belt",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)	- (wLMG * xLMG)			- (StdMag * CIVxMIL)		,						
			"Base.762x54rBelt",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)	- (wLMG * xLMG)	- (StdMag * xSOV)		- (StdMag * CIVxMIL)		,						
			"Base.556MiniCan",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * CIVxMIL)		,						
			"Base.308MiniCan",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * CIVxMIL)		,						
			"Base.50MiniCan",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * CIVxMIL)		,						
			"Base.M2A1_Tank",	ExtMag	* wFLAME - (ExtMag * xExtMag)	- (wFLAME * xFLAME)		- (ExtMag * xUSA)		- (ExtMag * CIVxMIL)		,						
			"Base.M2A1_Can",	StdMag	* wFLAME - (StdMag * xStdMag)	- (wFLAME * xFLAME)		- (StdMag * xUSA)		- (StdMag * CIVxMIL)		,						
			"Base.M2A1_Can",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)				,						
			"Base.Standard_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)				,						
			"Base.Large_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)				,						
			"Base.RussianMachete",	LgKnife		- (LgKnife * xLgKnife)		- (LgKnife * xSOV)				,						
			"Base.BGMachete",	LgKnife		- (LgKnife * xLgKnife)		- (LgKnife * xUSA)				,						
			"Base.RamboKnife",	LgKnife		- (LgKnife * xLgKnife)		- (LgKnife * xUSA)				,						
			"Base.Butterfly",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xPAC)				,						
			"Base.PushDagger",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xUSA)				,						
			"Base.Karambit",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xPAC)				,						
			"Base.ThrowingKnife",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xUSA)				,						
			"Base.NinjaStar",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xPAC)				,						
			"Base.Tactical_Axe",	Axe		- (Axe * xAxe)		- (Axe * xUSA)				,						
			"Base.Tactical_Sickle",	Axe		- (Axe * xAxe)		- (Axe * xUSA)				,						
			"Base.Trench_Axe",	Axe		- (Axe * xAxe)		- (Axe * xEUR)	- (Axe * CIVxLEO)	- (Axe * CIVxMIL)		,						
			"Base.Broad_Axe",	Axe		- (Axe * xAxe)		- (Axe * xEUR)	- (Axe * CIVxLEO)	- (Axe * CIVxMIL)		,						
			"Base.DingDong",	Blunt		- (Blunt * xBlunt)		- (Blunt * xUSA)	- (Blunt * CIVxLEO)			,						
			"Base.MilitaryBaton",	Blunt		- (Blunt * xBlunt)		- (Blunt * xUSA)		- (Blunt * CIVxMIL)		,						
			"Base.ASP_B",	Blunt		- (Blunt * xBlunt)		- (Blunt * xUSA)	- (Blunt * CIVxLEO)			,						
			"Base.KillBill",	Sword		- (Sword * xSword)		- (Sword * xPAC)				,						
			"Base.CH_WarSword",	Sword		- (Sword * xSword)		- (Sword * xPAC)				,						
			"Base.Conan_Sword",	Sword		- (Sword * xSword)		- (Sword * xUSA)				,						
		}																
	},																	
																		
	GunStoreAmmo = {																	
		rolls =	GUNRollAMMO	,														
		items = {																
			"Base.AmmoCan30_22",	AmmoCan		* w22	- (AmmoCan * x22)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_380",	AmmoCan		* w380	- (AmmoCan * x380)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_57",	AmmoCan		* w57	- (AmmoCan * x57)	- (AmmoCan * xAmmoCan)			- (AmmoCan * x90)	,						
			"Base.AmmoCan30_9",	AmmoCan		* w9	- (AmmoCan * x9)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_38",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_357",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_45",	AmmoCan		* w45	- (AmmoCan * x45)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_44",	AmmoCan		* w44	- (AmmoCan * x44)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_45LC",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_4570",	AmmoCan		* w4570	- (AmmoCan * x4570)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_50MAG",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)			- (AmmoCan * x90)	,						
			"Base.AmmoCan50_223",	AmmoCan		* w223	- (AmmoCan * x223)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_556",	AmmoCan		* w556	- (AmmoCan * x556)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_762x39",	AmmoCan		* w762x39	- (AmmoCan * x762x39)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_545x39",	AmmoCan		* w545x39	- (AmmoCan * x545x39)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_762x54r",	AmmoCan		* w762x54r	- (AmmoCan * x762x54r)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_308",	AmmoCan		* w308	- (AmmoCan * x308)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_3006",	AmmoCan		* w3006	- (AmmoCan * x3006)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_410",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_20",	AmmoCan		* w20g	- (AmmoCan * x20g)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_12",	AmmoCan		* w12g	- (AmmoCan * x12g)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_10",	AmmoCan		* w10g	- (AmmoCan * x10g)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_4",	AmmoCan		* w4g	- (AmmoCan * x4g)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_50",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * CIVxMIL)		,						
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * CIVxMIL)		,						
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * CIVxMIL)		,						
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * CIVxMIL)		,						
			"Base.AmmoCan50_ROCKET",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * CIVxMIL)		,						
			"Base.BB177Box",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)				,						
			"Base.CO2_Cartridge_Box",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)				,						
			"Base.PB68Bag",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets22Box",	AmmoBox		* w22	- (AmmoBox * x22)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets380Box",	AmmoBox		* w380	- (AmmoBox * x380)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets57Box",	AmmoBox		* w57	- (AmmoBox * x57)	- (AmmoBox * xAmmoBox)			- (AmmoBox * x90)	,						
			"Base.Bullets9mmBox",	AmmoBox		* w9	- (AmmoBox * x9)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets38Box",	AmmoBox		* w357	- (AmmoBox * x357)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets357Box",	AmmoBox		* w357	- (AmmoBox * x357)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets45Box",	AmmoBox		* w45	- (AmmoBox * x45)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets44Box",	AmmoBox		* w44	- (AmmoBox * x44)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets45LCBox",	AmmoBox		* w45LC	- (AmmoBox * x45LC)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets4570Box",	AmmoBox		* w4570	- (AmmoBox * x4570)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets50MAGBox",	AmmoBox		* wBMG	- (AmmoBox * xBMG)	- (AmmoBox * xAmmoBox)			- (AmmoBox * x90)	,						
			"Base.223Box",	AmmoBox		* w223	- (AmmoBox * x223)	- (AmmoBox * xAmmoBox)				,						
			"Base.556Box",	AmmoBox		* w556	- (AmmoBox * x556)	- (AmmoBox * xAmmoBox)				,						
			"Base.762x39Box",	AmmoBox		* w762x39	- (AmmoBox * x762x39)	- (AmmoBox * xAmmoBox)				,						
			"Base.545x39Box",	AmmoBox		* w545x39	- (AmmoBox * x545x39)	- (AmmoBox * xAmmoBox)				,						
			"Base.762x54rBox",	AmmoBox		* w762x54r	- (AmmoBox * x762x54r)	- (AmmoBox * xAmmoBox)				,						
			"Base.308Box",	AmmoBox		* w308	- (AmmoBox * x308)	- (AmmoBox * xAmmoBox)				,						
			"Base.3006Box",	AmmoBox		* w3006	- (AmmoBox * x3006)	- (AmmoBox * xAmmoBox)				,						
			"Base.410gShotgunShellsBox",	AmmoBox		* w45LC	- (AmmoBox * x45LC)	- (AmmoBox * xAmmoBox)				,						
			"Base.20gShotgunShellsBox",	AmmoBox		* w20g	- (AmmoBox * x20g)	- (AmmoBox * xAmmoBox)				,						
			"Base.ShotgunShellsBox",	AmmoBox		* w12g	- (AmmoBox * x12g)	- (AmmoBox * xAmmoBox)				,						
			"Base.10gShotgunShellsBox",	AmmoBox		* w10g	- (AmmoBox * x10g)	- (AmmoBox * xAmmoBox)				,						
			"Base.4gShotgunShellsBox",	AmmoBox		* w4g	- (AmmoBox * x4g)	- (AmmoBox * xAmmoBox)				,						
			"Base.50BMGBox",	AmmoBox		* wBMG	- (AmmoBox * xBMG)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bolt_Bear",	AmmoBox		* wBOW	- (AmmoBox * xBOW)					,						
			"Base.Bolt_Bear_Pack",	AmmoBox		* wBOW	- (AmmoBox * xBOW)	- (AmmoBox * xAmmoBox)				,						
			"Base.Arrow_Fiberglass",	AmmoBox		* wBOW	- (AmmoBox * xBOW)					,						
			"Base.Arrow_Fiberglass_Pack",	AmmoBox		* wBOW	- (AmmoBox * xBOW)	- (AmmoBox * xAmmoBox)				,						
			"Base.40HERound",	AmmoBox		* wGREN	- (AmmoBox * xGREN)			- (AmmoBox * CIVxMIL)		,						
			"Base.40INCRound",	AmmoBox		* wGREN	- (AmmoBox * xGREN)			- (AmmoBox * CIVxMIL)		,						
			"Base.HERocket",	AmmoBox		* wGREN	- (AmmoBox * xGREN)			- (AmmoBox * CIVxMIL)		,						
			"Base.Flare",	AmmoBox		* wFLAME	- (AmmoBox * xFLAME)			- (AmmoBox * CIVxMIL)		,						
			"Base.Grenade_Fragmentation",	AmmoBox	* CIVx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)		- (AmmoBox * CIVxMIL)		,						
			"Base.Grenade_Stick",	AmmoBox	* CIVx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xEUR)		- (AmmoBox * CIVxMIL)		,						
			"Base.Explosive_Landmine",	AmmoBox	* CIVx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)		- (AmmoBox * CIVxMIL)		,						
			"Base.Explosive_Claymore_P",	AmmoBox	* CIVx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)		- (AmmoBox * CIVxMIL)		,						
			"Base.PolyCan_Red_SPASClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w12g	- (w12g * x12g)					,						
			"Base.PolyCan_Red_12gDrum",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w12g	- (w12g * x12g)					,						
			"Base.PolyCan_Red_38Speed",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w357	- (w357 * x357)	- (PolyCan * xREV)				,						
			"Base.PolyCan_Red_44Speed",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w44	- (w44 * x44)	- (PolyCan * xREV)				,						
			"Base.PolyCan_Blue_9mmSSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)					,						
			"Base.PolyCan_Blue_9mmSSExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)					,						
			"Base.PolyCan_Blue_9mmClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)					,						
			"Base.PolyCan_Blue_9mmExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)					,						
			"Base.PolyCan_Blue_9mmDrum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)					,						
			"Base.PolyCan_Blue_45DSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)					,						
			"Base.PolyCan_Blue_45DSExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)					,						
			"Base.PolyCan_Blue_45Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)					,						
			"Base.PolyCan_Blue_45Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)					,						
			"Base.PolyCan_Blue_45ExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)					,						
			"Base.PolyCan_Brown_556Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w556	- (w556 * x556)					,						
			"Base.PolyCan_Brown_556Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w556	- (w556 * x556)					,						
			"Base.PolyCan_Brown_AKClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)					,						
			"Base.PolyCan_Brown_762Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)					,						
			"Base.PolyCan_Brown_545StdClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w545x39	- (w545x39 * x545x39)					,						
			"Base.PolyCan_Brown_545Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w545x39	- (w545x39 * x545x39)					,						
			"Base.PolyCan_Beige_308StdClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)					,						
			"Base.PolyCan_Beige_308ExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)					,						
			"Base.PolyCan_Beige_BMG",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* wBMG	- (wBMG * xBMG)					,						
			"Base.PolyCan_Beige_K11",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* wGREN	- (wGREN * xGREN)	- (PolyCan * xKOR)		- (PolyCan * CIVxMIL)	- (PolyCan * x90)	,						
			"Base.PolyCan_Beige_SVDClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x54r	- (w762x54r * x762x54r)	- (PolyCan * xSOV)				,						
			"Base.PolyCan_Beige_SKSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)	- (PolyCan * xSOV)				,						
			"Base.PolyCan_Beige_M1Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w3006	- (w3006 * x3006)	- (PolyCan * xUSA)				,						
			"Base.PolyCan_Beige_1903Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)					,						
		}																
	},																	
																		
																		
	PoliceGuns = {		-- PoliceGuns															
		rolls =	LEORollGUN	,														
		items = {																
			"Base.UmarexSS",	wBB	 * LEOx	- (wBB * xBB)		- (wBB * LEOx * xUSA)	- (wBB * LEOx * LEOxCIV)		- (wBB * LEOx * x90)	,						
			"Base.Benjamin_M397",	wBB	 * LEOx	- (wBB * xBB)		- (wBB * LEOx * xUSA)	- (wBB * LEOx * LEOxCIV)			,						
			"Base.RWS_M34",	wBB	 * LEOx	- (wBB * xBB)		- (wBB * LEOx * xUSA)	- (wBB * LEOx * LEOxCIV)		- (wBB * LEOx * x90)	,						
			"Base.VM_68",	wBB	 * LEOx	- (wBB * xBB)		- (wBB * LEOx * xUSA)	- (wBB * LEOx * LEOxCIV)			,						
			"Base.Auto_Cocker",	wBB	 * LEOx	- (wBB * xBB)		- (wBB * LEOx * xUSA)	- (wBB * LEOx * LEOxCIV)			,						
			"Base.Tippmann_SL68",	wBB	 * LEOx	- (wBB * xBB)		- (wBB * LEOx * xUSA)	- (wBB * LEOx * LEOxCIV)			,						
			"Base.Sheridan_PGP",	wBB	 * LEOx	- (wBB * xBB)		- (wBB * LEOx * xUSA)	- (wBB * LEOx * LEOxCIV)			,						
			"Base.CP33",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSEMI)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)		- (w22 * LEOx * x90)	,						
			"Base.Ruger_MK4",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSEMI)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)		- (w22 * LEOx * x90)	,						
			"Base.Ruger_MK4_2245",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSEMI)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)		- (w22 * LEOx * x90)	,						
			"Base.Buckmark",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSEMI)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)			,						
			"Base.Buckmark_Long",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSEMI)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)			,						
			"Base.Buckmark_Carbine",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSEMI)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)			,						
			"Base.HK4_22",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSEMI)	- (w22 * LEOx * xEUR)	- (w22 * LEOx * LEOxCIV)			,						
			"Base.ZIP22",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSEMI)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)		- (w22 * LEOx * x90)	,						
			"Base.Ruger_1022",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSEMI)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)			,						
			"Base.Marlin_M70",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSEMI)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)			,						
			"Base.Cricket_22",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xBOLT)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)			,						
			"Base.AR7",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSEMI)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)			,						
			"Base.Calico_22LR",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSMG)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)			,						
			"Base.American180",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSMG)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)			,						
			"Base.Winchester1903",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xLEVER)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)			,						
			"Base.KRISS22_MK11_Stock",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSMG)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)		- (w22 * LEOx * x90)	,						
			"Base.KRISS22_CRB_Stock",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSMG)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)		- (w22 * LEOx * x90)	,						
			"Base.CMR_30",	w22	 * LEOx	- (w22 * x22)	- (w22 * LEOx * xSEMI)	- (w22 * LEOx * xUSA)	- (w22 * LEOx * LEOxCIV)		- (w22 * LEOx * x90)	,						
			"Base.G42",	w380	 * LEOx	- (w380 * x380)	- (w380 * LEOx * xSEMI)	- (w380 * LEOx * xEUR)	- (w380 * LEOx * LEOxCIV)		- (w380 * LEOx * x90)	,						
			"Base.LCP380",	w380	 * LEOx	- (w380 * x380)	- (w380 * LEOx * xSEMI)	- (w380 * LEOx * xUSA)	- (w380 * LEOx * LEOxCIV)		- (w380 * LEOx * x90)	,						
			"Base.BodyGuard380",	w380	 * LEOx	- (w380 * x380)	- (w380 * LEOx * xSEMI)	- (w380 * LEOx * xUSA)	- (w380 * LEOx * LEOxCIV)		- (w380 * LEOx * x90)	,						
			"Base.Bersa85F",	w380	 * LEOx	- (w380 * x380)	- (w380 * LEOx * xSEMI)	- (w380 * LEOx * xREST)	- (w380 * LEOx * LEOxCIV)			,						
			"Base.Colt1903",	w380	 * LEOx	- (w380 * x380)	- (w380 * LEOx * xSEMI)	- (w380 * LEOx * xUSA)	- (w380 * LEOx * LEOxCIV)			,						
			"Base.Makarov380",	w380	 * LEOx	- (w380 * x380)	- (w380 * LEOx * xSEMI)	- (w380 * LEOx * xSOV)	- (w380 * LEOx * LEOxCIV)			,						
			"Base.PPK",	w380	 * LEOx	- (w380 * x380)	- (w380 * LEOx * xSEMI)	- (w380 * LEOx * xEUR)	- (w380 * LEOx * LEOxCIV)			,						
			"Base.HK4_380",	w380	 * LEOx	- (w380 * x380)	- (w380 * LEOx * xSEMI)	- (w380 * LEOx * xEUR)	- (w380 * LEOx * LEOxCIV)			,						
			"Base.VP70",	w380	 * LEOx	- (w380 * x380)	- (w380 * LEOx * xSMG)	- (w380 * LEOx * xEUR)	- (w380 * LEOx * LEOxCIV)			,						
			"Base.VP70_Stock",	w380	 * LEOx	- (w380 * x380)	- (w380 * LEOx * xSMG)	- (w380 * LEOx * xEUR)	- (w380 * LEOx * LEOxCIV)			,						
			"Base.Vz61_Fixed",	w380	 * LEOx	- (w380 * x380)	- (w380 * LEOx * xSMG)	- (w380 * LEOx * xCZE)	- (w380 * LEOx * LEOxCIV)			,						
			"Base.Vz61_Fold",	w380	 * LEOx	- (w380 * x380)	- (w380 * LEOx * xSMG)	- (w380 * LEOx * xCZE)	- (w380 * LEOx * LEOxCIV)			,						
			"Base.BT380_Stock",	w380	 * LEOx	- (w380 * x380)	- (w380 * LEOx * xSEMI)	- (w380 * LEOx * xEUR)	- (w380 * LEOx * LEOxCIV)		- (w380 * LEOx * x90)	,						
			"Base.FN_57", 	w57	 * LEOx	- (w57 * x57)	- (w57 * LEOx * xSEMI)	- (w57 * LEOx * xEUR)	- (w57 * LEOx * LEOxCIV)		- (w57 * LEOx * x90)	,						
			"Base.FN_57_MK2", 	w57	 * LEOx	- (w57 * x57)	- (w57 * LEOx * xSEMI)	- (w57 * LEOx * xEUR)	- (w57 * LEOx * LEOxCIV)		- (w57 * LEOx * x90)	,						
			"Base.FN_P90",	w57	 * LEOx	- (w57 * x57)	- (w57 * LEOx * xSMG)	- (w57 * LEOx * xEUR)	- (w57 * LEOx * LEOxCIV)		- (w57 * LEOx * x90)	,						
			"Base.FN_PS90",	w57	 * LEOx	- (w57 * x57)	- (w57 * LEOx * xSMG)	- (w57 * LEOx * xEUR)	- (w57 * LEOx * LEOxCIV)		- (w57 * LEOx * x90)	,						
			"Base.MPA57DMG",	w57	 * LEOx	- (w57 * x57)	- (w57 * LEOx * xSMG)	- (w57 * LEOx * xUSA)	- (w57 * LEOx * LEOxCIV)		- (w57 * LEOx * x90)	,						
			"Base.MPA57DMG_Carbine",	w57	 * LEOx	- (w57 * x57)	- (w57 * LEOx * xSMG)	- (w57 * LEOx * xUSA)	- (w57 * LEOx * LEOxCIV)		- (w57 * LEOx * x90)	,						
			"Base.AR57_PDW",	w57	 * LEOx	- (w57 * x57)	- (w57 * LEOx * xSMG)	- (w57 * LEOx * xUSA)	- (w57 * LEOx * LEOxCIV)		- (w57 * LEOx * x90)	,						
			"Base.AR57_PDW_Long",	w57	 * LEOx	- (w57 * x57)	- (w57 * LEOx * xSMG)	- (w57 * LEOx * xUSA)	- (w57 * LEOx * LEOxCIV)		- (w57 * LEOx * x90)	,						
			"Base.Ruger_PCC",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.Ruger_PCC_R",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.Ruger_PCC_M",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.HiPoint",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.HiPoint_Carbine",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.STAR_BM", 	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xREST)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.M39",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)				,						
			"Base.MK22",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)		- (w9 * LEOx * LEOxMIL)		,						
			"Base.G43",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.CZ75",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)				,						
			"Base.CZ_75b",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)				,						
			"Base.CZ_75_SP01_SS",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)				,						
			"Base.CZ_75_SP01",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)				,						
			"Base.CZ_75_Compact",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.CZ_75_P01",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.CZ_2075",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.CZ_75_Shadow",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)			- (w9 * LEOx * x90)	,						
			"Base.CZ_75_Czechmate",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.EAA_Witness_9",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)				,						
			"Base.EAA_Witness_Long_9",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.G17",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)				,						
			"Base.G18",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)		- (w9 * LEOx * LEOxMIL)		,						
			"Base.G34", 	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.K5",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xKOR)				,						
			"Base.RPD_92FS",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)				,						
			"Base.M9",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)				,						
			"Base.M9A3",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)			- (w9 * LEOx * x90)	,						
			"Base.B93R",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)		- (w9 * LEOx * LEOxMIL)		,						
			"Base.M5906",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)				,						
			"Base.XD9",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)			- (w9 * LEOx * x90)	,						
			"Base.MP9",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)			- (w9 * LEOx * x90)	,						
			"Base.P226",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)				,						
			"Base.APS",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xSOV)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Makarov",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xSOV)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.PB",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xSOV)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Luger",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Luger_WW1",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Luger_Carbine",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.UZI", 	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xREST)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.UZI_Wood",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xREST)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.UZI_Micro",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xREST)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.BT9_Fold",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.UMP9_Stock",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)			- (w9 * LEOx * x90)	,						
			"Base.SUB2000",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.MP5_Fixed",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)				,						
			"Base.MP5_Stock",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)				,						
			"Base.MP5SD6_Fixed",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)		- (w9 * LEOx * LEOxMIL)		,						
			"Base.MP5SD6_Stock",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)		- (w9 * LEOx * LEOxMIL)		,						
			"Base.EVO_Fold",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xCZE)			- (w9 * LEOx * x90)	,						
			"Base.K7_Stock",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xKOR)				,						
			"Base.AUG9",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)				,						
			"Base.KG9",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Calico_M900_Fold",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Calico_M950_Pistol",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Bizon2_01_Stock",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xSOV)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.VSS",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xSOV)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.ASVAL",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xSOV)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.M1Carbine",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.M2Carbine",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.M635",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)				,						
			"Base.M635S",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)				,						
			"Base.M635SD",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)		- (w9 * LEOx * LEOxMIL)		,						
			"Base.MP7",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)			- (w9 * LEOx * x90)	,						
			"Base.Jatimatic",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Sten",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Sten_MK2",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Sten_MK2SD",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.STAR_Z45_Stock",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.STAR_Z45_Fixed",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.KRISS9_Stock",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)			- (w9 * LEOx * x90)	,						
			"Base.KRISS9_MLOK_Stock",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)			- (w9 * LEOx * x90)	,						
			"Base.JW3_TTI_MPX",	w9	 * LEOx	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)			- (w9 * LEOx * x90)	,						
			"Base.M5238",	w357	 * LEOx	- (w357 * x357)	- (w357 * LEOx * xSEMI)	- (w357 * LEOx * xUSA)	- (w357 * LEOx * LEOxCIV)			,						
			"Base.Taurus856",	w357	 * LEOx	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xREST)			- (w357 * LEOx * x90)	,						
			"Base.Colt_Service38",	w357	 * LEOx	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xUSA)				,						
			"Base.GP100_2",	w357	 * LEOx	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xUSA)				,						
			"Base.GP100_4",	w357	 * LEOx	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xUSA)				,						
			"Base.GP100_6",	w357	 * LEOx	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xUSA)				,						
			"Base.K6S",	w357	 * LEOx	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xUSA)	- (w357 * LEOx * LEOxCIV)		- (w357 * LEOx * x90)	,						
			"Base.Rhino_200DS",	w357	 * LEOx	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xEUR)	- (w357 * LEOx * LEOxCIV)		- (w357 * LEOx * x90)	,						
			"Base.Rhino_40DS",	w357	 * LEOx	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xEUR)	- (w357 * LEOx * LEOxCIV)		- (w357 * LEOx * x90)	,						
			"Base.Rhino_60DS",	w357	 * LEOx	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xEUR)	- (w357 * LEOx * LEOxCIV)		- (w357 * LEOx * x90)	,						
			"Base.SW_327",	w357	 * LEOx	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xUSA)			- (w357 * LEOx * x90)	,						
			"Base.M1936",	w357	 * LEOx	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xUSA)	- (w357 * LEOx * LEOxCIV)			,						
			"Base.NEF_Handi_38",	w357	 * LEOx	- (w357 * x357)	- (w357 * LEOx * xBREAK)	- (w357 * LEOx * xUSA)	- (w357 * LEOx * LEOxCIV)			,						
			"Base.Marlin_1894",	w357	 * LEOx	- (w357 * x357)	- (w357 * LEOx * xLEVER)	- (w357 * LEOx * xUSA)	- (w357 * LEOx * LEOxCIV)			,						
			"Base.CZ97B",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xCZE)			- (w45 * LEOx * x90)	,						
			"Base.EAA_Witness_45",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xEUR)				,						
			"Base.EAA_Witness_Long_45",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xEUR)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.G21",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xEUR)				,						
			"Base.XD4",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)			- (w45 * LEOx * x90)	,						
			"Base.MP45",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)			- (w45 * LEOx * x90)	,						
			"Base.P220",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xEUR)				,						
			"Base.M4506",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)				,						
			"Base.HK_MK23",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xEUR)		- (w45 * LEOx * LEOxMIL)		,						
			"Base.HK_USP",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xEUR)				,						
			"Base.HK_USP_Match",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xEUR)		- (w45 * LEOx * LEOxMIL)		,						
			"Base.PULP_1911",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.PARA1911",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.AMT1911",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.AMT1911_Long",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.M1911_Carbine",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.Colt1911",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)				,						
			"Base.Colt_Kimber",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)		- (w45 * LEOx * x90)	,						
			"Base.Colt_Commander",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)		- (w45 * LEOx * LEOxMIL)		,						
			"Base.UMP45_Stock",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xEUR)			- (w45 * LEOx * x90)	,						
			"Base.MAC10_Fold",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.KRISS_Stock",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xUSA)			- (w45 * LEOx * x90)	,						
			"Base.Commando",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xBOLT)	- (w45 * LEOx * xEUR)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.Thompson",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.Thompson_1928",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.M2Hyde",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.Model55_Fold",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.Model50",	w45	 * LEOx	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.Colt_Navy_1851",	w44	 * LEOx	- (w44 * x44)	- (w44 * LEOx * xREV)	- (w44 * LEOx * xUSA)	- (w44 * LEOx * LEOxCIV)			,						
			"Base.M29_44",	w44	 * LEOx	- (w44 * x44)	- (w44 * LEOx * xREV)	- (w44 * LEOx * xUSA)	- (w44 * LEOx * LEOxCIV)			,						
			"Base.M29_44Carbine",	w44	 * LEOx	- (w44 * x44)	- (w44 * LEOx * xREV)	- (w44 * LEOx * xUSA)	- (w44 * LEOx * LEOxCIV)			,						
			"Base.Automag",	w44	 * LEOx	- (w44 * x44)	- (w44 * LEOx * xSEMI)	- (w44 * LEOx * xUSA)	- (w44 * LEOx * LEOxCIV)			,						
			"Base.DEagle",	w44	 * LEOx	- (w44 * x44)	- (w44 * LEOx * xSEMI)	- (w44 * LEOx * xISR)	- (w44 * LEOx * LEOxCIV)			,						
			"Base.DEagle_Long",	w44	 * LEOx	- (w44 * x44)	- (w44 * LEOx * xSEMI)	- (w44 * LEOx * xISR)	- (w44 * LEOx * LEOxCIV)			,						
			"Base.DEagle_Hawk",	wBMG	 * LEOx	- (wBMG * xBMG)	- (wBMG * LEOx * xSEMI)	- (wBMG * LEOx * xISR)	- (wBMG * LEOx * LEOxCIV)			,						
			"Base.Winchester1866",	w45LC	 * LEOx	- (w44 * x44)	- (w45LC * LEOx * xLEVER)	- (w45LC * LEOx * xUSA)	- (w45LC * LEOx * LEOxCIV)			,						
			"Base.Win_1894",	w44	 * LEOx	- (w44 * x44)	- (w44 * LEOx * xLEVER)	- (w44 * LEOx * xUSA)	- (w44 * LEOx * LEOxCIV)			,						
			"Base.Colt_Service45",	w45LC	 * LEOx	- (w45LC * x45LC)	- (w45LC * LEOx * xREV)	- (w45LC * LEOx * xUSA)	- (w45LC * LEOx * LEOxCIV)			,						
			"Base.Judge_45LC",	w45LC	 * LEOx	- (w45LC * x45LC)	- (w45LC * LEOx * xREV)	- (w45LC * LEOx * xREST)	- (w45LC * LEOx * LEOxCIV)		- (w45LC * LEOx * x90)	,						
			"Base.Judge513_45LC",	w45LC	 * LEOx	- (w45LC * x45LC)	- (w45LC * LEOx * xREV)	- (w45LC * LEOx * xREST)	- (w45LC * LEOx * LEOxCIV)		- (w45LC * LEOx * x90)	,						
			"Base.Judge513_Long_45LC",	w45LC	 * LEOx	- (w45LC * x45LC)	- (w45LC * LEOx * xREV)	- (w45LC * LEOx * xREST)	- (w45LC * LEOx * LEOxCIV)		- (w45LC * LEOx * x90)	,						
			"Base.TXS_804_45LC",	w45LC	 * LEOx	- (w45LC * x45LC)	- (w45LC * LEOx * xREV)	- (w45LC * LEOx * xREST)	- (w45LC * LEOx * LEOxCIV)			,						
			"Base.Winchester1873",	w45LC	 * LEOx	- (w45LC * x45LC)	- (w45LC * LEOx * xLEVER)	- (w45LC * LEOx * xUSA)	- (w45LC * LEOx * LEOxCIV)			,						
			"Base.Sako85",	w223	 * LEOx	- (w223 * x223)	- (w223 * LEOx * xBOLT)	- (w223 * LEOx * xEUR)				,						
			"Base.MINI14",	w223	 * LEOx	- (w223 * x223)	- (w223 * LEOx * xSEMI)	- (w223 * LEOx * xUSA)				,						
			"Base.MINI14_Stock",	w223	 * LEOx	- (w223 * x223)	- (w223 * LEOx * xSEMI)	- (w223 * LEOx * xUSA)				,						
			"Base.MINI14_T",	w223	 * LEOx	- (w223 * x223)	- (w223 * LEOx * xSEMI)	- (w223 * LEOx * xUSA)				,						
			"Base.Viper",	w223	 * LEOx	- (w223 * x223)	- (w223 * LEOx * xLEVER)	- (w223 * LEOx * xREST)	- (w223 * LEOx * LEOxCIV)		- (w223 * LEOx * x90)	,						
			"Base.Carbon15_97",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.CAR15SMG",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)				,						
			"Base.CAR15_Survival",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)				,						
			"Base.XM8Compact_Pistol",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.XM8",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.SCARSC_Stock",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.SCARL",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.SCAR_B",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.G33",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)				,						
			"Base.G36",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)			- (w556 * LEOx * x90)	,						
			"Base.G36C",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)			- (w556 * LEOx * x90)	,						
			"Base.G36KV",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)			- (w556 * LEOx * x90)	,						
			"Base.G11K3",	w57	 * LEOx	- (w57 * x57)	- (w57 * LEOx * xAUTO)	- (w57 * LEOx * xEUR)		- (w57 * LEOx * LEOxMIL)	- (w57 * LEOx * x90)	,						
			"Base.MK18",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)			- (w556 * LEOx * x90)	,						
			"Base.AK5C",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)				,						
			"Base.M16A1",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.M16A2",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)				,						
			"Base.M16A3",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.M723",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)				,						
			"Base.XM117",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)			- (w556 * LEOx * x90)	,						
			"Base.H416",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)			- (w556 * LEOx * x90)	,						
			"Base.M4",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)				,						
			"Base.M4A1",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)				,						
			"Base.ADAR",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xSOV)	- (w556 * LEOx * LEOxCIV)		- (w556 * LEOx * x90)	,						
			"Base.K2C1_PH",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)			- (w556 * LEOx * x90)	,						
			"Base.K2_ADVK2",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)			- (w556 * LEOx * x90)	,						
			"Base.K2_Grunt",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)			- (w556 * LEOx * x90)	,						
			"Base.K1A_DEV",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)			- (w556 * LEOx * x90)	,						
			"Base.K1DEV",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)			- (w556 * LEOx * x90)	,						
			"Base.K2_C1",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)			- (w556 * LEOx * x90)	,						
			"Base.K2_1",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)				,						
			"Base.K2_203",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.K1_1",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)				,						
			"Base.DR_200",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)			- (w556 * LEOx * x90)	,						
			"Base.LVOA_C",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xSEMI)	- (w556 * LEOx * xUSA)	- (w556 * LEOx * LEOxCIV)		- (w556 * LEOx * x90)	,						
			"Base.AAC_Honey",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)			- (w556 * LEOx * x90)	,						
			"Base.AAC_HoneySD",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)			- (w556 * LEOx * x90)	,						
			"Base.Bush_AR15_MOE",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xSEMI)	- (w556 * LEOx * xUSA)				,						
			"Base.Bush_XM15",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xSEMI)	- (w556 * LEOx * xUSA)				,						
			"Base.Bush_XM15_Custom",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xSEMI)	- (w556 * LEOx * xUSA)				,						
			"Base.MCX_Virtus",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)			- (w556 * LEOx * x90)	,						
			"Base.MCX_VirtusPatrol",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)			- (w556 * LEOx * x90)	,						
			"Base.MCX_Socom",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.MCX_Spear",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xSEMI)	- (w556 * LEOx * xEUR)	- (w556 * LEOx * LEOxCIV)		- (w556 * LEOx * x90)	,						
			"Base.ColtM16",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)	- (w556 * LEOx * LEOxCIV)			,						
			"Base.M16Wood",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)	- (w556 * LEOx * LEOxCIV)			,						
			"Base.M16Tape",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)	- (w556 * LEOx * LEOxCIV)			,						
			"Base.FAMAS",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.FAMAS_G2",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.FAMAS_Felin",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.AUG",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)	- (w556 * LEOx * LEOxCIV)			,						
			"Base.AUG_A3",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)	- (w556 * LEOx * LEOxCIV)		- (w556 * LEOx * x90)	,						
			"Base.M85_Stock",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xSOV)	- (w556 * LEOx * LEOxCIV)			,						
			"Base.AN94",	w545x39	 * LEOx	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xSOV)	- (w545x39 * LEOx * LEOxCIV)			,						
			"Base.AK74",	w545x39	 * LEOx	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xSOV)	- (w545x39 * LEOx * LEOxCIV)			,						
			"Base.AKS74",	w545x39	 * LEOx	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xSOV)	- (w545x39 * LEOx * LEOxCIV)			,						
			"Base.AKS74U",	w545x39	 * LEOx	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xSOV)	- (w545x39 * LEOx * LEOxCIV)			,						
			"Base.AK74_Alpha",	w545x39	 * LEOx	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xSOV)		- (w545x39 * LEOx * LEOxMIL)	- (w545x39 * LEOx * x90)	,						
			"Base.AK12",	w545x39	 * LEOx	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xSOV)		- (w545x39 * LEOx * LEOxMIL)	- (w545x39 * LEOx * x90)	,						
			"Base.AK12_New",	w545x39	 * LEOx	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xSOV)		- (w545x39 * LEOx * LEOxMIL)	- (w545x39 * LEOx * x90)	,						
			"Base.RPK74",	w545x39	 * LEOx	- (w545x39 * x545x39)	- (w545x39 * LEOx * xLMG)	- (w545x39 * LEOx * xSOV)	- (w545x39 * LEOx * LEOxCIV)			,						
			"Base.RPK16",	w545x39	 * LEOx	- (w545x39 * x545x39)	- (w545x39 * LEOx * xLMG)	- (w545x39 * LEOx * xSOV)	- (w545x39 * LEOx * LEOxCIV)		- (w545x39 * LEOx * x90)	,						
			"Base.L85",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.L85A2",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.L86",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.L22",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.F2000",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)	- (w556 * LEOx * LEOxCIV)		- (w556 * LEOx * x90)	,						
			"Base.Tavor",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xISR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.AR18",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)	- (w556 * LEOx * LEOxCIV)			,						
			"Base.Type20",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xPAC)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.Type89",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xPAC)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.QBZ_95",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xPAC)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.Shrike",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xLMG)	- (w556 * LEOx * xUSA)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.XM8LMG",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xLMG)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.M249",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xLMG)	- (w556 * LEOx * xUSA)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.M249E3",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xLMG)	- (w556 * LEOx * xUSA)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.K3LMG",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xLMG)	- (w556 * LEOx * xKOR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.AK47",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.AKM",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.AK103",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)		- (w762x39 * LEOx * x90)	,						
			"Base.MD65_Stock",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.AKMS_Stock",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Vz58",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xCZE)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Vz58_Stock",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xCZE)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Vz58_Mini_Stock",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xCZE)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.SKS",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xSEMI)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.SKS_PARA",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xSEMI)	- (w762x39 * LEOx * xPAC)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.MK47",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xSEMI)	- (w762x39 * LEOx * xUSA)	- (w762x39 * LEOx * LEOxCIV)		- (w762x39 * LEOx * x90)	,						
			"Base.AKM_Custom",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xUSA)	- (w762x39 * LEOx * LEOxCIV)		- (w762x39 * LEOx * x90)	,						
			"Base.AK74_Custom",	w545x39	 * LEOx	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xUSA)	- (w545x39 * LEOx * LEOxCIV)		- (w545x39 * LEOx * x90)	,						
			"Base.Ots14_1A_01",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Ots14_1A_02",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Ots14_4A",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Ots14_4A_01",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Ots14_4A_03",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Ots14_4A_GL",	wGREN	 * LEOx	- (wGREN * xGREN)	- (wGREN * LEOx * xAUTO)	- (wGREN * LEOx * xSOV)	- (wGREN * LEOx * LEOxCIV)	- (wGREN * LEOx * LEOxMIL)		,						
			"Base.AK308",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xSOV)	- (w308 * LEOx * LEOxCIV)	- (w308 * LEOx * LEOxMIL)	- (w308 * LEOx * x90)	,						
			"Base.SCARH",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)	- (w308 * LEOx * x90)	,						
			"Base.SCAR20",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)	- (w308 * LEOx * x90)	,						
			"Base.G28",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)	- (w308 * LEOx * x90)	,						
			"Base.G3",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.PSG1",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xSEMI)	- (w308 * LEOx * xEUR)				,						
			"Base.MSG90",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xSEMI)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.Type64",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xPAC)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.FAL",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.FAL_PARA_Stock",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.FN_FNC",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.WA2000",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xEUR)				,						
			"Base.SVD",	w762x54r	 * LEOx	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xSEMI)	- (w762x54r * LEOx * xSOV)	- (w762x54r * LEOx * LEOxCIV)			,						
			"Base.SVDK",	w762x54r	 * LEOx	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xSEMI)	- (w762x54r * LEOx * xSOV)	- (w762x54r * LEOx * LEOxCIV)			,						
			"Base.SV_98",	w762x54r	 * LEOx	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xBOLT)	- (w762x54r * LEOx * xSOV)	- (w762x54r * LEOx * LEOxCIV)			,						
			"Base.OTS_03_SVU",	w762x54r	 * LEOx	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xBOLT)	- (w762x54r * LEOx * xSOV)	- (w762x54r * LEOx * LEOxCIV)		- (w762x54r * LEOx * x90)	,						
			"Base.M14EBR",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xUSA)			- (w308 * LEOx * x90)	,						
			"Base.M14",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xUSA)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.K14",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xKOR)			- (w308 * LEOx * x90)	,						
			"Base.Savage12",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xUSA)				,						
			"Base.Ruger_No1_3006",	w3006	 * LEOx	- (w3006 * x3006)	- (w3006 * LEOx * xBREAK)	- (w3006 * LEOx * xUSA)	- (w3006 * LEOx * LEOxCIV)			,						
			"Base.M40",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xUSA)				,						
			"Base.M40A1",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xUSA)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.M40A2",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xUSA)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.M40A3",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xUSA)				,						
			"Base.M46_Mauser",	w762x54r	 * LEOx	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xBOLT)	- (w762x54r * LEOx * xPAC)	- (w762x54r * LEOx * LEOxCIV)			,						
			"Base.Mosin",	w762x54r	 * LEOx	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xBOLT)	- (w762x54r * LEOx * xSOV)	- (w762x54r * LEOx * LEOxCIV)			,						
			"Base.MosinObrez_Pistol",	w762x54r	 * LEOx	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xBOLT)	- (w762x54r * LEOx * xSOV)	- (w762x54r * LEOx * LEOxCIV)			,						
			"Base.M1",	w3006	 * LEOx	- (w3006 * x3006)	- (w3006 * LEOx * xSEMI)	- (w3006 * LEOx * xUSA)	- (w3006 * LEOx * LEOxCIV)			,						
			"Base.M1903",	w3006	 * LEOx	- (w3006 * x3006)	- (w3006 * LEOx * xBOLT)	- (w3006 * LEOx * xUSA)	- (w3006 * LEOx * LEOxCIV)			,						
			"Base.BAR",	w3006	 * LEOx	- (w3006 * x3006)	- (w3006 * LEOx * xAUTO)	- (w3006 * LEOx * xUSA)		- (w3006 * LEOx * LEOxMIL)		,						
			"Base.BAR_Monitor",	w3006	 * LEOx	- (w3006 * x3006)	- (w3006 * LEOx * xAUTO)	- (w3006 * LEOx * xUSA)		- (w3006 * LEOx * LEOxMIL)		,						
			"Base.MAS36",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.MAS44",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.MAS49",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.Win_1895",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xLEVER)	- (w308 * LEOx * xUSA)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.Galil",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xISR)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.Galil_Sniper",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xISR)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.Thompson_Center_3006",	w3006	 * LEOx	- (w3006 * x3006)	- (w3006 * LEOx * xBREAK)	- (w3006 * LEOx * xUSA)	- (w3006 * LEOx * LEOxCIV)			,						
			"Base.Type38",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xPAC)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.Type99",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xPAC)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.L96",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xEUR)				,						
			"Base.M240",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xLMG)	- (w308 * LEOx * xUSA)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.G21LMG",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xLMG)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)	- (w308 * LEOx * x90)	,						
			"Base.K12",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xLMG)	- (w308 * LEOx * xKOR)		- (w308 * LEOx * LEOxMIL)	- (w308 * LEOx * x90)	,						
			"Base.PKM",	w762x54r	 * LEOx	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xLMG)	- (w762x54r * LEOx * xSOV)		- (w762x54r * LEOx * LEOxMIL)		,						
			"Base.MG42",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xLMG)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.M60",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xLMG)	- (w308 * LEOx * xUSA)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.MK43",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xLMG)	- (w308 * LEOx * xUSA)		- (w308 * LEOx * LEOxMIL)	- (w308 * LEOx * x90)	,						
			"Base.RPD",	w762x39	 * LEOx	- (w762x39 * x762x39)	- (w762x39 * LEOx * xLMG)	- (w762x39 * LEOx * xSOV)		- (w762x39 * LEOx * LEOxMIL)		,						
			"Base.DSHK_Fold",	wBMG	 * LEOx	- (wBMG * xBMG)	- (wBMG * LEOx * xMINI)	- (wBMG * LEOx * xSOV)		- (wBMG * LEOx * LEOxMIL)		,						
			"Base.BOAR",	wBMG	 * LEOx	- (wBMG * xBMG)	- (wBMG * LEOx * xBREAK)	- (wBMG * LEOx * xUSA)	- (wBMG * LEOx * LEOxCIV)			,						
			"Base.EDM96",	wBMG	 * LEOx	- (wBMG * xBMG)	- (wBMG * LEOx * xBOLT)	- (wBMG * LEOx * xUSA)			- (wBMG * LEOx * x90)	,						
			"Base.M82",	wBMG	 * LEOx	- (wBMG * xBMG)	- (wBMG * LEOx * xSEMI)	- (wBMG * LEOx * xUSA)		- (wBMG * LEOx * LEOxMIL)		,						
			"Base.BFG50",	wBMG	 * LEOx	- (wBMG * xBMG)	- (wBMG * LEOx * xBREAK)	- (wBMG * LEOx * xUSA)	- (wBMG * LEOx * LEOxCIV)		- (wBMG * LEOx * x90)	,						
			"Base.Harris50",	wBMG	 * LEOx	- (wBMG * xBMG)	- (wBMG * LEOx * xBOLT)	- (wBMG * LEOx * xUSA)				,						
			"Base.TAC50",	wBMG	 * LEOx	- (wBMG * xBMG)	- (wBMG * LEOx * xBOLT)	- (wBMG * LEOx * xUSA)		- (wBMG * LEOx * LEOxMIL)		,						
			"Base.CheyTac50",	wBMG	 * LEOx	- (wBMG * xBMG)	- (wBMG * LEOx * xBOLT)	- (wBMG * LEOx * xUSA)		- (wBMG * LEOx * LEOxMIL)	- (wBMG * LEOx * x90)	,						
			"Base.Gepard_M6",	wBMG	 * LEOx	- (wBMG * xBMG)	- (wBMG * LEOx * xBOLT)	- (wBMG * LEOx * xEUR)		- (wBMG * LEOx * LEOxMIL)		,						
			"Base.OSV_96",	wBMG	 * LEOx	- (wBMG * xBMG)	- (wBMG * LEOx * xBOLT)	- (wBMG * LEOx * xSOV)		- (wBMG * LEOx * LEOxMIL)	- (wBMG * LEOx * x90)	,						
			"Base.Ash",	wBMG	 * LEOx	- (wBMG * xBMG)	- (wBMG * LEOx * xAUTO)	- (wBMG * LEOx * xSOV)		- (wBMG * LEOx * LEOxMIL)	- (wBMG * LEOx * x90)	,						
			"Base.VSSK",	wBMG	 * LEOx	- (wBMG * xBMG)	- (wBMG * LEOx * xBOLT)	- (wBMG * LEOx * xSOV)		- (wBMG * LEOx * LEOxMIL)	- (wBMG * LEOx * x90)	,						
			"Base.SW_M500",	wBMG	 * LEOx	- (wBMG * xBMG)	- (wBMG * LEOx * xREV)	- (wBMG * LEOx * xUSA)	- (wBMG * LEOx * LEOxCIV)		- (wBMG * LEOx * x90)	,						
			"Base.SPAS12_Fixed",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xEUR)				,						
			"Base.SPAS12_Fold",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xEUR)				,						
			"Base.Origin",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xUSA)			- (w12g * LEOx * x90)	,						
			"Base.SPAS_15",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xEUR)				,						
			"Base.USAS_12",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xAUTO)	- (w12g * LEOx * xKOR)		- (w12g * LEOx * LEOxMIL)		,						
			"Base.Shorty_Pistol",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)			- (w12g * LEOx * x90)	,						
			"Base.R11_87",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.M870",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)				,						
			"Base.M1897",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.DT11",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xBREAK)	- (w12g * LEOx * xEUR)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.Coachgun",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xBREAK)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.Terminator",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xBREAK)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.SIX12",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xREV)	- (w12g * LEOx * xUSA)			- (w12g * LEOx * x90)	,						
			"Base.SIX12SD",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xREV)	- (w12g * LEOx * xUSA)		- (w12g * LEOx * LEOxMIL)	- (w12g * LEOx * x90)	,						
			"Base.M870_Wingmaster",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.M870_Police",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)				,						
			"Base.M870_MCS",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)				,						
			"Base.M870_CQB",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)				,						
			"Base.M870_Breaching_Pistol",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)				,						
			"Base.M870_Express",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.Ithaca_M37",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.AUTO_5",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.A400",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xEUR)	- (w12g * LEOx * LEOxCIV)		- (w12g * LEOx * x90)	,						
			"Base.M1014",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xEUR)			- (w12g * LEOx * x90)	,						
			"Base.M1014_Fold",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xEUR)			- (w12g * LEOx * x90)	,						
			"Base.M1014_Wick",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xEUR)			- (w12g * LEOx * x90)	,						
			"Base.DAO12",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xREV)	- (w12g * LEOx * xREST)				,						
			"Base.M1887",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xLEVER)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.M1208",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xREV)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)		- (w12g * LEOx * x90)	,						
			"Base.M1212",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xREV)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)		- (w12g * LEOx * x90)	,						
			"Base.M1216",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xREV)	- (w12g * LEOx * xUSA)			- (w12g * LEOx * x90)	,						
			"Base.AA12",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xAUTO)	- (w12g * LEOx * xUSA)		- (w12g * LEOx * LEOxMIL)	- (w12g * LEOx * x90)	,						
			"Base.CAWS",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xAUTO)	- (w12g * LEOx * xEUR)		- (w12g * LEOx * LEOxMIL)		,						
			"Base.ROYAL_SXS",	w10g	 * LEOx	- (w10g * x10g)	- (w10g * LEOx * xBREAK)	- (w10g * LEOx * xEUR)	- (w10g * LEOx * LEOxCIV)			,						
			"Base.KS23",	w4g	 * LEOx	- (w4g * x4g)	- (w4g * LEOx * xPUMP)	- (w4g * LEOx * xSOV)	- (w4g * LEOx * LEOxCIV)			,						
			"Base.KS23_S_Pistol",	w4g	 * LEOx	- (w4g * x4g)	- (w4g * LEOx * xPUMP)	- (w4g * LEOx * xSOV)	- (w4g * LEOx * LEOxCIV)			,						
			"Base.Triple_Crown",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xBREAK)	- (w12g * LEOx * xEUR)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.Moss500_20",	w20g	 * LEOx	- (w20g * x20g)	- (w20g * LEOx * xPUMP)	- (w20g * LEOx * xUSA)	- (w20g * LEOx * LEOxCIV)			,						
			"Base.10855_Silver",	w20g	 * LEOx	- (w20g * x20g)	- (w20g * LEOx * xSEMI)	- (w20g * LEOx * xEUR)	- (w20g * LEOx * LEOxCIV)			,						
			"Base.Colt1855",	w20g	 * LEOx	- (w20g * x20g)	- (w20g * LEOx * xREV)	- (w20g * LEOx * xUSA)	- (w20g * LEOx * LEOxCIV)			,						
			"Base.TOZ106",	w20g	 * LEOx	- (w20g * x20g)	- (w20g * LEOx * xBOLT)	- (w20g * LEOx * xSOV)	- (w20g * LEOx * LEOxCIV)			,						
			"Base.TOZ194_Pistol",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xSOV)				,						
			"Base.Saiga12",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xAUTO)	- (w12g * LEOx * xSOV)		- (w12g * LEOx * LEOxMIL)	- (w12g * LEOx * x90)	,						
			"Base.Saiga12_Long",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xAUTO)	- (w12g * LEOx * xSOV)		- (w12g * LEOx * LEOxMIL)	- (w12g * LEOx * x90)	,						
			"Base.Saiga12_Tromix",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xAUTO)	- (w12g * LEOx * xSOV)		- (w12g * LEOx * LEOxMIL)	- (w12g * LEOx * x90)	,						
			"Base.MP133",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xSOV)			- (w12g * LEOx * x90)	,						
			"Base.MP133S_Pistol",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xSOV)			- (w12g * LEOx * x90)	,						
			"Base.KSG",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)			- (w12g * LEOx * x90)	,						
			"Base.KSG25",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)			- (w12g * LEOx * x90)	,						
			"Base.UTS15",	w12g	 * LEOx	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xREST)			- (w12g * LEOx * x90)	,						
			"Base.EX41_HE",	wGREN	 * LEOx		- (wGREN * LEOx * xGREN)	- (wGREN * LEOx * xUSA)		- (wGREN * LEOx * LEOxMIL)		,						
			"Base.Federal_HE",	wGREN	 * LEOx		- (wGREN * LEOx * xGREN)	- (wGREN * LEOx * xUSA)		- (wGREN * LEOx * LEOxMIL)		,						
			"Base.M32_HE",	wGREN	 * LEOx		- (wGREN * LEOx * xGREN)	- (wGREN * LEOx * xUSA)		- (wGREN * LEOx * LEOxMIL)		,						
			"Base.GM94_HE",	wGREN	 * LEOx		- (wGREN * LEOx * xGREN)	- (wGREN * LEOx * xSOV)		- (wGREN * LEOx * LEOxMIL)	- (wGREN * LEOx * x90)	,						
			"Base.K11",	wGREN	 * LEOx	- (wGREN * LEOx * xAUTO)	- (wGREN * LEOx * xGREN)	- (wGREN * LEOx * xKOR)		- (wGREN * LEOx * LEOxMIL)	- (wGREN * LEOx * x90)	,						
			"Base.M72_LAW",	wGREN	 * LEOx		- (wGREN * LEOx * xGREN)	- (wGREN * LEOx * xUSA)		- (wGREN * LEOx * LEOxMIL)		,						
			"Base.RPG_7",	wGREN	 * LEOx		- (wGREN * LEOx * xGREN)	- (wGREN * LEOx * xSOV)		- (wGREN * LEOx * LEOxMIL)		,						
			"Base.XM214",	w556	 * LEOx	- (w556 * x556)	- (w556 * LEOx * xMINI)	- (w556 * LEOx * xUSA)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.GAU17",	w308	 * LEOx	- (w308 * x308)	- (w308 * LEOx * xMINI)	- (w308 * LEOx * xUSA)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.GAU19",	wBMG	 * LEOx	- (wBMG * xBMG)	- (wBMG * LEOx * xMINI)	- (wBMG * LEOx * xUSA)		- (wBMG * LEOx * LEOxMIL)		,						
			"Base.TAC15",	wBOW	 * LEOx		- (wBOW * LEOx * xBOW)	- (wBOW * LEOx * xUSA)	- (wBOW * LEOx * LEOxCIV)			,						
			"Base.HortonScout_125",	wBOW	 * LEOx		- (wBOW * LEOx * xBOW)	- (wBOW * LEOx * xUSA)	- (wBOW * LEOx * LEOxCIV)			,						
			"Base.MissionMXB_400",	wBOW	 * LEOx		- (wBOW * LEOx * xBOW)	- (wBOW * LEOx * xUSA)	- (wBOW * LEOx * LEOxCIV)			,						
			"Base.TenPointTurbo_XLT",	wBOW	 * LEOx		- (wBOW * LEOx * xBOW)	- (wBOW * LEOx * xUSA)	- (wBOW * LEOx * LEOxCIV)			,						
			"Base.HZRedback_RTS",	wBOW	 * LEOx		- (wBOW * LEOx * xBOW)	- (wBOW * LEOx * xUSA)	- (wBOW * LEOx * LEOxCIV)			,						
			"Base.Genesis_X_Bow",	wBOW	 * LEOx		- (wBOW * LEOx * xBOW)	- (wBOW * LEOx * xUSA)	- (wBOW * LEOx * LEOxCIV)			,						
			"Base.Genesis_Bow",	wBOW	 * LEOx		- (wBOW * LEOx * xBOW)	- (wBOW * LEOx * xUSA)	- (wBOW * LEOx * LEOxCIV)			,						
			"Base.Genesis_Mini_Bow",	wBOW	 * LEOx		- (wBOW * LEOx * xBOW)	- (wBOW * LEOx * xUSA)	- (wBOW * LEOx * LEOxCIV)			,						
			"Base.BowTechSR_350",	wBOW	 * LEOx		- (wBOW * LEOx * xBOW)	- (wBOW * LEOx * xUSA)	- (wBOW * LEOx * LEOxCIV)			,						
			"Base.HoytSpectra_1000",	wBOW	 * LEOx		- (wBOW * LEOx * xBOW)	- (wBOW * LEOx * xUSA)	- (wBOW * LEOx * LEOxCIV)			,						
			"Base.SlingShot_Rock",	wBOW	 * LEOx		- (wBOW * LEOx * xBOW)	- (wBOW * LEOx * xUSA)	- (wBOW * LEOx * LEOxCIV)			,						
			"Base.WristRocket_Rock",	wBOW	 * LEOx		- (wBOW * LEOx * xBOW)	- (wBOW * LEOx * xUSA)	- (wBOW * LEOx * LEOxCIV)			,						
			"Base.M2A1",	wFLAME	 * LEOx		- (wFLAME * LEOx * xFLAME)	- (wFLAME * LEOx * xUSA)	- (wFLAME * LEOx * LEOxCIV)	- (wFLAME * LEOx * LEOxMIL)		,						
			"Base.Musk",	wFLAME	 * LEOx		- (wFLAME * LEOx * xFLAME)	- (wFLAME * LEOx * xUSA)	- (wFLAME * LEOx * LEOxCIV)		- (wFLAME * LEOx * x90)	,						
			"Base.Launcher",	Part		- (wGREN * xGREN)		- (Part * xUSA)		- (Part * LEOxMIL)		,						
			"Base.Launcher2",	Part		- (wGREN * xGREN)		- (Part * xSOV)		- (Part * LEOxMIL)		,						
			"Base.Bipod",	Part		- (Part * xPart)						,						
			"Base.Ammobelt",	Part		- (Part * xPart)						,						
			"Base.Sling_1",	Part		- (Part * xPart)						,						
			"Base.Sling_2",	Part		- (Part * xPart)						,						
			"Base.Sling_3",	Part		- (Part * xPart)						,						
			"Base.ForeGrip",	Part		- (Part * xPart)						,						
			"Base.Grip_Magpul",	Part		- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_MLOK",	Part		- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_TG",	Part		- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_BCM",	Part		- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_Fold",	Part		- (Part * xPart)						,						
			"Base.Light_Small",	Light		- (Light * xLight)						,						
			"Base.Light_Large",	Light		- (Light * xLight)						,						
			"Base.Light_Medium_M952V",	Light		- (Light * xLight)						,						
			"Base.Laser_Green",	Light		- (Light * xLight)						,						
			"Base.Laser_Red",	Light		- (Light * xLight)						,						
			"Base.Laser_DVAL",	Light		- (Light * xLight)						,						
			"Base.Laser_PEQ15",	Light		- (Light * xLight)				- (Light * LEOxMIL)		,						
			"Base.Light_Small_Socom",	Light		- (Light * xLight)				- (Light * LEOxMIL)		,						
			"Base.Light_Small_TLR_7AH",	Light		- (Light * xLight)						,						
			"Base.Light_Medium_M900",	Light		- (Light * xLight)						,						
			"Base.Suppressor_Pistol",	Suppress		- (Suppress * xSuppress)				- (Suppress * LEOxMIL)		,						
			"Base.Suppressor_Rifle",	Suppress		- (Suppress * xSuppress)						,						
			"Base.Suppressor_Shotgun",	Suppress		- (Suppress * xSuppress)				- (Suppress * LEOxMIL)		,						
			"Base.Suppressor_BMG",	Suppress		- (Suppress * xSuppress)	- (wBMG * xBMG)			- (Suppress * LEOxMIL)		,						
			"Base.Suppressor_Socom_Pistol",	Suppress		- (Suppress * xSuppress)				- (Suppress * LEOxMIL)		,						
			"Base.Suppressor_NorthStar_Pistol",	Suppress		- (Suppress * xSuppress)			- (Suppress * LEOxCIV)	- (Suppress * LEOxMIL)		,						
			"Base.Suppressor_PBS1_Rifle",	Suppress		- (Suppress * xSuppress)						,						
			"Base.Suppressor_PBS4_Rifle",	Suppress		- (Suppress * xSuppress)						,						
			"Base.Suppressor_ROME_BMG",	Suppress		- (Suppress * xSuppress)	- (wBMG * xBMG)			- (Suppress * LEOxMIL)		,						
			"Base.Bayonet_M4",	Part		- (Part * xPart)			- (Part * LEOxCIV)	- (Part * LEOxMIL)		,						
			"Base.Bayonet_AK",	Part		- (Part * xPart)		- (Part * xSOV)	- (Part * LEOxCIV)	- (Part * LEOxMIL)		,						
			"Base.Bayonet_M1917",	Part		- (Part * xPart)			- (Part * LEOxCIV)	- (Part * LEOxMIL)		,						
			"Base.Bayonet_Type30",	Part		- (Part * xPart)			- (Part * LEOxCIV)	- (Part * LEOxMIL)		,						
			"Base.Choke_Full",	Part		- (Part * xPart)						,						
			"Base.Choke_Full_Dbl",	Part		- (Part * xPart)			- (Part * LEOxCIV)			,						
			"Base.Compensator",	Part		- (Part * xPart)						,						
			"Base.LinearComp_Noveske",	Part		- (Part * xPart)						,						
			"Base.MuzzleBrake",	Part		- (Part * xPart)						,						
			"Base.MuzzleBrake_DK1",	Part		- (Part * xPart)						,						
			"Base.MuzzleBrake_DK2",	Part		- (Part * xPart)						,						
			"Base.Pad",	Part		- (Part * xPart)						,						
			"Base.Carrier_12g",	Part		- (Part * xPart)						,						
			"Base.GhostRing",	Optic		- (Optic * xOptic)						,						
			"Base.Sight_MicroDot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)		- (Optic * x90)	,						
			"Base.Sight_RaceDot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)			,						
			"Base.Sight_Phantom_XL",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)		- (Optic * x90)	,						
			"Base.Sight_OKP7_Reflex",	Optic		- (Optic * xOptic)		- (Optic * xSOV)	- (Optic * LEOxCIV)		- (Optic * x90)	,						
			"Base.Sight_SRS",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_EOTech",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_3xEOTech",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_4xACOG",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_4xACOG_ECO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_6xELCAN",	Optic		- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_6xHensoldt",	Optic		- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_KOBRA",	Optic		- (Optic * xOptic)		- (Optic * xSOV)	- (Optic * LEOxCIV)			,						
			"Base.Scope_4xPSO",	Optic		- (Optic * xOptic)		- (Optic * xSOV)	- (Optic * LEOxCIV)			,						
			"Base.Scope_12xPSO",	Optic		- (Optic * xOptic)		- (Optic * xSOV)	- (Optic * LEOxCIV)			,						
			"Base.Scope_1-4x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_Trijicon_1-6x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_TANGO6T_1-6x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_20x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Thermal",	Optic		- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * LEOxMIL)		,						
			"Base.Sight_Thermal_AK",	Optic		- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * LEOxMIL)		,						
			"Base.Sight_Aimpoint",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Aimpoint_Dot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Fiber_Shotgun",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)			,						
			"Base.Sight_Mepro_M21",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_Mepro_MOR",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_UH1",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_C79",	Optic		- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_SUSAT",	Optic		- (Optic * xOptic)		- (Optic * xEUR)	- (Optic * LEOxCIV)	- (Optic * LEOxMIL)		,						
			"Base.Sight_Raven",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_G28_Scope",	Optic		- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Scope_ATACR7_F1",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_ATACR7_F1r",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_ACRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_MRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_SRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_Nikon",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)			,						
			"Base.Sight_M8",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_VX3",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_1P87",	Optic		- (Optic * xOptic)		- (Optic * xSOV)	- (Optic * LEOxCIV)			,						
			"Base.Sight_1P63",	Optic		- (Optic * xOptic)		- (Optic * xSOV)	- (Optic * LEOxCIV)			,						
			"Base.Sight_Brownells",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)			,						
			"Base.Sight_L2",	Optic		- (Optic * xOptic)		- (Optic * xEUR)	- (Optic * LEOxCIV)			,						
			"Base.Sight_Malcom",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)			,						
			"Base.Sight_LUX",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)			,						
			"Base.Sight_NO32",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)			,						
			"Base.Sight_PKAS",	Optic		- (Optic * xOptic)		- (Optic * xSOV)				,						
			"Base.Sight_PU",	Optic		- (Optic * xOptic)		- (Optic * xSOV)	- (Optic * LEOxCIV)			,						
			"Base.Sight_XPS",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_PVS4",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Burris_NV",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Armasight_NV",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Barrel_308",	w308		- (w308 * xPart)	- (w308 * xBREAK)	- (w308 * xUSA)	- (w308 * LEOxCIV)			,						
			"Base.Barrel_3006",	w3006		- (w3006 * xPart)	- (w3006 * xBREAK)	- (w3006 * xUSA)	- (w3006 * LEOxCIV)			,						
			"Base.Barrel_4570",	w4570		- (w4570 * xPart)	- (w4570 * xBREAK)	- (w4570 * xUSA)	- (w4570 * LEOxCIV)			,						
			"Base.Barrel_357",	w357		- (w357 * xPart)	- (w357 * xBREAK)	- (w357 * xUSA)	- (w357 * LEOxCIV)			,						
			"Base.Barrel_357_Short",	w357		- (w357 * xPart)	- (w357 * xBREAK)	- (w357 * xUSA)	- (w357 * LEOxCIV)			,						
			"Base.Barrel_45LC",	w45LC		- (w45LC * xPart)	- (w45LC * xBREAK)	- (w45LC * xUSA)	- (w45LC * LEOxCIV)			,						
			"Base.Barrel_45LC_Short",	w45LC		- (w45LC * xPart)	- (w45LC * xBREAK)	- (w45LC * xUSA)	- (w45LC * LEOxCIV)			,						
			"Base.TriggerGroup_AR",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)				,						
			"Base.TriggerGroup_AK",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xSOV)				,						
			"Base.Switch_Striker_Black",	Part 		- (Part * xPart)	- (Part  * xAUTO)	- (Part  * xUSA)			- (Part  * x90)	,						
			"Base.Switch_Striker_Red",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)			- (Part * x90)	,						
			"Base.Switch_Striker_Blue",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)			- (Part * x90)	,						
			"Base.Switch_Striker_Green",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)			- (Part * x90)	,						
			"Base.Grip_G10_Blue",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_G10_Brown",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_G10_Black",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_G10_Red",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_G10_Green",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_G10_Pink",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_Alloy_Black",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_Alloy_Silver",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_Alloy_Blue",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_Alloy_Red",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_Wood",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_Punisher",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_Spartan",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_Ivory",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_Carbon",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.38Speed",	StdMag	* w357 - (StdMag * xStdMag)	- (w357 * x357)	- (StdMag * xREV)					,						
			"Base.44Speed",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)	- (StdMag * xREV)		- (StdMag * LEOxCIV)			,						
			"Base.SRM1208_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * LEOxCIV)		- (StdMag * x90)	,						
			"Base.SRM1212_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * LEOxCIV)		- (StdMag * x90)	,						
			"Base.SRM1216_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * x90)	,						
			"Base.SIX12_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * x90)	,						
			"Base.CP33Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)		- (StdMag * xUSA)	- (StdMag * LEOxCIV)		- (StdMag * x90)	,						
			"Base.CP33_17MagBase",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)		- (ExtMag * xUSA)	- (ExtMag * LEOxCIV)		- (ExtMag * x90)	,						
			"Base.22Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)			- (StdMag * LEOxCIV)			,						
			"Base.22ExtClip",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)			- (ExtMag * LEOxCIV)			,						
			"Base.380Clip",	StdMag	* w380 - (StdMag * xStdMag)	- (w380 * x380)			- (StdMag * LEOxCIV)			,						
			"Base.380StdClip",	StdMag	* w380 - (StdMag * xStdMag)	- (w380 * x380)			- (StdMag * LEOxCIV)			,						
			"Base.380ExtClip",	ExtMag	* w380 - (ExtMag * xExtMag)	- (w380 * x380)			- (ExtMag * LEOxCIV)			,						
			"Base.9mmSSClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)						,						
			"Base.9mmSSExtClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)						,						
			"Base.9mmClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)						,						
			"Base.9mmExtClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)						,						
			"Base.45DSClip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)						,						
			"Base.45DSExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)						,						
			"Base.45Clip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)			- (StdMag * LEOxCIV)	- (StdMag * LEOxMIL)		,						
			"Base.45ExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)			- (ExtMag * LEOxCIV)	- (ExtMag * LEOxMIL)		,						
			"Base.44Clip",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)			- (StdMag * LEOxCIV)			,						
			"Base.50Clip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)			- (StdMag * LEOxCIV)			,						
			"Base.223StdClip",	StdMag	* w223 - (StdMag * xStdMag)	- (w223 * x223)						,						
			"Base.223ExtClip",	ExtMag	* w223 - (ExtMag * xExtMag)	- (w223 * x223)						,						
			"Base.556Clip",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)						,						
			"Base.308StdClip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)						,						
			"Base.308ExtClip",	ExtMag	* w308 - (ExtMag * xExtMag)	- (w308 * x308)						,						
			"Base.3006ExtClip",	ExtMag	* w3006 - (ExtMag * xExtMag)	- (w3006 * x3006)		- (ExtMag * xUSA)	- (ExtMag * LEOxCIV)			,						
			"Base.SVDClip",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)		- (StdMag * xSOV)	- (StdMag * LEOxCIV)			,						
			"Base.ASHClip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xSOV)	- (StdMag * LEOxCIV)		- (StdMag * x90)	,						
			"Base.M82Clip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xUSA)		- (StdMag * LEOxMIL)		,						
			"Base.M1Clip",	StdMag	* w3006 - (StdMag * xStdMag)	- (w3006 * x3006)		- (StdMag * xUSA)	- (StdMag * LEOxCIV)			,						
			"Base.SKSClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)		- (StdMag * xSOV)	- (StdMag * LEOxCIV)			,						
			"Base.1903Clip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)			- (StdMag * LEOxCIV)			,						
			"Base.545StdClip",	StdMag	* w545x39 - (StdMag * xStdMag)	- (w545x39 * x545x39)		- (StdMag * xSOV)	- (StdMag * LEOxCIV)			,						
			"Base.AKClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)			- (StdMag * LEOxCIV)			,						
			"Base.ASVALClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)		- (ExtMag * xSOV)	- (ExtMag * LEOxCIV)			,						
			"Base.VSSClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)		- (StdMag * xSOV)	- (StdMag * LEOxCIV)			,						
			"Base.57Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)			- (StdMag * x90)	,						
			"Base.P90Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)			- (StdMag * x90)	,						
			"Base.22Drum",	DrumMag	* w22 - (DrumMag * xDrumMag)	- (w22 * x22)			- (DrumMag * LEOxCIV)			,						
			"Base.9mmDrum",	DrumMag	* w9 - (DrumMag * xDrumMag)	- (w9 * x9)						,						
			"Base.45Drum",	DrumMag	* w45 - (DrumMag * xDrumMag)	- (w45 * x45)						,						
			"Base.556Drum",	DrumMag	* w556 - (DrumMag * xDrumMag)	- (w556 * x556)						,						
			"Base.545Drum",	DrumMag	* w545x39 - (DrumMag * xDrumMag)	- (w545x39 * x545x39)		- (DrumMag * xSOV)	- (DrumMag * LEOxCIV)			,						
			"Base.762Drum",	DrumMag	* w762x39 - (DrumMag * xDrumMag)	- (w762x39 * x762x39)			- (DrumMag * LEOxCIV)			,						
			"Base.12gDrum",	DrumMag	* w12g - (DrumMag * xDrumMag)	- (w12g * x12g)						,						
			"Base.308Belt",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wLMG * xLMG)			- (StdMag * LEOxMIL)		,						
			"Base.556Belt",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wLMG * xLMG)			- (StdMag * LEOxMIL)		,						
			"Base.762x39Belt",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)	- (wLMG * xLMG)			- (StdMag * LEOxMIL)		,						
			"Base.762x54rBelt",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)	- (wLMG * xLMG)	- (StdMag * xSOV)		- (StdMag * LEOxMIL)		,						
			"Base.556MiniCan",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * LEOxMIL)		,						
			"Base.308MiniCan",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * LEOxMIL)		,						
			"Base.50MiniCan",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * LEOxMIL)		,						
			"Base.M2A1_Tank",	ExtMag	* wFLAME - (ExtMag * xExtMag)	- (wFLAME * xFLAME)		- (ExtMag * xUSA)		- (ExtMag * LEOxMIL)		,						
			"Base.M2A1_Can",	StdMag	* wFLAME - (StdMag * xStdMag)	- (wFLAME * xFLAME)		- (StdMag * xUSA)		- (StdMag * LEOxMIL)		,						
			"Base.M2A1_Can",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * LEOxCIV)			,						
			"Base.Standard_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * LEOxCIV)			,						
			"Base.Large_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * LEOxCIV)			,						
			"Base.AmmoCan30_22",	AmmoCan		* w22	- (AmmoCan * x22)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan30_380",	AmmoCan		* w380	- (AmmoCan * x380)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan30_57",	AmmoCan		* w57	- (AmmoCan * x57)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)		- (AmmoCan * x90)	,						
			"Base.AmmoCan30_9",	AmmoCan		* w9	- (AmmoCan * x9)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_38",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_357",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_45",	AmmoCan		* w45	- (AmmoCan * x45)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_44",	AmmoCan		* w44	- (AmmoCan * x44)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan30_45LC",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan30_4570",	AmmoCan		* w4570	- (AmmoCan * x4570)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan30_50MAG",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)		- (AmmoCan * x90)	,						
			"Base.AmmoCan50_223",	AmmoCan		* w223	- (AmmoCan * x223)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_556",	AmmoCan		* w556	- (AmmoCan * x556)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_762x39",	AmmoCan		* w762x39	- (AmmoCan * x762x39)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_545x39",	AmmoCan		* w545x39	- (AmmoCan * x545x39)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_762x54r",	AmmoCan		* w762x54r	- (AmmoCan * x762x54r)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_308",	AmmoCan		* w308	- (AmmoCan * x308)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_3006",	AmmoCan		* w3006	- (AmmoCan * x3006)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_410",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_20",	AmmoCan		* w20g	- (AmmoCan * x20g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_12",	AmmoCan		* w12g	- (AmmoCan * x12g)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_10",	AmmoCan		* w10g	- (AmmoCan * x10g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_4",	AmmoCan		* w4g	- (AmmoCan * x4g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_50",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * LEOxMIL)		,						
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * LEOxMIL)		,						
			"Base.AmmoCan50_ROCKET",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * LEOxMIL)		,						
			"Base.RussianMachete",	LgKnife		- (LgKnife * xLgKnife)		- (LgKnife * xSOV)	- (LgKnife * LEOxCIV)			,						
			"Base.BGMachete",	LgKnife		- (LgKnife * xLgKnife)		- (LgKnife * xUSA)	- (LgKnife * LEOxCIV)			,						
			"Base.RamboKnife",	LgKnife		- (LgKnife * xLgKnife)		- (LgKnife * xUSA)	- (LgKnife * LEOxCIV)			,						
			"Base.Butterfly",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xPAC)				,						
			"Base.PushDagger",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xUSA)				,						
			"Base.Karambit",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xPAC)				,						
			"Base.ThrowingKnife",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xUSA)	- (SmKnife * LEOxCIV)			,						
			"Base.NinjaStar",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xPAC)	- (SmKnife * LEOxCIV)			,						
			"Base.Tactical_Axe",	Axe		- (Axe * xAxe)		- (Axe * xUSA)	- (Axe * LEOxCIV)			,						
			"Base.Tactical_Sickle",	Axe		- (Axe * xAxe)		- (Axe * xUSA)	- (Axe * LEOxCIV)			,						
			"Base.Trench_Axe",	Axe		- (Axe * xAxe)		- (Axe * xEUR)	- (Axe * LEOxCIV)			,						
			"Base.Broad_Axe",	Axe		- (Axe * xAxe)		- (Axe * xEUR)	- (Axe * LEOxCIV)			,						
			"Base.DingDong",	Blunt		- (Blunt * xBlunt)		- (Blunt * xUSA)				,						
			"Base.MilitaryBaton",	Blunt		- (Blunt * xBlunt)		- (Blunt * xUSA)				,						
			"Base.ASP_B",	Blunt		- (Blunt * xBlunt)		- (Blunt * xUSA)				,						
			"Base.KillBill",	Sword		- (Sword * xSword)		- (Sword * xPAC)	- (Sword * LEOxCIV)			,						
			"Base.CH_WarSword",	Sword		- (Sword * xSword)		- (Sword * xPAC)	- (Sword * LEOxCIV)			,						
			"Base.Conan_Sword",	Sword		- (Sword * xSword)		- (Sword * xUSA)	- (Sword * LEOxCIV)			,						
		},																
		dontSpawnAmmo = 		 LEOammo	,													
	},																	
																		
	PoliceAmmo = {																	
		rolls =	LEORollAMMO	,														
		items = {																
			"Base.38Speed",	StdMag	* w357 - (StdMag * xStdMag)	- (w357 * x357)	- (StdMag * xREV)					,						
			"Base.44Speed",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)	- (StdMag * xREV)		- (StdMag * LEOxCIV)			,						
			"Base.SRM1208_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * LEOxCIV)		- (StdMag * x90)	,						
			"Base.SRM1212_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * LEOxCIV)		- (StdMag * x90)	,						
			"Base.SRM1216_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * x90)	,						
			"Base.SIX12_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * x90)	,						
			"Base.CP33Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)		- (StdMag * xUSA)	- (StdMag * LEOxCIV)		- (StdMag * x90)	,						
			"Base.CP33_17MagBase",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)		- (ExtMag * xUSA)	- (ExtMag * LEOxCIV)		- (ExtMag * x90)	,						
			"Base.22Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)			- (StdMag * LEOxCIV)			,						
			"Base.22ExtClip",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)			- (ExtMag * LEOxCIV)			,						
			"Base.380Clip",	StdMag	* w380 - (StdMag * xStdMag)	- (w380 * x380)			- (StdMag * LEOxCIV)			,						
			"Base.380ExtClip",	ExtMag	* w380 - (ExtMag * xExtMag)	- (w380 * x380)			- (ExtMag * LEOxCIV)			,						
			"Base.9mmClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)						,						
			"Base.9mmExtClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)						,						
			"Base.45DSClip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)						,						
			"Base.45DSExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)						,						
			"Base.45Clip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)			- (StdMag * LEOxCIV)	- (StdMag * LEOxMIL)		,						
			"Base.45ExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)			- (ExtMag * LEOxCIV)	- (ExtMag * LEOxMIL)		,						
			"Base.44Clip",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)			- (StdMag * LEOxCIV)			,						
			"Base.223StdClip",	StdMag	* w223 - (StdMag * xStdMag)	- (w223 * x223)						,						
			"Base.223ExtClip",	ExtMag	* w223 - (ExtMag * xExtMag)	- (w223 * x223)						,						
			"Base.556Clip",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)						,						
			"Base.308StdClip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)						,						
			"Base.308ExtClip",	ExtMag	* w308 - (ExtMag * xExtMag)	- (w308 * x308)						,						
			"Base.3006ExtClip",	ExtMag	* w3006 - (ExtMag * xExtMag)	- (w3006 * x3006)		- (ExtMag * xUSA)	- (ExtMag * LEOxCIV)			,						
			"Base.SVDClip",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)		- (StdMag * xSOV)	- (StdMag * LEOxCIV)			,						
			"Base.ASHClip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xSOV)	- (StdMag * LEOxCIV)		- (StdMag * x90)	,						
			"Base.M82Clip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xUSA)		- (StdMag * LEOxMIL)		,						
			"Base.M1Clip",	StdMag	* w3006 - (StdMag * xStdMag)	- (w3006 * x3006)		- (StdMag * xUSA)	- (StdMag * LEOxCIV)			,						
			"Base.SKSClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)		- (StdMag * xSOV)	- (StdMag * LEOxCIV)			,						
			"Base.1903Clip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)			- (StdMag * LEOxCIV)			,						
			"Base.545StdClip",	StdMag	* w545x39 - (StdMag * xStdMag)	- (w545x39 * x545x39)		- (StdMag * xSOV)	- (StdMag * LEOxCIV)			,						
			"Base.AKClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)			- (StdMag * LEOxCIV)			,						
			"Base.ASVALClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)		- (ExtMag * xSOV)	- (ExtMag * LEOxCIV)			,						
			"Base.VSSClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)		- (StdMag * xSOV)	- (StdMag * LEOxCIV)			,						
			"Base.57Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)			- (StdMag * x90)	,						
			"Base.P90Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)			- (StdMag * x90)	,						
			"Base.22Drum",	DrumMag	* w22 - (DrumMag * xDrumMag)	- (w22 * x22)			- (DrumMag * LEOxCIV)			,						
			"Base.9mmDrum",	DrumMag	* w9 - (DrumMag * xDrumMag)	- (w9 * x9)						,						
			"Base.45Drum",	DrumMag	* w45 - (DrumMag * xDrumMag)	- (w45 * x45)						,						
			"Base.556Drum",	DrumMag	* w556 - (DrumMag * xDrumMag)	- (w556 * x556)						,						
			"Base.545Drum",	DrumMag	* w545x39 - (DrumMag * xDrumMag)	- (w545x39 * x545x39)		- (DrumMag * xSOV)	- (DrumMag * LEOxCIV)			,						
			"Base.762Drum",	DrumMag	* w762x39 - (DrumMag * xDrumMag)	- (w762x39 * x762x39)			- (DrumMag * LEOxCIV)			,						
			"Base.12gDrum",	DrumMag	* w12g - (DrumMag * xDrumMag)	- (w12g * x12g)						,						
			"Base.308Belt",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wLMG * xLMG)			- (StdMag * LEOxMIL)		,						
			"Base.556Belt",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wLMG * xLMG)			- (StdMag * LEOxMIL)		,						
			"Base.762x39Belt",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)	- (wLMG * xLMG)			- (StdMag * LEOxMIL)		,						
			"Base.762x54rBelt",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)	- (wLMG * xLMG)	- (StdMag * xSOV)		- (StdMag * LEOxMIL)		,						
			"Base.556MiniCan",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * LEOxMIL)		,						
			"Base.308MiniCan",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * LEOxMIL)		,						
			"Base.50MiniCan",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * LEOxMIL)		,						
			"Base.M2A1_Tank",	ExtMag	* wFLAME - (ExtMag * xExtMag)	- (wFLAME * xFLAME)		- (ExtMag * xUSA)		- (ExtMag * LEOxMIL)		,						
			"Base.M2A1_Can",	StdMag	* wFLAME - (StdMag * xStdMag)	- (wFLAME * xFLAME)		- (StdMag * xUSA)		- (StdMag * LEOxMIL)		,						
			"Base.M2A1_Can",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * LEOxCIV)			,						
			"Base.Standard_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * LEOxCIV)			,						
			"Base.Large_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * LEOxCIV)			,						
			"Base.AmmoCan30_22",	AmmoCan		* w22	- (AmmoCan * x22)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan30_380",	AmmoCan		* w380	- (AmmoCan * x380)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan30_57",	AmmoCan		* w57	- (AmmoCan * x57)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)		- (AmmoCan * x90)	,						
			"Base.AmmoCan30_9",	AmmoCan		* w9	- (AmmoCan * x9)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_38",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_357",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_45",	AmmoCan		* w45	- (AmmoCan * x45)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_44",	AmmoCan		* w44	- (AmmoCan * x44)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan30_45LC",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan30_4570",	AmmoCan		* w4570	- (AmmoCan * x4570)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan30_50MAG",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)		- (AmmoCan * x90)	,						
			"Base.AmmoCan50_223",	AmmoCan		* w223	- (AmmoCan * x223)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_556",	AmmoCan		* w556	- (AmmoCan * x556)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_762x39",	AmmoCan		* w762x39	- (AmmoCan * x762x39)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_545x39",	AmmoCan		* w545x39	- (AmmoCan * x545x39)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_762x54r",	AmmoCan		* w762x54r	- (AmmoCan * x762x54r)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_308",	AmmoCan		* w308	- (AmmoCan * x308)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_3006",	AmmoCan		* w3006	- (AmmoCan * x3006)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_410",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_20",	AmmoCan		* w20g	- (AmmoCan * x20g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_12",	AmmoCan		* w12g	- (AmmoCan * x12g)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_10",	AmmoCan		* w10g	- (AmmoCan * x10g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_4",	AmmoCan		* w4g	- (AmmoCan * x4g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_50",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * LEOxMIL)		,						
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * LEOxMIL)		,						
			"Base.AmmoCan50_ROCKET",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * LEOxMIL)		,						
			"Base.BB177Box",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.CO2_Cartridge_Box",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.PB68Bag",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.Bullets22Box",	AmmoBox		* w22	- (AmmoBox * x22)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.Bullets380Box",	AmmoBox		* w380	- (AmmoBox * x380)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.Bullets57Box",	AmmoBox		* w57	- (AmmoBox * x57)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)		- (AmmoBox * x90)	,						
			"Base.Bullets9mmBox",	AmmoBox		* w9	- (AmmoBox * x9)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets38Box",	AmmoBox		* w357	- (AmmoBox * x357)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets357Box",	AmmoBox		* w357	- (AmmoBox * x357)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets45Box",	AmmoBox		* w45	- (AmmoBox * x45)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets44Box",	AmmoBox		* w44	- (AmmoBox * x44)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.Bullets45LCBox",	AmmoBox		* w45LC	- (AmmoBox * x45LC)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.Bullets4570Box",	AmmoBox		* w4570	- (AmmoBox * x4570)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.Bullets50MAGBox",	AmmoBox		* wBMG	- (AmmoBox * xBMG)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)		- (AmmoBox * x90)	,						
			"Base.223Box",	AmmoBox		* w223	- (AmmoBox * x223)	- (AmmoBox * xAmmoBox)				,						
			"Base.556Box",	AmmoBox		* w556	- (AmmoBox * x556)	- (AmmoBox * xAmmoBox)				,						
			"Base.762x39Box",	AmmoBox		* w762x39	- (AmmoBox * x762x39)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.545x39Box",	AmmoBox		* w545x39	- (AmmoBox * x545x39)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.762x54rBox",	AmmoBox		* w762x54r	- (AmmoBox * x762x54r)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.308Box",	AmmoBox		* w308	- (AmmoBox * x308)	- (AmmoBox * xAmmoBox)				,						
			"Base.3006Box",	AmmoBox		* w3006	- (AmmoBox * x3006)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.410gShotgunShellsBox",	AmmoBox		* w45LC	- (AmmoBox * x45LC)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.20gShotgunShellsBox",	AmmoBox		* w20g	- (AmmoBox * x20g)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.ShotgunShellsBox",	AmmoBox		* w12g	- (AmmoBox * x12g)	- (AmmoBox * xAmmoBox)				,						
			"Base.10gShotgunShellsBox",	AmmoBox		* w10g	- (AmmoBox * x10g)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.4gShotgunShellsBox",	AmmoBox		* w4g	- (AmmoBox * x4g)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.50BMGBox",	AmmoBox		* wBMG	- (AmmoBox * xBMG)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.Bolt_Bear",	AmmoBox		* wBOW	- (AmmoBox * xBOW)		- (AmmoBox * LEOxCIV)			,						
			"Base.Bolt_Bear_Pack",	AmmoBox		* wBOW	- (AmmoBox * xBOW)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.Arrow_Fiberglass",	AmmoBox		* wBOW	- (AmmoBox * xBOW)		- (AmmoBox * LEOxCIV)			,						
			"Base.Arrow_Fiberglass_Pack",	AmmoBox		* wBOW	- (AmmoBox * xBOW)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.40HERound",	AmmoBox		* wGREN	- (AmmoBox * xGREN)			- (AmmoBox * LEOxMIL)		,						
			"Base.40INCRound",	AmmoBox		* wGREN	- (AmmoBox * xGREN)			- (AmmoBox * LEOxMIL)		,						
			"Base.HERocket",	AmmoBox		* wGREN	- (AmmoBox * xGREN)			- (AmmoBox * LEOxMIL)		,						
			"Base.Flare",	AmmoBox		* wFLAME	- (AmmoBox * xFLAME)					,						
			"Base.Grenade_Fragmentation",	AmmoBox	* LEOx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)		- (AmmoBox* LEOx * LEOxMIL)		,						
			"Base.Grenade_Stick",	AmmoBox	* LEOx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xEUR)		- (AmmoBox* LEOx * LEOxMIL)		,						
			"Base.Explosive_Landmine",	AmmoBox	* LEOx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)		- (AmmoBox* LEOx * LEOxMIL)		,						
			"Base.Explosive_Claymore_P",	AmmoBox	* LEOx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)		- (AmmoBox* LEOx * LEOxMIL)		,						
			"Base.PolyCan_Red_SPASClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w12g	- (w12g * x12g)					,						
			"Base.PolyCan_Red_12gDrum",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w12g	- (w12g * x12g)					,						
			"Base.PolyCan_Red_38Speed",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w357	- (w357 * x357)	- (PolyCan * xREV)				,						
			"Base.PolyCan_Red_44Speed",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w44	- (w44 * x44)	- (PolyCan * xREV)	- (PolyCan * LEOxCIV)			,						
			"Base.PolyCan_Blue_9mmSSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)		- (PolyCan * LEOxCIV)			,						
			"Base.PolyCan_Blue_9mmSSExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)		- (PolyCan * LEOxCIV)			,						
			"Base.PolyCan_Blue_9mmClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)					,						
			"Base.PolyCan_Blue_9mmExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)					,						
			"Base.PolyCan_Blue_9mmDrum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)					,						
			"Base.PolyCan_Blue_45DSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)					,						
			"Base.PolyCan_Blue_45DSExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)					,						
			"Base.PolyCan_Blue_45Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)					,						
			"Base.PolyCan_Blue_45Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)		- (PolyCan * LEOxCIV)			,						
			"Base.PolyCan_Blue_45ExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)		- (PolyCan * LEOxCIV)			,						
			"Base.PolyCan_Brown_556Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w556	- (w556 * x556)					,						
			"Base.PolyCan_Brown_556Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w556	- (w556 * x556)					,						
			"Base.PolyCan_Brown_AKClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)		- (PolyCan * LEOxCIV)			,						
			"Base.PolyCan_Brown_762Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)		- (PolyCan * LEOxCIV)			,						
			"Base.PolyCan_Brown_545StdClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w545x39	- (w545x39 * x545x39)		- (PolyCan * LEOxCIV)			,						
			"Base.PolyCan_Brown_545Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w545x39	- (w545x39 * x545x39)		- (PolyCan * LEOxCIV)			,						
			"Base.PolyCan_Beige_308StdClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)					,						
			"Base.PolyCan_Beige_308ExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)					,						
			"Base.PolyCan_Beige_BMG",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* wBMG	- (wBMG * xBMG)			- (PolyCan * LEOxMIL)		,						
			"Base.PolyCan_Beige_K11",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* wGREN	- (wGREN * xGREN)	- (PolyCan * xKOR)		- (PolyCan * LEOxMIL)	- (PolyCan * x90)	,						
			"Base.PolyCan_Beige_SVDClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x54r	- (w762x54r * x762x54r)	- (PolyCan * xSOV)	- (PolyCan * LEOxCIV)	- (PolyCan * LEOxMIL)		,						
			"Base.PolyCan_Beige_SKSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)	- (PolyCan * xSOV)	- (PolyCan * LEOxCIV)	- (PolyCan * LEOxMIL)		,						
			"Base.PolyCan_Beige_M1Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w3006	- (w3006 * x3006)	- (PolyCan * xUSA)	- (PolyCan * LEOxCIV)	- (PolyCan * LEOxMIL)		,						
			"Base.PolyCan_Beige_1903Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)		- (PolyCan * LEOxCIV)	- (PolyCan * LEOxMIL)		,						
		}																
	},																	
																		
																		
	ArmyGuns = {		-- ArmyGuns															
		rolls =	MILRollGUN	,														
		items = {																
			"Base.UmarexSS",	wBB	 * MILx	- (wBB * xBB)		- (wBB * MILx * xUSA)	- (wBB * MILx * MILxNON)	- (wBB * MILx * MILxUSA)	- (wBB * MILx * MILxSOV)	- (wBB * MILx * MILxCZE)	- (wBB * MILx * MILxKOR)	- (wBB * MILx * MILxPAC)	- (wBB * MILx * MILxEUR)	- (wBB * MILx * MILxISR)	- (wBB * MILx * x90)	,
			"Base.Benjamin_M397",	wBB	 * MILx	- (wBB * xBB)		- (wBB * MILx * xUSA)	- (wBB * MILx * MILxNON)	- (wBB * MILx * MILxUSA)	- (wBB * MILx * MILxSOV)	- (wBB * MILx * MILxCZE)	- (wBB * MILx * MILxKOR)	- (wBB * MILx * MILxPAC)	- (wBB * MILx * MILxEUR)	- (wBB * MILx * MILxISR)		,
			"Base.RWS_M34",	wBB	 * MILx	- (wBB * xBB)		- (wBB * MILx * xUSA)	- (wBB * MILx * MILxNON)	- (wBB * MILx * MILxUSA)	- (wBB * MILx * MILxSOV)	- (wBB * MILx * MILxCZE)	- (wBB * MILx * MILxKOR)	- (wBB * MILx * MILxPAC)	- (wBB * MILx * MILxEUR)	- (wBB * MILx * MILxISR)	- (wBB * MILx * x90)	,
			"Base.VM_68",	wBB	 * MILx	- (wBB * xBB)		- (wBB * MILx * xUSA)	- (wBB * MILx * MILxNON)	- (wBB * MILx * MILxUSA)	- (wBB * MILx * MILxSOV)	- (wBB * MILx * MILxCZE)	- (wBB * MILx * MILxKOR)	- (wBB * MILx * MILxPAC)	- (wBB * MILx * MILxEUR)	- (wBB * MILx * MILxISR)		,
			"Base.Auto_Cocker",	wBB	 * MILx	- (wBB * xBB)		- (wBB * MILx * xUSA)	- (wBB * MILx * MILxNON)	- (wBB * MILx * MILxUSA)	- (wBB * MILx * MILxSOV)	- (wBB * MILx * MILxCZE)	- (wBB * MILx * MILxKOR)	- (wBB * MILx * MILxPAC)	- (wBB * MILx * MILxEUR)	- (wBB * MILx * MILxISR)		,
			"Base.Tippmann_SL68",	wBB	 * MILx	- (wBB * xBB)		- (wBB * MILx * xUSA)	- (wBB * MILx * MILxNON)	- (wBB * MILx * MILxUSA)	- (wBB * MILx * MILxSOV)	- (wBB * MILx * MILxCZE)	- (wBB * MILx * MILxKOR)	- (wBB * MILx * MILxPAC)	- (wBB * MILx * MILxEUR)	- (wBB * MILx * MILxISR)		,
			"Base.Sheridan_PGP",	wBB	 * MILx	- (wBB * xBB)		- (wBB * MILx * xUSA)	- (wBB * MILx * MILxNON)	- (wBB * MILx * MILxUSA)	- (wBB * MILx * MILxSOV)	- (wBB * MILx * MILxCZE)	- (wBB * MILx * MILxKOR)	- (wBB * MILx * MILxPAC)	- (wBB * MILx * MILxEUR)	- (wBB * MILx * MILxISR)		,
			"Base.CP33",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)	- (w22 * MILx * x90)	,
			"Base.Ruger_MK4",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)	- (w22 * MILx * x90)	,
			"Base.Ruger_MK4_2245",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)	- (w22 * MILx * x90)	,
			"Base.Buckmark",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.Buckmark_Long",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.Buckmark_Carbine",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.HK4_22",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xEUR)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.ZIP22",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)	- (w22 * MILx * x90)	,
			"Base.Ruger_1022",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)		- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)			,
			"Base.Marlin_M70",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.Cricket_22",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xBOLT)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.AR7",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.Calico_22LR",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSMG)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.American180",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSMG)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.Winchester1903",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xLEVER)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.KRISS22_MK11_Stock",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSMG)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)	- (w22 * MILx * x90)	,
			"Base.KRISS22_CRB_Stock",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSMG)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)	- (w22 * MILx * x90)	,
			"Base.CMR_30",	w22	 * MILx	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)	- (w22 * MILx * x90)	,
			"Base.G42",	w380	 * MILx	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xEUR)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)	- (w380 * MILx * x90)	,
			"Base.LCP380",	w380	 * MILx	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xUSA)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)	- (w380 * MILx * x90)	,
			"Base.BodyGuard380",	w380	 * MILx	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xUSA)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)	- (w380 * MILx * x90)	,
			"Base.Bersa85F",	w380	 * MILx	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xREST)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)		,
			"Base.Colt1903",	w380	 * MILx	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xUSA)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)		,
			"Base.Makarov380",	w380	 * MILx	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xSOV)		- (w380 * MILx * MILxUSA)		- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)		- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)		,
			"Base.PPK",	w380	 * MILx	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xEUR)		- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)		- (w380 * MILx * MILxISR)		,
			"Base.HK4_380",	w380	 * MILx	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xEUR)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)		,
			"Base.VP70",	w380	 * MILx	- (w380 * x380)	- (w380 * MILx * xSMG)	- (w380 * MILx * xEUR)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)		,
			"Base.VP70_Stock",	w380	 * MILx	- (w380 * x380)	- (w380 * MILx * xSMG)	- (w380 * MILx * xEUR)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)		,
			"Base.Vz61_Fixed",	w380	 * MILx	- (w380 * x380)	- (w380 * MILx * xSMG)	- (w380 * MILx * xCZE)		- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)		- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)			,
			"Base.Vz61_Fold",	w380	 * MILx	- (w380 * x380)	- (w380 * MILx * xSMG)	- (w380 * MILx * xCZE)		- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)		- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)			,
			"Base.BT380_Stock",	w380	 * MILx	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xEUR)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)	- (w380 * MILx * x90)	,
			"Base.FN_57", 	w57	 * MILx	- (w57 * x57)	- (w57 * MILx * xSEMI)	- (w57 * MILx * xEUR)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.FN_57_MK2", 	w57	 * MILx	- (w57 * x57)	- (w57 * MILx * xSEMI)	- (w57 * MILx * xEUR)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.FN_P90",	w57	 * MILx	- (w57 * x57)	- (w57 * MILx * xSMG)	- (w57 * MILx * xEUR)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.FN_PS90",	w57	 * MILx	- (w57 * x57)	- (w57 * MILx * xSMG)	- (w57 * MILx * xEUR)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.MPA57DMG",	w57	 * MILx	- (w57 * x57)	- (w57 * MILx * xSMG)	- (w57 * MILx * xUSA)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.MPA57DMG_Carbine",	w57	 * MILx	- (w57 * x57)	- (w57 * MILx * xSMG)	- (w57 * MILx * xUSA)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.AR57_PDW",	w57	 * MILx	- (w57 * x57)	- (w57 * MILx * xSMG)	- (w57 * MILx * xUSA)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.AR57_PDW_Long",	w57	 * MILx	- (w57 * x57)	- (w57 * MILx * xSMG)	- (w57 * MILx * xUSA)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.Ruger_PCC",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.Ruger_PCC_R",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.Ruger_PCC_M",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.HiPoint",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.HiPoint_Carbine",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.STAR_BM", 	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xREST)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.M39",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.MK22",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)				,
			"Base.G43",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.CZ75",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.CZ_75b",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.CZ_75_SP01_SS",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.CZ_75_SP01",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.CZ_75_Compact",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.CZ_75_P01",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.CZ_2075",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)		- (w9 * MILx * x90)	,
			"Base.CZ_75_Shadow",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)		- (w9 * MILx * x90)	,
			"Base.CZ_75_Czechmate",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)		- (w9 * MILx * x90)	,
			"Base.EAA_Witness_9",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.EAA_Witness_Long_9",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.G17",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)				,
			"Base.G18",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)				,
			"Base.G34", 	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.K5",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xKOR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.RPD_92FS",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.M9",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.M9A3",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)		- (w9 * MILx * x90)	,
			"Base.B93R",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.M5906",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.XD9",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.MP9",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.P226",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)				,
			"Base.APS",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xSOV)		- (w9 * MILx * MILxUSA)		- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)		- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Makarov",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xSOV)		- (w9 * MILx * MILxUSA)		- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)		- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.PB",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xSOV)		- (w9 * MILx * MILxUSA)		- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)		- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Luger",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Luger_WW1",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Luger_Carbine",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.UZI", 	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xREST)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.UZI_Wood",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xREST)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.UZI_Micro",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xREST)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.BT9_Fold",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.UMP9_Stock",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.SUB2000",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.MP5_Fixed",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.MP5_Stock",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.MP5SD6_Fixed",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.MP5SD6_Stock",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.EVO_Fold",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xCZE)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)		- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.K7_Stock",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xKOR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.AUG9",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.KG9",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Calico_M900_Fold",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Calico_M950_Pistol",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Bizon2_01_Stock",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xSOV)		- (w9 * MILx * MILxUSA)		- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.VSS",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xSOV)		- (w9 * MILx * MILxUSA)		- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)		- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.ASVAL",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xSOV)		- (w9 * MILx * MILxUSA)		- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)		- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.M1Carbine",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.M2Carbine",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.M635",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.M635S",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.M635SD",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.MP7",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.Jatimatic",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Sten",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.Sten_MK2",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.Sten_MK2SD",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.STAR_Z45_Stock",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.STAR_Z45_Fixed",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.KRISS9_Stock",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.KRISS9_MLOK_Stock",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.JW3_TTI_MPX",	w9	 * MILx	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.M5238",	w357	 * MILx	- (w357 * x357)	- (w357 * MILx * xSEMI)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.Taurus856",	w357	 * MILx	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xREST)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)	- (w357 * MILx * x90)	,
			"Base.Colt_Service38",	w357	 * MILx	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.GP100_2",	w357	 * MILx	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.GP100_4",	w357	 * MILx	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.GP100_6",	w357	 * MILx	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.K6S",	w357	 * MILx	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)	- (w357 * MILx * x90)	,
			"Base.Rhino_200DS",	w357	 * MILx	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xEUR)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)	- (w357 * MILx * x90)	,
			"Base.Rhino_40DS",	w357	 * MILx	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xEUR)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)	- (w357 * MILx * x90)	,
			"Base.Rhino_60DS",	w357	 * MILx	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xEUR)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)	- (w357 * MILx * x90)	,
			"Base.SW_327",	w357	 * MILx	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)	- (w357 * MILx * x90)	,
			"Base.M1936",	w357	 * MILx	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.NEF_Handi_38",	w357	 * MILx	- (w357 * x357)	- (w357 * MILx * xBREAK)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.Marlin_1894",	w357	 * MILx	- (w357 * x357)	- (w357 * MILx * xLEVER)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.CZ97B",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xCZE)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)		- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)		- (w45 * MILx * x90)	,
			"Base.EAA_Witness_45",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xEUR)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)		- (w45 * MILx * MILxISR)		,
			"Base.EAA_Witness_Long_45",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xEUR)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.G21",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xEUR)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)				,
			"Base.XD4",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)		- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)	- (w45 * MILx * x90)	,
			"Base.MP45",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)	- (w45 * MILx * x90)	,
			"Base.P220",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xEUR)			- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)		- (w45 * MILx * MILxPAC)				,
			"Base.M4506",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.HK_MK23",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xEUR)			- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)		- (w45 * MILx * MILxPAC)				,
			"Base.HK_USP",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xEUR)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.HK_USP_Match",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xEUR)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.PULP_1911",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.PARA1911",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.AMT1911",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.AMT1911_Long",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.M1911_Carbine",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.Colt1911",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)			- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)		- (w45 * MILx * MILxPAC)		- (w45 * MILx * MILxISR)		,
			"Base.Colt_Kimber",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)	- (w45 * MILx * x90)	,
			"Base.Colt_Commander",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)			- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)		- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.UMP45_Stock",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xEUR)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)		- (w45 * MILx * MILxISR)	- (w45 * MILx * x90)	,
			"Base.MAC10_Fold",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xUSA)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)				,
			"Base.KRISS_Stock",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)	- (w45 * MILx * x90)	,
			"Base.Commando",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xBOLT)	- (w45 * MILx * xEUR)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.Thompson",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xUSA)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)		- (w45 * MILx * MILxISR)		,
			"Base.Thompson_1928",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xUSA)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)		- (w45 * MILx * MILxISR)		,
			"Base.M2Hyde",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.Model55_Fold",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.Model50",	w45	 * MILx	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.Colt_Navy_1851",	w44	 * MILx	- (w44 * x44)	- (w44 * MILx * xREV)	- (w44 * MILx * xUSA)	- (w44 * MILx * MILxNON)	- (w44 * MILx * MILxUSA)	- (w44 * MILx * MILxSOV)	- (w44 * MILx * MILxCZE)	- (w44 * MILx * MILxKOR)	- (w44 * MILx * MILxPAC)	- (w44 * MILx * MILxEUR)	- (w44 * MILx * MILxISR)		,
			"Base.M29_44",	w44	 * MILx	- (w44 * x44)	- (w44 * MILx * xREV)	- (w44 * MILx * xUSA)	- (w44 * MILx * MILxNON)	- (w44 * MILx * MILxUSA)	- (w44 * MILx * MILxSOV)	- (w44 * MILx * MILxCZE)	- (w44 * MILx * MILxKOR)	- (w44 * MILx * MILxPAC)	- (w44 * MILx * MILxEUR)	- (w44 * MILx * MILxISR)		,
			"Base.M29_44Carbine",	w44	 * MILx	- (w44 * x44)	- (w44 * MILx * xREV)	- (w44 * MILx * xUSA)	- (w44 * MILx * MILxNON)	- (w44 * MILx * MILxUSA)	- (w44 * MILx * MILxSOV)	- (w44 * MILx * MILxCZE)	- (w44 * MILx * MILxKOR)	- (w44 * MILx * MILxPAC)	- (w44 * MILx * MILxEUR)	- (w44 * MILx * MILxISR)		,
			"Base.Automag",	w44	 * MILx	- (w44 * x44)	- (w44 * MILx * xSEMI)	- (w44 * MILx * xUSA)	- (w44 * MILx * MILxNON)	- (w44 * MILx * MILxUSA)	- (w44 * MILx * MILxSOV)	- (w44 * MILx * MILxCZE)	- (w44 * MILx * MILxKOR)	- (w44 * MILx * MILxPAC)	- (w44 * MILx * MILxEUR)	- (w44 * MILx * MILxISR)		,
			"Base.DEagle",	w44	 * MILx	- (w44 * x44)	- (w44 * MILx * xSEMI)	- (w44 * MILx * xISR)		- (w44 * MILx * MILxUSA)	- (w44 * MILx * MILxSOV)	- (w44 * MILx * MILxCZE)	- (w44 * MILx * MILxKOR)	- (w44 * MILx * MILxPAC)	- (w44 * MILx * MILxEUR)			,
			"Base.DEagle_Long",	w44	 * MILx	- (w44 * x44)	- (w44 * MILx * xSEMI)	- (w44 * MILx * xISR)		- (w44 * MILx * MILxUSA)	- (w44 * MILx * MILxSOV)	- (w44 * MILx * MILxCZE)	- (w44 * MILx * MILxKOR)	- (w44 * MILx * MILxPAC)	- (w44 * MILx * MILxEUR)			,
			"Base.DEagle_Hawk",	wBMG	 * MILx	- (wBMG * xBMG)	- (wBMG * MILx * xSEMI)	- (wBMG * MILx * xISR)		- (wBMG * MILx * MILxUSA)	- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)			,
			"Base.Winchester1866",	w45LC	 * MILx	- (w44 * x44)	- (w45LC * MILx * xLEVER)	- (w45LC * MILx * xUSA)	- (w45LC * MILx * MILxNON)	- (w45LC * MILx * MILxUSA)	- (w45LC * MILx * MILxSOV)	- (w45LC * MILx * MILxCZE)	- (w45LC * MILx * MILxKOR)	- (w45LC * MILx * MILxPAC)	- (w45LC * MILx * MILxEUR)	- (w45LC * MILx * MILxISR)		,
			"Base.Win_1894",	w44	 * MILx	- (w44 * x44)	- (w44 * MILx * xLEVER)	- (w44 * MILx * xUSA)	- (w44 * MILx * MILxNON)	- (w44 * MILx * MILxUSA)	- (w44 * MILx * MILxSOV)	- (w44 * MILx * MILxCZE)	- (w44 * MILx * MILxKOR)	- (w44 * MILx * MILxPAC)	- (w44 * MILx * MILxEUR)	- (w44 * MILx * MILxISR)		,
			"Base.Colt_Service45",	w45LC	 * MILx	- (w45LC * x45LC)	- (w45LC * MILx * xREV)	- (w45LC * MILx * xUSA)	- (w45LC * MILx * MILxNON)	- (w45LC * MILx * MILxUSA)	- (w45LC * MILx * MILxSOV)	- (w45LC * MILx * MILxCZE)	- (w45LC * MILx * MILxKOR)	- (w45LC * MILx * MILxPAC)	- (w45LC * MILx * MILxEUR)	- (w45LC * MILx * MILxISR)		,
			"Base.Judge_45LC",	w45LC	 * MILx	- (w45LC * x45LC)	- (w45LC * MILx * xREV)	- (w45LC * MILx * xREST)	- (w45LC * MILx * MILxNON)	- (w45LC * MILx * MILxUSA)	- (w45LC * MILx * MILxSOV)	- (w45LC * MILx * MILxCZE)	- (w45LC * MILx * MILxKOR)	- (w45LC * MILx * MILxPAC)	- (w45LC * MILx * MILxEUR)	- (w45LC * MILx * MILxISR)	- (w45LC * MILx * x90)	,
			"Base.Judge513_45LC",	w45LC	 * MILx	- (w45LC * x45LC)	- (w45LC * MILx * xREV)	- (w45LC * MILx * xREST)	- (w45LC * MILx * MILxNON)	- (w45LC * MILx * MILxUSA)	- (w45LC * MILx * MILxSOV)	- (w45LC * MILx * MILxCZE)	- (w45LC * MILx * MILxKOR)	- (w45LC * MILx * MILxPAC)	- (w45LC * MILx * MILxEUR)	- (w45LC * MILx * MILxISR)	- (w45LC * MILx * x90)	,
			"Base.Judge513_Long_45LC",	w45LC	 * MILx	- (w45LC * x45LC)	- (w45LC * MILx * xREV)	- (w45LC * MILx * xREST)	- (w45LC * MILx * MILxNON)	- (w45LC * MILx * MILxUSA)	- (w45LC * MILx * MILxSOV)	- (w45LC * MILx * MILxCZE)	- (w45LC * MILx * MILxKOR)	- (w45LC * MILx * MILxPAC)	- (w45LC * MILx * MILxEUR)	- (w45LC * MILx * MILxISR)	- (w45LC * MILx * x90)	,
			"Base.TXS_804_45LC",	w45LC	 * MILx	- (w45LC * x45LC)	- (w45LC * MILx * xREV)	- (w45LC * MILx * xREST)	- (w45LC * MILx * MILxNON)	- (w45LC * MILx * MILxUSA)	- (w45LC * MILx * MILxSOV)	- (w45LC * MILx * MILxCZE)	- (w45LC * MILx * MILxKOR)	- (w45LC * MILx * MILxPAC)	- (w45LC * MILx * MILxEUR)	- (w45LC * MILx * MILxISR)		,
			"Base.Winchester1873",	w45LC	 * MILx	- (w45LC * x45LC)	- (w45LC * MILx * xLEVER)	- (w45LC * MILx * xUSA)	- (w45LC * MILx * MILxNON)	- (w45LC * MILx * MILxUSA)	- (w45LC * MILx * MILxSOV)	- (w45LC * MILx * MILxCZE)	- (w45LC * MILx * MILxKOR)	- (w45LC * MILx * MILxPAC)	- (w45LC * MILx * MILxEUR)	- (w45LC * MILx * MILxISR)		,
			"Base.Sako85",	w223	 * MILx	- (w223 * x223)	- (w223 * MILx * xBOLT)	- (w223 * MILx * xEUR)		- (w223 * MILx * MILxUSA)	- (w223 * MILx * MILxSOV)		- (w223 * MILx * MILxKOR)	- (w223 * MILx * MILxPAC)	- (w223 * MILx * MILxEUR)	- (w223 * MILx * MILxISR)		,
			"Base.MINI14",	w223	 * MILx	- (w223 * x223)	- (w223 * MILx * xSEMI)	- (w223 * MILx * xUSA)	- (w223 * MILx * MILxNON)	- (w223 * MILx * MILxUSA)	- (w223 * MILx * MILxSOV)	- (w223 * MILx * MILxCZE)	- (w223 * MILx * MILxKOR)	- (w223 * MILx * MILxPAC)	- (w223 * MILx * MILxEUR)	- (w223 * MILx * MILxISR)		,
			"Base.MINI14_Stock",	w223	 * MILx	- (w223 * x223)	- (w223 * MILx * xSEMI)	- (w223 * MILx * xUSA)	- (w223 * MILx * MILxNON)	- (w223 * MILx * MILxUSA)	- (w223 * MILx * MILxSOV)	- (w223 * MILx * MILxCZE)	- (w223 * MILx * MILxKOR)	- (w223 * MILx * MILxPAC)	- (w223 * MILx * MILxEUR)	- (w223 * MILx * MILxISR)		,
			"Base.MINI14_T",	w223	 * MILx	- (w223 * x223)	- (w223 * MILx * xSEMI)	- (w223 * MILx * xUSA)	- (w223 * MILx * MILxNON)	- (w223 * MILx * MILxUSA)	- (w223 * MILx * MILxSOV)	- (w223 * MILx * MILxCZE)	- (w223 * MILx * MILxKOR)	- (w223 * MILx * MILxPAC)	- (w223 * MILx * MILxEUR)	- (w223 * MILx * MILxISR)		,
			"Base.Viper",	w223	 * MILx	- (w223 * x223)	- (w223 * MILx * xLEVER)	- (w223 * MILx * xREST)	- (w223 * MILx * MILxNON)	- (w223 * MILx * MILxUSA)	- (w223 * MILx * MILxSOV)	- (w223 * MILx * MILxCZE)	- (w223 * MILx * MILxKOR)	- (w223 * MILx * MILxPAC)	- (w223 * MILx * MILxEUR)	- (w223 * MILx * MILxISR)	- (w223 * MILx * x90)	,
			"Base.Carbon15_97",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.CAR15SMG",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)			,
			"Base.CAR15_Survival",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)			,
			"Base.XM8Compact_Pistol",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.XM8",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.SCARSC_Stock",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.SCARL",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.SCAR_B",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.G33",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.G36",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.G36C",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.G36KV",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.G11K3",	w57	 * MILx	- (w57 * x57)	- (w57 * MILx * xAUTO)	- (w57 * MILx * xEUR)		- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.MK18",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.AK5C",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.M16A1",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)				,
			"Base.M16A2",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)				,
			"Base.M16A3",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.M723",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.XM117",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.H416",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)			- (w556 * MILx * MILxSOV)			- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.M4",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.M4A1",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)			,
			"Base.ADAR",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xSOV)		- (w556 * MILx * MILxUSA)		- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)		- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.K2C1_PH",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.K2_ADVK2",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.K2_Grunt",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.K1A_DEV",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.K1DEV",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.K2_C1",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.K2_1",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.K2_203",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.K1_1",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.DR_200",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.LVOA_C",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xSEMI)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.AAC_Honey",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.AAC_HoneySD",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.Bush_AR15_MOE",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xSEMI)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.Bush_XM15",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xSEMI)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.Bush_XM15_Custom",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xSEMI)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.MCX_Virtus",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.MCX_VirtusPatrol",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.MCX_Socom",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.MCX_Spear",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xSEMI)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.ColtM16",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.M16Wood",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.M16Tape",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.FAMAS",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.FAMAS_G2",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.FAMAS_Felin",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.AUG",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.AUG_A3",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.M85_Stock",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xSOV)		- (w556 * MILx * MILxUSA)		- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)		- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.AN94",	w545x39	 * MILx	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)		,
			"Base.AK74",	w545x39	 * MILx	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)		,
			"Base.AKS74",	w545x39	 * MILx	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)		,
			"Base.AKS74U",	w545x39	 * MILx	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)		,
			"Base.AK74_Alpha",	w545x39	 * MILx	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)	- (w545x39 * MILx * x90)	,
			"Base.AK12",	w545x39	 * MILx	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)	- (w545x39 * MILx * x90)	,
			"Base.AK12_New",	w545x39	 * MILx	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)	- (w545x39 * MILx * x90)	,
			"Base.RPK74",	w545x39	 * MILx	- (w545x39 * x545x39)	- (w545x39 * MILx * xLMG)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)		,
			"Base.RPK16",	w545x39	 * MILx	- (w545x39 * x545x39)	- (w545x39 * MILx * xLMG)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)	- (w545x39 * MILx * x90)	,
			"Base.L85",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.L85A2",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.L86",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.L22",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.F2000",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.Tavor",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xISR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)		- (w556 * MILx * x90)	,
			"Base.AR18",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.Type20",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xPAC)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)		- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.Type89",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xPAC)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)		- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.QBZ_95",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xPAC)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)		- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.Shrike",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xLMG)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)			- (w556 * MILx * x90)	,
			"Base.XM8LMG",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xLMG)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.M249",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xLMG)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)			,
			"Base.M249E3",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xLMG)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)		- (w556 * MILx * x90)	,
			"Base.K3LMG",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xLMG)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.AK47",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)			,
			"Base.AKM",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)			,
			"Base.AK103",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)	- (w762x39 * MILx * x90)	,
			"Base.MD65_Stock",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.AKMS_Stock",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Vz58",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xCZE)		- (w762x39 * MILx * MILxUSA)	- (w762x39 * MILx * MILxSOV)		- (w762x39 * MILx * MILxKOR)	- (w762x39 * MILx * MILxPAC)	- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Vz58_Stock",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xCZE)		- (w762x39 * MILx * MILxUSA)	- (w762x39 * MILx * MILxSOV)		- (w762x39 * MILx * MILxKOR)	- (w762x39 * MILx * MILxPAC)	- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Vz58_Mini_Stock",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xCZE)		- (w762x39 * MILx * MILxUSA)	- (w762x39 * MILx * MILxSOV)		- (w762x39 * MILx * MILxKOR)	- (w762x39 * MILx * MILxPAC)	- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.SKS",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xSEMI)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.SKS_PARA",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xSEMI)	- (w762x39 * MILx * xPAC)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.MK47",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xSEMI)	- (w762x39 * MILx * xUSA)	- (w762x39 * MILx * MILxNON)	- (w762x39 * MILx * MILxUSA)	- (w762x39 * MILx * MILxSOV)	- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)	- (w762x39 * MILx * MILxPAC)	- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)	- (w762x39 * MILx * x90)	,
			"Base.AKM_Custom",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xUSA)	- (w762x39 * MILx * MILxNON)	- (w762x39 * MILx * MILxUSA)	- (w762x39 * MILx * MILxSOV)	- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)	- (w762x39 * MILx * MILxPAC)	- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)	- (w762x39 * MILx * x90)	,
			"Base.AK74_Custom",	w545x39	 * MILx	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xUSA)	- (w545x39 * MILx * MILxNON)	- (w545x39 * MILx * MILxUSA)	- (w545x39 * MILx * MILxSOV)	- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)	- (w545x39 * MILx * MILxPAC)	- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)	- (w545x39 * MILx * x90)	,
			"Base.Ots14_1A_01",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Ots14_1A_02",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Ots14_4A",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Ots14_4A_01",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Ots14_4A_03",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Ots14_4A_GL",	wGREN	 * MILx	- (wGREN * xGREN)	- (wGREN * MILx * xAUTO)	- (wGREN * MILx * xSOV)		- (wGREN * MILx * MILxUSA)		- (wGREN * MILx * MILxCZE)	- (wGREN * MILx * MILxKOR)		- (wGREN * MILx * MILxEUR)	- (wGREN * MILx * MILxISR)		,
			"Base.AK308",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xSOV)		- (w308 * MILx * MILxUSA)		- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.SCARH",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.SCAR20",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.G28",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.G3",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)		,
			"Base.PSG1",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xSEMI)	- (w308 * MILx * xEUR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)		,
			"Base.MSG90",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xSEMI)	- (w308 * MILx * xEUR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)		,
			"Base.Type64",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xPAC)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)		- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.FAL",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)		,
			"Base.FAL_PARA_Stock",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)		,
			"Base.FN_FNC",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.WA2000",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xEUR)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.SVD",	w762x54r	 * MILx	- (w762x54r * x762x54r)	- (w762x54r * MILx * xSEMI)	- (w762x54r * MILx * xSOV)		- (w762x54r * MILx * MILxUSA)			- (w762x54r * MILx * MILxKOR)		- (w762x54r * MILx * MILxEUR)	- (w762x54r * MILx * MILxISR)		,
			"Base.SVDK",	w762x54r	 * MILx	- (w762x54r * x762x54r)	- (w762x54r * MILx * xSEMI)	- (w762x54r * MILx * xSOV)		- (w762x54r * MILx * MILxUSA)			- (w762x54r * MILx * MILxKOR)		- (w762x54r * MILx * MILxEUR)	- (w762x54r * MILx * MILxISR)		,
			"Base.SV_98",	w762x54r	 * MILx	- (w762x54r * x762x54r)	- (w762x54r * MILx * xBOLT)	- (w762x54r * MILx * xSOV)		- (w762x54r * MILx * MILxUSA)			- (w762x54r * MILx * MILxKOR)		- (w762x54r * MILx * MILxEUR)	- (w762x54r * MILx * MILxISR)		,
			"Base.OTS_03_SVU",	w762x54r	 * MILx	- (w762x54r * x762x54r)	- (w762x54r * MILx * xBOLT)	- (w762x54r * MILx * xSOV)		- (w762x54r * MILx * MILxUSA)			- (w762x54r * MILx * MILxKOR)		- (w762x54r * MILx * MILxEUR)	- (w762x54r * MILx * MILxISR)	- (w762x54r * MILx * x90)	,
			"Base.M14EBR",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xUSA)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)		- (w308 * MILx * x90)	,
			"Base.M14",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xUSA)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)			,
			"Base.K14",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xKOR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)		- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.Savage12",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xUSA)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.Ruger_No1_3006",	w3006	 * MILx	- (w3006 * x3006)	- (w3006 * MILx * xBREAK)	- (w3006 * MILx * xUSA)	- (w3006 * MILx * MILxNON)	- (w3006 * MILx * MILxUSA)	- (w3006 * MILx * MILxSOV)	- (w3006 * MILx * MILxCZE)	- (w3006 * MILx * MILxKOR)	- (w3006 * MILx * MILxPAC)	- (w3006 * MILx * MILxEUR)	- (w3006 * MILx * MILxISR)		,
			"Base.M40",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xUSA)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.M40A1",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xUSA)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.M40A2",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xUSA)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)			,
			"Base.M40A3",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xUSA)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)			,
			"Base.M46_Mauser",	w762x54r	 * MILx	- (w762x54r * x762x54r)	- (w762x54r * MILx * xBOLT)	- (w762x54r * MILx * xPAC)	- (w762x54r * MILx * MILxNON)	- (w762x54r * MILx * MILxUSA)	- (w762x54r * MILx * MILxSOV)	- (w762x54r * MILx * MILxCZE)	- (w762x54r * MILx * MILxKOR)	- (w762x54r * MILx * MILxPAC)	- (w762x54r * MILx * MILxEUR)	- (w762x54r * MILx * MILxISR)		,
			"Base.Mosin",	w762x54r	 * MILx	- (w762x54r * x762x54r)	- (w762x54r * MILx * xBOLT)	- (w762x54r * MILx * xSOV)	- (w762x54r * MILx * MILxNON)	- (w762x54r * MILx * MILxUSA)	- (w762x54r * MILx * MILxSOV)	- (w762x54r * MILx * MILxCZE)	- (w762x54r * MILx * MILxKOR)	- (w762x54r * MILx * MILxPAC)	- (w762x54r * MILx * MILxEUR)	- (w762x54r * MILx * MILxISR)		,
			"Base.MosinObrez_Pistol",	w762x54r	 * MILx	- (w762x54r * x762x54r)	- (w762x54r * MILx * xBOLT)	- (w762x54r * MILx * xSOV)	- (w762x54r * MILx * MILxNON)	- (w762x54r * MILx * MILxUSA)	- (w762x54r * MILx * MILxSOV)	- (w762x54r * MILx * MILxCZE)	- (w762x54r * MILx * MILxKOR)	- (w762x54r * MILx * MILxPAC)	- (w762x54r * MILx * MILxEUR)	- (w762x54r * MILx * MILxISR)		,
			"Base.M1",	w3006	 * MILx	- (w3006 * x3006)	- (w3006 * MILx * xSEMI)	- (w3006 * MILx * xUSA)	- (w3006 * MILx * MILxNON)	- (w3006 * MILx * MILxUSA)	- (w3006 * MILx * MILxSOV)	- (w3006 * MILx * MILxCZE)	- (w3006 * MILx * MILxKOR)	- (w3006 * MILx * MILxPAC)	- (w3006 * MILx * MILxEUR)	- (w3006 * MILx * MILxISR)		,
			"Base.M1903",	w3006	 * MILx	- (w3006 * x3006)	- (w3006 * MILx * xBOLT)	- (w3006 * MILx * xUSA)	- (w3006 * MILx * MILxNON)	- (w3006 * MILx * MILxUSA)	- (w3006 * MILx * MILxSOV)	- (w3006 * MILx * MILxCZE)	- (w3006 * MILx * MILxKOR)	- (w3006 * MILx * MILxPAC)	- (w3006 * MILx * MILxEUR)	- (w3006 * MILx * MILxISR)		,
			"Base.BAR",	w3006	 * MILx	- (w3006 * x3006)	- (w3006 * MILx * xAUTO)	- (w3006 * MILx * xUSA)	- (w3006 * MILx * MILxNON)	- (w3006 * MILx * MILxUSA)	- (w3006 * MILx * MILxSOV)	- (w3006 * MILx * MILxCZE)	- (w3006 * MILx * MILxKOR)	- (w3006 * MILx * MILxPAC)	- (w3006 * MILx * MILxEUR)	- (w3006 * MILx * MILxISR)		,
			"Base.BAR_Monitor",	w3006	 * MILx	- (w3006 * x3006)	- (w3006 * MILx * xAUTO)	- (w3006 * MILx * xUSA)	- (w3006 * MILx * MILxNON)	- (w3006 * MILx * MILxUSA)	- (w3006 * MILx * MILxSOV)	- (w3006 * MILx * MILxCZE)	- (w3006 * MILx * MILxKOR)	- (w3006 * MILx * MILxPAC)	- (w3006 * MILx * MILxEUR)	- (w3006 * MILx * MILxISR)		,
			"Base.MAS36",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.MAS44",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.MAS49",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.Win_1895",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xLEVER)	- (w308 * MILx * xUSA)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.Galil",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xISR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)			,
			"Base.Galil_Sniper",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xISR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)			,
			"Base.Thompson_Center_3006",	w3006	 * MILx	- (w3006 * x3006)	- (w3006 * MILx * xBREAK)	- (w3006 * MILx * xUSA)	- (w3006 * MILx * MILxNON)	- (w3006 * MILx * MILxUSA)	- (w3006 * MILx * MILxSOV)	- (w3006 * MILx * MILxCZE)	- (w3006 * MILx * MILxKOR)	- (w3006 * MILx * MILxPAC)	- (w3006 * MILx * MILxEUR)	- (w3006 * MILx * MILxISR)		,
			"Base.Type38",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xPAC)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)			- (w308 * MILx * MILxISR)		,
			"Base.Type99",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xPAC)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)		- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.L96",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xEUR)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)		,
			"Base.M240",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xLMG)	- (w308 * MILx * xUSA)				- (w308 * MILx * MILxCZE)			- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.G21LMG",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xLMG)	- (w308 * MILx * xEUR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.K12",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xLMG)	- (w308 * MILx * xKOR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)		- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.PKM",	w762x54r	 * MILx	- (w762x54r * x762x54r)	- (w762x54r * MILx * xLMG)	- (w762x54r * MILx * xSOV)		- (w762x54r * MILx * MILxUSA)			- (w762x54r * MILx * MILxKOR)		- (w762x54r * MILx * MILxEUR)			,
			"Base.MG42",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xLMG)	- (w308 * MILx * xEUR)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.M60",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xLMG)	- (w308 * MILx * xUSA)			- (w308 * MILx * MILxSOV)			- (w308 * MILx * MILxPAC)				,
			"Base.MK43",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xLMG)	- (w308 * MILx * xUSA)			- (w308 * MILx * MILxSOV)		- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.RPD",	w762x39	 * MILx	- (w762x39 * x762x39)	- (w762x39 * MILx * xLMG)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.DSHK_Fold",	wBMG	 * MILx	- (wBMG * xBMG)	- (wBMG * MILx * xMINI)	- (wBMG * MILx * xSOV)		- (wBMG * MILx * MILxUSA)			- (wBMG * MILx * MILxKOR)		- (wBMG * MILx * MILxEUR)			,
			"Base.BOAR",	wBMG	 * MILx	- (wBMG * xBMG)	- (wBMG * MILx * xBREAK)	- (wBMG * MILx * xUSA)	- (wBMG * MILx * MILxNON)	- (wBMG * MILx * MILxUSA)	- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)		,
			"Base.EDM96",	wBMG	 * MILx	- (wBMG * xBMG)	- (wBMG * MILx * xBOLT)	- (wBMG * MILx * xUSA)	- (wBMG * MILx * MILxNON)	- (wBMG * MILx * MILxUSA)	- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)	- (wBMG * MILx * x90)	,
			"Base.M82",	wBMG	 * MILx	- (wBMG * xBMG)	- (wBMG * MILx * xSEMI)	- (wBMG * MILx * xUSA)			- (wBMG * MILx * MILxSOV)		- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)				,
			"Base.BFG50",	wBMG	 * MILx	- (wBMG * xBMG)	- (wBMG * MILx * xBREAK)	- (wBMG * MILx * xUSA)	- (wBMG * MILx * MILxNON)	- (wBMG * MILx * MILxUSA)	- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)	- (wBMG * MILx * x90)	,
			"Base.Harris50",	wBMG	 * MILx	- (wBMG * xBMG)	- (wBMG * MILx * xBOLT)	- (wBMG * MILx * xUSA)			- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)		,
			"Base.TAC50",	wBMG	 * MILx	- (wBMG * xBMG)	- (wBMG * MILx * xBOLT)	- (wBMG * MILx * xUSA)			- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)			,
			"Base.CheyTac50",	wBMG	 * MILx	- (wBMG * xBMG)	- (wBMG * MILx * xBOLT)	- (wBMG * MILx * xUSA)			- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)	- (wBMG * MILx * x90)	,
			"Base.Gepard_M6",	wBMG	 * MILx	- (wBMG * xBMG)	- (wBMG * MILx * xBOLT)	- (wBMG * MILx * xEUR)			- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)		- (wBMG * MILx * MILxISR)		,
			"Base.OSV_96",	wBMG	 * MILx	- (wBMG * xBMG)	- (wBMG * MILx * xBOLT)	- (wBMG * MILx * xSOV)		- (wBMG * MILx * MILxUSA)		- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)	- (wBMG * MILx * x90)	,
			"Base.Ash",	wBMG	 * MILx	- (wBMG * xBMG)	- (wBMG * MILx * xAUTO)	- (wBMG * MILx * xSOV)		- (wBMG * MILx * MILxUSA)		- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)	- (wBMG * MILx * x90)	,
			"Base.VSSK",	wBMG	 * MILx	- (wBMG * xBMG)	- (wBMG * MILx * xBOLT)	- (wBMG * MILx * xSOV)		- (wBMG * MILx * MILxUSA)		- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)	- (wBMG * MILx * x90)	,
			"Base.SW_M500",	wBMG	 * MILx	- (wBMG * xBMG)	- (wBMG * MILx * xREV)	- (wBMG * MILx * xUSA)	- (wBMG * MILx * MILxNON)	- (wBMG * MILx * MILxUSA)	- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)	- (wBMG * MILx * x90)	,
			"Base.SPAS12_Fixed",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xEUR)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.SPAS12_Fold",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xEUR)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.Origin",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.SPAS_15",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xEUR)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)		- (w12g * MILx * MILxISR)		,
			"Base.USAS_12",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xAUTO)	- (w12g * MILx * xKOR)		- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)		- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.Shorty_Pistol",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.R11_87",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.M870",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)		- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)		- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)			,
			"Base.M1897",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.DT11",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xBREAK)	- (w12g * MILx * xEUR)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.Coachgun",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xBREAK)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.Terminator",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xBREAK)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.SIX12",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xREV)	- (w12g * MILx * xUSA)			- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.SIX12SD",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xREV)	- (w12g * MILx * xUSA)			- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.M870_Wingmaster",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.M870_Police",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)		- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)			- (w12g * MILx * MILxPAC)				,
			"Base.M870_MCS",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)		- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)			- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)			,
			"Base.M870_CQB",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)		- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)			- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)			,
			"Base.M870_Breaching_Pistol",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)		- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)			- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)			,
			"Base.M870_Express",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.Ithaca_M37",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.AUTO_5",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.A400",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xEUR)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.M1014",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xEUR)			- (w12g * MILx * MILxSOV)			- (w12g * MILx * MILxPAC)		- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.M1014_Fold",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xEUR)			- (w12g * MILx * MILxSOV)			- (w12g * MILx * MILxPAC)		- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.M1014_Wick",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xEUR)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.DAO12",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xREV)	- (w12g * MILx * xREST)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)			,
			"Base.M1887",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xLEVER)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.M1208",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xREV)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.M1212",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xREV)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.M1216",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xREV)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.AA12",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xAUTO)	- (w12g * MILx * xUSA)			- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.CAWS",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xAUTO)	- (w12g * MILx * xEUR)		- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)				,
			"Base.ROYAL_SXS",	w10g	 * MILx	- (w10g * x10g)	- (w10g * MILx * xBREAK)	- (w10g * MILx * xEUR)	- (w10g * MILx * MILxNON)	- (w10g * MILx * MILxUSA)	- (w10g * MILx * MILxSOV)	- (w10g * MILx * MILxCZE)	- (w10g * MILx * MILxKOR)	- (w10g * MILx * MILxPAC)	- (w10g * MILx * MILxEUR)	- (w10g * MILx * MILxISR)		,
			"Base.KS23",	w4g	 * MILx	- (w4g * x4g)	- (w4g * MILx * xPUMP)	- (w4g * MILx * xSOV)	- (w4g * MILx * MILxNON)	- (w4g * MILx * MILxUSA)	- (w4g * MILx * MILxSOV)	- (w4g * MILx * MILxCZE)	- (w4g * MILx * MILxKOR)	- (w4g * MILx * MILxPAC)	- (w4g * MILx * MILxEUR)	- (w4g * MILx * MILxISR)		,
			"Base.KS23_S_Pistol",	w4g	 * MILx	- (w4g * x4g)	- (w4g * MILx * xPUMP)	- (w4g * MILx * xSOV)	- (w4g * MILx * MILxNON)	- (w4g * MILx * MILxUSA)	- (w4g * MILx * MILxSOV)	- (w4g * MILx * MILxCZE)	- (w4g * MILx * MILxKOR)	- (w4g * MILx * MILxPAC)	- (w4g * MILx * MILxEUR)	- (w4g * MILx * MILxISR)		,
			"Base.Triple_Crown",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xBREAK)	- (w12g * MILx * xEUR)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.Moss500_20",	w20g	 * MILx	- (w20g * x20g)	- (w20g * MILx * xPUMP)	- (w20g * MILx * xUSA)	- (w20g * MILx * MILxNON)	- (w20g * MILx * MILxUSA)	- (w20g * MILx * MILxSOV)	- (w20g * MILx * MILxCZE)	- (w20g * MILx * MILxKOR)	- (w20g * MILx * MILxPAC)	- (w20g * MILx * MILxEUR)	- (w20g * MILx * MILxISR)		,
			"Base.10855_Silver",	w20g	 * MILx	- (w20g * x20g)	- (w20g * MILx * xSEMI)	- (w20g * MILx * xEUR)	- (w20g * MILx * MILxNON)	- (w20g * MILx * MILxUSA)	- (w20g * MILx * MILxSOV)	- (w20g * MILx * MILxCZE)	- (w20g * MILx * MILxKOR)	- (w20g * MILx * MILxPAC)	- (w20g * MILx * MILxEUR)	- (w20g * MILx * MILxISR)		,
			"Base.Colt1855",	w20g	 * MILx	- (w20g * x20g)	- (w20g * MILx * xREV)	- (w20g * MILx * xUSA)	- (w20g * MILx * MILxNON)	- (w20g * MILx * MILxUSA)	- (w20g * MILx * MILxSOV)	- (w20g * MILx * MILxCZE)	- (w20g * MILx * MILxKOR)	- (w20g * MILx * MILxPAC)	- (w20g * MILx * MILxEUR)	- (w20g * MILx * MILxISR)		,
			"Base.TOZ106",	w20g	 * MILx	- (w20g * x20g)	- (w20g * MILx * xBOLT)	- (w20g * MILx * xSOV)		- (w20g * MILx * MILxUSA)		- (w20g * MILx * MILxCZE)	- (w20g * MILx * MILxKOR)		- (w20g * MILx * MILxEUR)	- (w20g * MILx * MILxISR)		,
			"Base.TOZ194_Pistol",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xSOV)		- (w12g * MILx * MILxUSA)		- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)		- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.Saiga12",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xAUTO)	- (w12g * MILx * xSOV)		- (w12g * MILx * MILxUSA)		- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)		- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.Saiga12_Long",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xAUTO)	- (w12g * MILx * xSOV)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.Saiga12_Tromix",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xAUTO)	- (w12g * MILx * xSOV)		- (w12g * MILx * MILxUSA)		- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)		- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.MP133",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xSOV)		- (w12g * MILx * MILxUSA)		- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)		- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.MP133S_Pistol",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xSOV)		- (w12g * MILx * MILxUSA)		- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)		- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.KSG",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.KSG25",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.UTS15",	w12g	 * MILx	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xREST)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.EX41_HE",	wGREN	 * MILx		- (wGREN * MILx * xGREN)	- (wGREN * MILx * xUSA)			- (wGREN * MILx * MILxSOV)	- (wGREN * MILx * MILxCZE)	- (wGREN * MILx * MILxKOR)	- (wGREN * MILx * MILxPAC)	- (wGREN * MILx * MILxEUR)			,
			"Base.Federal_HE",	wGREN	 * MILx		- (wGREN * MILx * xGREN)	- (wGREN * MILx * xUSA)				- (wGREN * MILx * MILxCZE)						,
			"Base.M32_HE",	wGREN	 * MILx		- (wGREN * MILx * xGREN)	- (wGREN * MILx * xUSA)			- (wGREN * MILx * MILxSOV)	- (wGREN * MILx * MILxCZE)		- (wGREN * MILx * MILxPAC)				,
			"Base.GM94_HE",	wGREN	 * MILx		- (wGREN * MILx * xGREN)	- (wGREN * MILx * xSOV)		- (wGREN * MILx * MILxUSA)		- (wGREN * MILx * MILxCZE)	- (wGREN * MILx * MILxKOR)		- (wGREN * MILx * MILxEUR)	- (wGREN * MILx * MILxISR)	- (wGREN * MILx * x90)	,
			"Base.K11",	wGREN	 * MILx	- (wGREN * MILx * xAUTO)	- (wGREN * MILx * xGREN)	- (wGREN * MILx * xKOR)		- (wGREN * MILx * MILxUSA)	- (wGREN * MILx * MILxSOV)	- (wGREN * MILx * MILxCZE)		- (wGREN * MILx * MILxPAC)	- (wGREN * MILx * MILxEUR)	- (wGREN * MILx * MILxISR)	- (wGREN * MILx * x90)	,
			"Base.M72_LAW",	wGREN	 * MILx		- (wGREN * MILx * xGREN)	- (wGREN * MILx * xUSA)			- (wGREN * MILx * MILxSOV)	- (wGREN * MILx * MILxCZE)		- (wGREN * MILx * MILxPAC)				,
			"Base.RPG_7",	wGREN	 * MILx		- (wGREN * MILx * xGREN)	- (wGREN * MILx * xSOV)		- (wGREN * MILx * MILxUSA)			- (wGREN * MILx * MILxKOR)		- (wGREN * MILx * MILxEUR)	- (wGREN * MILx * MILxISR)		,
			"Base.XM214",	w556	 * MILx	- (w556 * x556)	- (w556 * MILx * xMINI)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)		- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)				,
			"Base.GAU17",	w308	 * MILx	- (w308 * x308)	- (w308 * MILx * xMINI)	- (w308 * MILx * xUSA)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.GAU19",	wBMG	 * MILx	- (wBMG * xBMG)	- (wBMG * MILx * xMINI)	- (wBMG * MILx * xUSA)			- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)		- (wBMG * MILx * MILxISR)		,
			"Base.TAC15",	wBOW	 * MILx		- (wBOW * MILx * xBOW)	- (wBOW * MILx * xUSA)	- (wBOW * MILx * MILxNON)	- (wBOW * MILx * MILxUSA)	- (wBOW * MILx * MILxSOV)	- (wBOW * MILx * MILxCZE)	- (wBOW * MILx * MILxKOR)	- (wBOW * MILx * MILxPAC)	- (wBOW * MILx * MILxEUR)	- (wBOW * MILx * MILxISR)		,
			"Base.HortonScout_125",	wBOW	 * MILx		- (wBOW * MILx * xBOW)	- (wBOW * MILx * xUSA)	- (wBOW * MILx * MILxNON)	- (wBOW * MILx * MILxUSA)	- (wBOW * MILx * MILxSOV)	- (wBOW * MILx * MILxCZE)	- (wBOW * MILx * MILxKOR)	- (wBOW * MILx * MILxPAC)	- (wBOW * MILx * MILxEUR)	- (wBOW * MILx * MILxISR)		,
			"Base.MissionMXB_400",	wBOW	 * MILx		- (wBOW * MILx * xBOW)	- (wBOW * MILx * xUSA)	- (wBOW * MILx * MILxNON)	- (wBOW * MILx * MILxUSA)	- (wBOW * MILx * MILxSOV)	- (wBOW * MILx * MILxCZE)	- (wBOW * MILx * MILxKOR)	- (wBOW * MILx * MILxPAC)	- (wBOW * MILx * MILxEUR)	- (wBOW * MILx * MILxISR)		,
			"Base.TenPointTurbo_XLT",	wBOW	 * MILx		- (wBOW * MILx * xBOW)	- (wBOW * MILx * xUSA)	- (wBOW * MILx * MILxNON)	- (wBOW * MILx * MILxUSA)	- (wBOW * MILx * MILxSOV)	- (wBOW * MILx * MILxCZE)	- (wBOW * MILx * MILxKOR)	- (wBOW * MILx * MILxPAC)	- (wBOW * MILx * MILxEUR)	- (wBOW * MILx * MILxISR)		,
			"Base.HZRedback_RTS",	wBOW	 * MILx		- (wBOW * MILx * xBOW)	- (wBOW * MILx * xUSA)	- (wBOW * MILx * MILxNON)	- (wBOW * MILx * MILxUSA)	- (wBOW * MILx * MILxSOV)	- (wBOW * MILx * MILxCZE)	- (wBOW * MILx * MILxKOR)	- (wBOW * MILx * MILxPAC)	- (wBOW * MILx * MILxEUR)	- (wBOW * MILx * MILxISR)		,
			"Base.Genesis_X_Bow",	wBOW	 * MILx		- (wBOW * MILx * xBOW)	- (wBOW * MILx * xUSA)	- (wBOW * MILx * MILxNON)	- (wBOW * MILx * MILxUSA)	- (wBOW * MILx * MILxSOV)	- (wBOW * MILx * MILxCZE)	- (wBOW * MILx * MILxKOR)	- (wBOW * MILx * MILxPAC)	- (wBOW * MILx * MILxEUR)	- (wBOW * MILx * MILxISR)		,
			"Base.Genesis_Bow",	wBOW	 * MILx		- (wBOW * MILx * xBOW)	- (wBOW * MILx * xUSA)	- (wBOW * MILx * MILxNON)	- (wBOW * MILx * MILxUSA)	- (wBOW * MILx * MILxSOV)	- (wBOW * MILx * MILxCZE)	- (wBOW * MILx * MILxKOR)	- (wBOW * MILx * MILxPAC)	- (wBOW * MILx * MILxEUR)	- (wBOW * MILx * MILxISR)		,
			"Base.Genesis_Mini_Bow",	wBOW	 * MILx		- (wBOW * MILx * xBOW)	- (wBOW * MILx * xUSA)	- (wBOW * MILx * MILxNON)	- (wBOW * MILx * MILxUSA)	- (wBOW * MILx * MILxSOV)	- (wBOW * MILx * MILxCZE)	- (wBOW * MILx * MILxKOR)	- (wBOW * MILx * MILxPAC)	- (wBOW * MILx * MILxEUR)	- (wBOW * MILx * MILxISR)		,
			"Base.BowTechSR_350",	wBOW	 * MILx		- (wBOW * MILx * xBOW)	- (wBOW * MILx * xUSA)	- (wBOW * MILx * MILxNON)	- (wBOW * MILx * MILxUSA)	- (wBOW * MILx * MILxSOV)	- (wBOW * MILx * MILxCZE)	- (wBOW * MILx * MILxKOR)	- (wBOW * MILx * MILxPAC)	- (wBOW * MILx * MILxEUR)	- (wBOW * MILx * MILxISR)		,
			"Base.HoytSpectra_1000",	wBOW	 * MILx		- (wBOW * MILx * xBOW)	- (wBOW * MILx * xUSA)	- (wBOW * MILx * MILxNON)	- (wBOW * MILx * MILxUSA)	- (wBOW * MILx * MILxSOV)	- (wBOW * MILx * MILxCZE)	- (wBOW * MILx * MILxKOR)	- (wBOW * MILx * MILxPAC)	- (wBOW * MILx * MILxEUR)	- (wBOW * MILx * MILxISR)		,
			"Base.SlingShot_Rock",	wBOW	 * MILx		- (wBOW * MILx * xBOW)	- (wBOW * MILx * xUSA)	- (wBOW * MILx * MILxNON)	- (wBOW * MILx * MILxUSA)	- (wBOW * MILx * MILxSOV)	- (wBOW * MILx * MILxCZE)	- (wBOW * MILx * MILxKOR)	- (wBOW * MILx * MILxPAC)	- (wBOW * MILx * MILxEUR)	- (wBOW * MILx * MILxISR)		,
			"Base.WristRocket_Rock",	wBOW	 * MILx		- (wBOW * MILx * xBOW)	- (wBOW * MILx * xUSA)	- (wBOW * MILx * MILxNON)	- (wBOW * MILx * MILxUSA)	- (wBOW * MILx * MILxSOV)	- (wBOW * MILx * MILxCZE)	- (wBOW * MILx * MILxKOR)	- (wBOW * MILx * MILxPAC)	- (wBOW * MILx * MILxEUR)	- (wBOW * MILx * MILxISR)		,
			"Base.M2A1",	wFLAME	 * MILx		- (wFLAME * MILx * xFLAME)	- (wFLAME * MILx * xUSA)										,
			"Base.Musk",	wFLAME	 * MILx		- (wFLAME * MILx * xFLAME)	- (wFLAME * MILx * xUSA)	- (wFLAME * MILx * MILxNON)	- (wFLAME * MILx * MILxUSA)	- (wFLAME * MILx * MILxSOV)	- (wFLAME * MILx * MILxCZE)	- (wFLAME * MILx * MILxKOR)	- (wFLAME * MILx * MILxPAC)	- (wFLAME * MILx * MILxEUR)	- (wFLAME * MILx * MILxISR)	- (wFLAME * MILx * x90)	,
			"Base.Launcher",	Part		- (wGREN * xGREN)		- (Part * xUSA)			- (Part * MILxSOV)	- (Part * MILxCZE)		- (Part * MILxPAC)				,
			"Base.Launcher2",	Part		- (wGREN * xGREN)		- (Part * xSOV)		- (Part * MILxUSA)			- (Part * MILxKOR)		- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Bipod",	Part		- (Part * xPart)												,
			"Base.Ammobelt",	Part		- (Part * xPart)				- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Sling_1",	Part		- (Part * xPart)												,
			"Base.Sling_2",	Part		- (Part * xPart)												,
			"Base.Sling_3",	Part		- (Part * xPart)												,
			"Base.ForeGrip",	Part		- (Part * xPart)												,
			"Base.Grip_Magpul",	Part		- (Part * xPart)					- (Part * MILxSOV)			- (Part * MILxPAC)			- (Part * x90)	,
			"Base.Grip_MLOK",	Part		- (Part * xPart)					- (Part * MILxSOV)			- (Part * MILxPAC)			- (Part * x90)	,
			"Base.Grip_TG",	Part		- (Part * xPart)					- (Part * MILxSOV)			- (Part * MILxPAC)			- (Part * x90)	,
			"Base.Grip_BCM",	Part		- (Part * xPart)					- (Part * MILxSOV)			- (Part * MILxPAC)			- (Part * x90)	,
			"Base.Grip_Fold",	Part		- (Part * xPart)					- (Part * MILxSOV)			- (Part * MILxPAC)				,
			"Base.Light_Small",	Light		- (Light * xLight)												,
			"Base.Light_Large",	Light		- (Light * xLight)												,
			"Base.Light_Medium_M952V",	Light		- (Light * xLight)												,
			"Base.Laser_Green",	Light		- (Light * xLight)				- (Light * MILxUSA)					- (Light * MILxEUR)	- (Light * MILxISR)		,
			"Base.Laser_Red",	Light		- (Light * xLight)				- (Light * MILxUSA)					- (Light * MILxEUR)	- (Light * MILxISR)		,
			"Base.Laser_DVAL",	Light		- (Light * xLight)					- (Light * MILxSOV)	- (Light * MILxCZE)	- (Light * MILxKOR)	- (Light * MILxPAC)				,
			"Base.Laser_PEQ15",	Light		- (Light * xLight)					- (Light * MILxSOV)	- (Light * MILxCZE)	- (Light * MILxKOR)	- (Light * MILxPAC)				,
			"Base.Light_Small_Socom",	Light		- (Light * xLight)					- (Light * MILxSOV)	- (Light * MILxCZE)	- (Light * MILxKOR)	- (Light * MILxPAC)				,
			"Base.Light_Small_TLR_7AH",	Light		- (Light * xLight)												,
			"Base.Light_Medium_M900",	Light		- (Light * xLight)												,
			"Base.Suppressor_Pistol",	Suppress		- (Suppress * xSuppress)												,
			"Base.Suppressor_Rifle",	Suppress		- (Suppress * xSuppress)												,
			"Base.Suppressor_Shotgun",	Suppress		- (Suppress * xSuppress)												,
			"Base.Suppressor_BMG",	Suppress		- (Suppress * xSuppress)	- (wBMG * xBMG)											,
			"Base.Suppressor_Socom_Pistol",	Suppress		- (Suppress * xSuppress)												,
			"Base.Suppressor_NorthStar_Pistol",	Suppress		- (Suppress * xSuppress)			- (Suppress * MILxNON)									,
			"Base.Suppressor_PBS1_Rifle",	Suppress		- (Suppress * xSuppress)												,
			"Base.Suppressor_PBS4_Rifle",	Suppress		- (Suppress * xSuppress)												,
			"Base.Suppressor_ROME_BMG",	Suppress		- (Suppress * xSuppress)	- (wBMG * xBMG)											,
			"Base.Bayonet_M4",	Part		- (Part * xPart)					- (Part * MILxSOV)		- (Part * MILxKOR)	- (Part * MILxPAC)				,
			"Base.Bayonet_AK",	Part		- (Part * xPart)		- (Part * xSOV)		- (Part * MILxUSA)			- (Part * MILxKOR)		- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Bayonet_M1917",	Part		- (Part * xPart)				- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)		- (Part * MILxPAC)		- (Part * MILxISR)		,
			"Base.Bayonet_Type30",	Part		- (Part * xPart)				- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Choke_Full",	Part		- (Part * xPart)			- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Choke_Full_Dbl",	Part		- (Part * xPart)			- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Compensator",	Part		- (Part * xPart)												,
			"Base.LinearComp_Noveske",	Part		- (Part * xPart)												,
			"Base.MuzzleBrake",	Part		- (Part * xPart)												,
			"Base.MuzzleBrake_DK1",	Part		- (Part * xPart)												,
			"Base.MuzzleBrake_DK2",	Part		- (Part * xPart)												,
			"Base.Pad",	Part		- (Part * xPart)												,
			"Base.Carrier_12g",	Part		- (Part * xPart)												,
			"Base.GhostRing",	Optic		- (Optic * xOptic)				- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_MicroDot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * MILxNON)	- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)	- (Optic * x90)	,
			"Base.Sight_RaceDot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * MILxNON)	- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_Phantom_XL",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * MILxNON)	- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)	- (Optic * x90)	,
			"Base.Sight_OKP7_Reflex",	Optic		- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)			- (Optic * MILxKOR)		- (Optic * MILxEUR)	- (Optic * MILxISR)	- (Optic * x90)	,
			"Base.Sight_SRS",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)		- (Optic * x90)	,
			"Base.Sight_EOTech",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)			,
			"Base.Sight_3xEOTech",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)			,
			"Base.Sight_4xACOG",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)			,
			"Base.Sight_4xACOG_ECO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)			,
			"Base.Sight_6xELCAN",	Optic		- (Optic * xOptic)		- (Optic * xEUR)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)				,
			"Base.Sight_6xHensoldt",	Optic		- (Optic * xOptic)		- (Optic * xEUR)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)				,
			"Base.Sight_KOBRA",	Optic		- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)			- (Optic * MILxKOR)		- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Scope_4xPSO",	Optic		- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)			- (Optic * MILxKOR)		- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Scope_12xPSO",	Optic		- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)			- (Optic * MILxKOR)		- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Scope_1-4x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Scope_Trijicon_1-6x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Scope_TANGO6T_1-6x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Scope_20x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_Thermal",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Sight_Thermal_AK",	Optic		- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)			- (Optic * MILxKOR)		- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_Aimpoint",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)			- (Optic * MILxPAC)				,
			"Base.Sight_Aimpoint_Dot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)			- (Optic * MILxPAC)				,
			"Base.Sight_Fiber_Shotgun",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * MILxNON)	- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_Mepro_M21",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)		- (Optic * MILxKOR)	- (Optic * MILxPAC)			- (Optic * x90)	,
			"Base.Sight_Mepro_MOR",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)		- (Optic * MILxKOR)	- (Optic * MILxPAC)			- (Optic * x90)	,
			"Base.Sight_UH1",	Optic		- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)	- (Optic * x90)	,
			"Base.Sight_C79",	Optic		- (Optic * xOptic)		- (Optic * xEUR)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_SUSAT",	Optic		- (Optic * xOptic)		- (Optic * xEUR)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)		- (Optic * MILxISR)		,
			"Base.Sight_Raven",	Optic		- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_G28_Scope",	Optic		- (Optic * xOptic)		- (Optic * xEUR)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)				,
			"Base.Scope_ATACR7_F1",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Scope_ATACR7_F1r",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Sight_ACRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)	- (Optic * x90)	,
			"Base.Sight_MRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)			- (Optic * x90)	,
			"Base.Sight_SRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)			- (Optic * x90)	,
			"Base.Sight_Nikon",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Sight_M8",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Sight_VX3",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Sight_1P87",	Optic		- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)			- (Optic * MILxKOR)		- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_1P63",	Optic		- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)			- (Optic * MILxKOR)		- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_Brownells",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)		- (Optic * MILxKOR)	- (Optic * MILxPAC)				,
			"Base.Sight_L2",	Optic		- (Optic * xOptic)		- (Optic * xEUR)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)		- (Optic * MILxISR)		,
			"Base.Sight_Malcom",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * MILxNON)	- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_LUX",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * MILxNON)	- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_NO32",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * MILxNON)	- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)		- (Optic * MILxISR)		,
			"Base.Sight_PKAS",	Optic		- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_PU",	Optic		- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)		- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_XPS",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)			- (Optic * x90)	,
			"Base.Sight_PVS4",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Sight_Burris_NV",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Sight_Armasight_NV",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Barrel_308",	w308		- (w308 * xPart)	- (w308 * xBREAK)	- (w308 * xUSA)	- (w308 * MILxNON)	- (w308 * MILxUSA)	- (w308 * MILxSOV)	- (w308 * MILxCZE)	- (w308 * MILxKOR)	- (w308 * MILxPAC)	- (w308 * MILxEUR)	- (w308 * MILxISR)		,
			"Base.Barrel_3006",	w3006		- (w3006 * xPart)	- (w3006 * xBREAK)	- (w3006 * xUSA)	- (w3006 * MILxNON)	- (w3006 * MILxUSA)	- (w3006 * MILxSOV)	- (w3006 * MILxCZE)	- (w3006 * MILxKOR)	- (w3006 * MILxPAC)	- (w3006 * MILxEUR)	- (w3006 * MILxISR)		,
			"Base.Barrel_4570",	w4570		- (w4570 * xPart)	- (w4570 * xBREAK)	- (w4570 * xUSA)	- (w4570 * MILxNON)	- (w4570 * MILxUSA)	- (w4570 * MILxSOV)	- (w4570 * MILxCZE)	- (w4570 * MILxKOR)	- (w4570 * MILxPAC)	- (w4570 * MILxEUR)	- (w4570 * MILxISR)		,
			"Base.Barrel_357",	w357		- (w357 * xPart)	- (w357 * xBREAK)	- (w357 * xUSA)	- (w357 * MILxNON)	- (w357 * MILxUSA)	- (w357 * MILxSOV)	- (w357 * MILxCZE)	- (w357 * MILxKOR)	- (w357 * MILxPAC)	- (w357 * MILxEUR)	- (w357 * MILxISR)		,
			"Base.Barrel_357_Short",	w357		- (w357 * xPart)	- (w357 * xBREAK)	- (w357 * xUSA)	- (w357 * MILxNON)	- (w357 * MILxUSA)	- (w357 * MILxSOV)	- (w357 * MILxCZE)	- (w357 * MILxKOR)	- (w357 * MILxPAC)	- (w357 * MILxEUR)	- (w357 * MILxISR)		,
			"Base.Barrel_45LC",	w45LC		- (w45LC * xPart)	- (w45LC * xBREAK)	- (w45LC * xUSA)	- (w45LC * MILxNON)	- (w45LC * MILxUSA)	- (w45LC * MILxSOV)	- (w45LC * MILxCZE)	- (w45LC * MILxKOR)	- (w45LC * MILxPAC)	- (w45LC * MILxEUR)	- (w45LC * MILxISR)		,
			"Base.Barrel_45LC_Short",	w45LC		- (w45LC * xPart)	- (w45LC * xBREAK)	- (w45LC * xUSA)	- (w45LC * MILxNON)	- (w45LC * MILxUSA)	- (w45LC * MILxSOV)	- (w45LC * MILxCZE)	- (w45LC * MILxKOR)	- (w45LC * MILxPAC)	- (w45LC * MILxEUR)	- (w45LC * MILxISR)		,
			"Base.TriggerGroup_AR",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)			- (Part * MILxSOV)	- (Part * MILxCZE)		- (Part * MILxPAC)				,
			"Base.TriggerGroup_AK",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xSOV)		- (Part * MILxUSA)			- (Part * MILxKOR)		- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.TriggerGroup_HK",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xEUR)		- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)		- (Part * MILxISR)		,
			"Base.TriggerGroup_FN",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xEUR)		- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)		- (Part * MILxISR)		,
			"Base.Switch_Striker_Black",	Part 		- (Part * xPart)	- (Part  * xAUTO)	- (Part  * xUSA)	- (Part  * MILxNON)	- (Part  * MILxUSA)	- (Part  * MILxSOV)	- (Part  * MILxCZE)	- (Part  * MILxKOR)	- (Part  * MILxPAC)	- (Part  * MILxEUR)	- (Part  * MILxISR)	- (Part  * x90)	,
			"Base.Switch_Striker_Red",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)	- (Part * x90)	,
			"Base.Switch_Striker_Blue",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)	- (Part * x90)	,
			"Base.Switch_Striker_Green",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)	- (Part * x90)	,
			"Base.Grip_G10_Blue",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_G10_Brown",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_G10_Black",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_G10_Red",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_G10_Green",	Part		- (Part * xPart)		- (Part * xUSA)										,
			"Base.Grip_G10_Pink",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Alloy_Black",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Alloy_Silver",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Alloy_Blue",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Alloy_Red",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Wood",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Punisher",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Spartan",	Part		- (Part * xPart)		- (Part * xUSA)										,
			"Base.Grip_Ivory",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Carbon",	Part		- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.AmmoCan30_22",	AmmoCan		* w22	- (AmmoCan * x22)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)			,
			"Base.AmmoCan30_380",	AmmoCan		* w380	- (AmmoCan * x380)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)		- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_57",	AmmoCan		* w57	- (AmmoCan * x57)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)	- (AmmoCan * x90)	,
			"Base.AmmoCan30_9",	AmmoCan		* w9	- (AmmoCan * x9)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan30_9",	AmmoCan		* w9	- (AmmoCan * x9)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan30_38",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_357",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_45",	AmmoCan		* w45	- (AmmoCan * x45)	- (AmmoCan * xAmmoCan)			- (AmmoCan * MILxSOV)			- (AmmoCan * MILxPAC)				,
			"Base.AmmoCan30_45",	AmmoCan		* w45	- (AmmoCan * x45)	- (AmmoCan * xAmmoCan)			- (AmmoCan * MILxSOV)			- (AmmoCan * MILxPAC)				,
			"Base.AmmoCan30_44",	AmmoCan		* w44	- (AmmoCan * x44)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_45LC",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_4570",	AmmoCan		* w4570	- (AmmoCan * x4570)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_50MAG",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)		- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)	- (AmmoCan * x90)	,
			"Base.AmmoCan50_223",	AmmoCan		* w223	- (AmmoCan * x223)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)		- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_556",	AmmoCan		* w556	- (AmmoCan * x556)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_556",	AmmoCan		* w556	- (AmmoCan * x556)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_762x39",	AmmoCan		* w762x39	- (AmmoCan * x762x39)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)			- (AmmoCan * MILxKOR)		- (AmmoCan * MILxEUR)			,
			"Base.AmmoCan50_762x39",	AmmoCan		* w762x39	- (AmmoCan * x762x39)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)			- (AmmoCan * MILxKOR)		- (AmmoCan * MILxEUR)			,
			"Base.AmmoCan50_545x39",	AmmoCan		* w545x39	- (AmmoCan * x545x39)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)		- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)		- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_762x54r",	AmmoCan		* w762x54r	- (AmmoCan * x762x54r)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)			- (AmmoCan * MILxKOR)		- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_308",	AmmoCan		* w308	- (AmmoCan * x308)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_308",	AmmoCan		* w308	- (AmmoCan * x308)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_3006",	AmmoCan		* w3006	- (AmmoCan * x3006)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_410",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_20",	AmmoCan		* w20g	- (AmmoCan * x20g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)		- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_12",	AmmoCan		* w12g	- (AmmoCan * x12g)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_10",	AmmoCan		* w10g	- (AmmoCan * x10g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_4",	AmmoCan		* w4g	- (AmmoCan * x4g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_50",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)			- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)		- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_50",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)			- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)		- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_ROCKET",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_ROCKET",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.38Speed",	StdMag	* w357 - (StdMag * xStdMag)	- (w357 * x357)	- (StdMag * xREV)		- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.44Speed",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)	- (StdMag * xREV)		- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.SRM1208_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.SRM1212_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.SRM1216_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.SIX12_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.CP33Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)		- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.CP33_17MagBase",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)		- (ExtMag * xUSA)	- (ExtMag * MILxNON)	- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)	- (ExtMag * MILxCZE)	- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)	- (ExtMag * x90)	,
			"Base.22Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)			- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)			,
			"Base.22ExtClip",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)			- (ExtMag * MILxNON)	- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)	- (ExtMag * MILxCZE)	- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)			,
			"Base.380Clip",	StdMag	* w380 - (StdMag * xStdMag)	- (w380 * x380)				- (StdMag * MILxUSA)	- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.380StdClip",	StdMag	* w380 - (StdMag * xStdMag)	- (w380 * x380)				- (StdMag * MILxUSA)	- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.380ExtClip",	ExtMag	* w380 - (ExtMag * xExtMag)	- (w380 * x380)				- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)		- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)		,
			"Base.9mmSSClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)												,
			"Base.9mmSSExtClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)												,
			"Base.9mmClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)												,
			"Base.9mmExtClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)												,
			"Base.45DSClip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)					- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)				,
			"Base.45DSExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)					- (ExtMag * MILxSOV)		- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)				,
			"Base.45Clip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)					- (StdMag * MILxSOV)	- (StdMag * MILxCZE)		- (StdMag * MILxPAC)		- (StdMag * MILxISR)		,
			"Base.45ExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)					- (ExtMag * MILxSOV)	- (ExtMag * MILxCZE)		- (ExtMag * MILxPAC)		- (ExtMag * MILxISR)		,
			"Base.44Clip",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)			- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)			,
			"Base.50Clip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)			- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)			,
			"Base.223StdClip",	StdMag	* w223 - (StdMag * xStdMag)	- (w223 * x223)			- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.223ExtClip",	ExtMag	* w223 - (ExtMag * xExtMag)	- (w223 * x223)			- (ExtMag * MILxNON)	- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)		- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)		,
			"Base.556Clip",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)												,
			"Base.308StdClip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)				- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.308ExtClip",	ExtMag	* w308 - (ExtMag * xExtMag)	- (w308 * x308)				- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)	- (ExtMag * MILxCZE)	- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)		,
			"Base.3006ExtClip",	ExtMag	* w3006 - (ExtMag * xExtMag)	- (w3006 * x3006)		- (ExtMag * xUSA)	- (ExtMag * MILxNON)	- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)	- (ExtMag * MILxCZE)	- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)		,
			"Base.SVDClip",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)		- (StdMag * xSOV)		- (StdMag * MILxUSA)			- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.ASHClip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xSOV)		- (StdMag * MILxUSA)		- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.M82Clip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xUSA)			- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)				,
			"Base.M1Clip",	StdMag	* w3006 - (StdMag * xStdMag)	- (w3006 * x3006)		- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.SKSClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)		- (StdMag * xSOV)		- (StdMag * MILxUSA)			- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.1903Clip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)			- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.545StdClip",	StdMag	* w545x39 - (StdMag * xStdMag)	- (w545x39 * x545x39)		- (StdMag * xSOV)		- (StdMag * MILxUSA)		- (StdMag * MILxCZE)	- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.AKClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)				- (StdMag * MILxUSA)			- (StdMag * MILxKOR)		- (StdMag * MILxEUR)			,
			"Base.ASVALClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)		- (ExtMag * xSOV)		- (ExtMag * MILxUSA)		- (ExtMag * MILxCZE)	- (ExtMag * MILxKOR)		- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)		,
			"Base.VSSClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)		- (StdMag * xSOV)		- (StdMag * MILxUSA)		- (StdMag * MILxCZE)	- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.57Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.P90Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.22Drum",	DrumMag	* w22 - (DrumMag * xDrumMag)	- (w22 * x22)			- (DrumMag * MILxNON)	- (DrumMag * MILxUSA)	- (DrumMag * MILxSOV)	- (DrumMag * MILxCZE)	- (DrumMag * MILxKOR)	- (DrumMag * MILxPAC)	- (DrumMag * MILxEUR)			,
			"Base.9mmDrum",	DrumMag	* w9 - (DrumMag * xDrumMag)	- (w9 * x9)												,
			"Base.45Drum",	DrumMag	* w45 - (DrumMag * xDrumMag)	- (w45 * x45)					- (DrumMag * MILxSOV)		- (DrumMag * MILxKOR)	- (DrumMag * MILxPAC)				,
			"Base.556Drum",	DrumMag	* w556 - (DrumMag * xDrumMag)	- (w556 * x556)												,
			"Base.545Drum",	DrumMag	* w545x39 - (DrumMag * xDrumMag)	- (w545x39 * x545x39)		- (DrumMag * xSOV)		- (DrumMag * MILxUSA)		- (DrumMag * MILxCZE)	- (DrumMag * MILxKOR)		- (DrumMag * MILxEUR)	- (DrumMag * MILxISR)		,
			"Base.762Drum",	DrumMag	* w762x39 - (DrumMag * xDrumMag)	- (w762x39 * x762x39)				- (DrumMag * MILxUSA)			- (DrumMag * MILxKOR)		- (DrumMag * MILxEUR)			,
			"Base.12gDrum",	DrumMag	* w12g - (DrumMag * xDrumMag)	- (w12g * x12g)						- (DrumMag * MILxCZE)						,
			"Base.308Belt",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wLMG * xLMG)											,
			"Base.556Belt",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wLMG * xLMG)				- (StdMag * MILxSOV)	- (StdMag * MILxCZE)		- (StdMag * MILxPAC)	- (StdMag * MILxEUR)			,
			"Base.762x39Belt",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)	- (wLMG * xLMG)			- (StdMag * MILxUSA)		- (StdMag * MILxCZE)	- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.762x54rBelt",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)	- (wLMG * xLMG)	- (StdMag * xSOV)		- (StdMag * MILxUSA)			- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.556MiniCan",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wMINI * xMINI)	- (StdMag * xUSA)			- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)				,
			"Base.308MiniCan",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wMINI * xMINI)	- (StdMag * xUSA)			- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.50MiniCan",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)	- (wMINI * xMINI)	- (StdMag * xUSA)			- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)		- (StdMag * MILxISR)		,
			"Base.M2A1_Tank",	ExtMag	* wFLAME - (ExtMag * xExtMag)	- (wFLAME * xFLAME)		- (ExtMag * xUSA)										,
			"Base.M2A1_Can",	StdMag	* wFLAME - (StdMag * xStdMag)	- (wFLAME * xFLAME)		- (StdMag * xUSA)										,
			"Base.M2A1_Can",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.Standard_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.Large_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.RussianMachete",	LgKnife		- (LgKnife * xLgKnife)		- (LgKnife * xSOV)		- (LgKnife * MILxUSA)		- (LgKnife * MILxCZE)	- (LgKnife * MILxKOR)	- (LgKnife * MILxPAC)	- (LgKnife * MILxEUR)	- (LgKnife * MILxISR)		,
			"Base.BGMachete",	LgKnife		- (LgKnife * xLgKnife)		- (LgKnife * xUSA)		- (LgKnife * MILxUSA)	- (LgKnife * MILxSOV)	- (LgKnife * MILxCZE)	- (LgKnife * MILxKOR)	- (LgKnife * MILxPAC)	- (LgKnife * MILxEUR)			,
			"Base.RamboKnife",	LgKnife		- (LgKnife * xLgKnife)		- (LgKnife * xUSA)			- (LgKnife * MILxSOV)			- (LgKnife * MILxPAC)				,
			"Base.Butterfly",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xPAC)	- (SmKnife * MILxNON)	- (SmKnife * MILxUSA)	- (SmKnife * MILxSOV)	- (SmKnife * MILxCZE)	- (SmKnife * MILxKOR)	- (SmKnife * MILxPAC)	- (SmKnife * MILxEUR)	- (SmKnife * MILxISR)		,
			"Base.PushDagger",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xUSA)	- (SmKnife * MILxNON)	- (SmKnife * MILxUSA)	- (SmKnife * MILxSOV)	- (SmKnife * MILxCZE)	- (SmKnife * MILxKOR)	- (SmKnife * MILxPAC)	- (SmKnife * MILxEUR)	- (SmKnife * MILxISR)		,
			"Base.Karambit",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xPAC)		- (SmKnife * MILxUSA)	- (SmKnife * MILxSOV)	- (SmKnife * MILxCZE)	- (SmKnife * MILxKOR)		- (SmKnife * MILxEUR)	- (SmKnife * MILxISR)		,
			"Base.ThrowingKnife",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xUSA)	- (SmKnife * MILxNON)	- (SmKnife * MILxUSA)	- (SmKnife * MILxSOV)	- (SmKnife * MILxCZE)	- (SmKnife * MILxKOR)	- (SmKnife * MILxPAC)	- (SmKnife * MILxEUR)	- (SmKnife * MILxISR)		,
			"Base.NinjaStar",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xPAC)	- (SmKnife * MILxNON)	- (SmKnife * MILxUSA)	- (SmKnife * MILxSOV)	- (SmKnife * MILxCZE)	- (SmKnife * MILxKOR)	- (SmKnife * MILxPAC)	- (SmKnife * MILxEUR)	- (SmKnife * MILxISR)		,
			"Base.Tactical_Axe",	Axe		- (Axe * xAxe)		- (Axe * xUSA)	- (Axe * MILxNON)	- (Axe * MILxUSA)	- (Axe * MILxSOV)	- (Axe * MILxCZE)	- (Axe * MILxKOR)	- (Axe * MILxPAC)	- (Axe * MILxEUR)	- (Axe * MILxISR)		,
			"Base.Tactical_Sickle",	Axe		- (Axe * xAxe)		- (Axe * xUSA)	- (Axe * MILxNON)	- (Axe * MILxUSA)	- (Axe * MILxSOV)	- (Axe * MILxCZE)	- (Axe * MILxKOR)	- (Axe * MILxPAC)	- (Axe * MILxEUR)	- (Axe * MILxISR)		,
			"Base.Trench_Axe",	Axe		- (Axe * xAxe)		- (Axe * xEUR)	- (Axe * MILxNON)	- (Axe * MILxUSA)	- (Axe * MILxSOV)	- (Axe * MILxCZE)	- (Axe * MILxKOR)	- (Axe * MILxPAC)	- (Axe * MILxEUR)	- (Axe * MILxISR)		,
			"Base.Broad_Axe",	Axe		- (Axe * xAxe)		- (Axe * xEUR)	- (Axe * MILxNON)	- (Axe * MILxUSA)	- (Axe * MILxSOV)	- (Axe * MILxCZE)	- (Axe * MILxKOR)	- (Axe * MILxPAC)	- (Axe * MILxEUR)	- (Axe * MILxISR)		,
			"Base.DingDong",	Blunt		- (Blunt * xBlunt)		- (Blunt * xUSA)	- (Blunt * MILxNON)	- (Blunt * MILxUSA)	- (Blunt * MILxSOV)	- (Blunt * MILxCZE)	- (Blunt * MILxKOR)	- (Blunt * MILxPAC)	- (Blunt * MILxEUR)	- (Blunt * MILxISR)		,
			"Base.MilitaryBaton",	Blunt		- (Blunt * xBlunt)		- (Blunt * xUSA)										,
			"Base.ASP_B",	Blunt		- (Blunt * xBlunt)		- (Blunt * xUSA)										,
			"Base.KillBill",	Sword		- (Sword * xSword)		- (Sword * xPAC)	- (Sword * MILxNON)	- (Sword * MILxUSA)	- (Sword * MILxSOV)	- (Sword * MILxCZE)	- (Sword * MILxKOR)	- (Sword * MILxPAC)	- (Sword * MILxEUR)	- (Sword * MILxISR)		,
			"Base.CH_WarSword",	Sword		- (Sword * xSword)		- (Sword * xPAC)		- (Sword * MILxUSA)	- (Sword * MILxSOV)	- (Sword * MILxCZE)	- (Sword * MILxKOR)		- (Sword * MILxEUR)	- (Sword * MILxISR)		,
			"Base.Conan_Sword",	Sword		- (Sword * xSword)		- (Sword * xUSA)	- (Sword * MILxNON)	- (Sword * MILxUSA)	- (Sword * MILxSOV)	- (Sword * MILxCZE)	- (Sword * MILxKOR)	- (Sword * MILxPAC)	- (Sword * MILxEUR)	- (Sword * MILxISR)		,
		},																
		dontSpawnAmmo = 		 MILammo	,													
	},																	
																		
	ArmyAmmo = {																	
		rolls =	MILRollAMMO	,														
		items = {																
			"Base.38Speed",	StdMag	* w357 - (StdMag * xStdMag)	- (w357 * x357)	- (StdMag * xREV)		- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.44Speed",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)	- (StdMag * xREV)		- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.SRM1208_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.SRM1212_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.SRM1216_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.SIX12_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.CP33Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)		- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.CP33_17MagBase",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)		- (ExtMag * xUSA)	- (ExtMag * MILxNON)	- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)	- (ExtMag * MILxCZE)	- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)	- (ExtMag * x90)	,
			"Base.22Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)			- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)			,
			"Base.22ExtClip",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)			- (ExtMag * MILxNON)	- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)	- (ExtMag * MILxCZE)	- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)			,
			"Base.380Clip",	StdMag	* w380 - (StdMag * xStdMag)	- (w380 * x380)				- (StdMag * MILxUSA)	- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.380ExtClip",	ExtMag	* w380 - (ExtMag * xExtMag)	- (w380 * x380)				- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)		- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)		,
			"Base.9mmSSClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)												,
			"Base.9mmSSExtClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)												,
			"Base.9mmClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)												,
			"Base.9mmExtClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)												,
			"Base.45DSClip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)					- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)				,
			"Base.45DSExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)					- (ExtMag * MILxSOV)		- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)				,
			"Base.45Clip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)					- (StdMag * MILxSOV)	- (StdMag * MILxCZE)		- (StdMag * MILxPAC)		- (StdMag * MILxISR)		,
			"Base.45ExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)					- (ExtMag * MILxSOV)	- (ExtMag * MILxCZE)		- (ExtMag * MILxPAC)		- (ExtMag * MILxISR)		,
			"Base.44Clip",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)			- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)			,
			"Base.223StdClip",	StdMag	* w223 - (StdMag * xStdMag)	- (w223 * x223)			- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.223ExtClip",	ExtMag	* w223 - (ExtMag * xExtMag)	- (w223 * x223)			- (ExtMag * MILxNON)	- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)		- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)		,
			"Base.556Clip",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)												,
			"Base.308StdClip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)				- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.308ExtClip",	ExtMag	* w308 - (ExtMag * xExtMag)	- (w308 * x308)				- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)	- (ExtMag * MILxCZE)	- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)		,
			"Base.3006ExtClip",	ExtMag	* w3006 - (ExtMag * xExtMag)	- (w3006 * x3006)		- (ExtMag * xUSA)	- (ExtMag * MILxNON)	- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)	- (ExtMag * MILxCZE)	- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)		,
			"Base.SVDClip",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)		- (StdMag * xSOV)		- (StdMag * MILxUSA)			- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.ASHClip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xSOV)		- (StdMag * MILxUSA)		- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.M82Clip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xUSA)			- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)				,
			"Base.M1Clip",	StdMag	* w3006 - (StdMag * xStdMag)	- (w3006 * x3006)		- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.SKSClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)		- (StdMag * xSOV)		- (StdMag * MILxUSA)			- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.1903Clip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)			- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.545StdClip",	StdMag	* w545x39 - (StdMag * xStdMag)	- (w545x39 * x545x39)		- (StdMag * xSOV)		- (StdMag * MILxUSA)		- (StdMag * MILxCZE)	- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.AKClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)				- (StdMag * MILxUSA)			- (StdMag * MILxKOR)		- (StdMag * MILxEUR)			,
			"Base.ASVALClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)		- (ExtMag * xSOV)		- (ExtMag * MILxUSA)		- (ExtMag * MILxCZE)	- (ExtMag * MILxKOR)		- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)		,
			"Base.VSSClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)		- (StdMag * xSOV)		- (StdMag * MILxUSA)		- (StdMag * MILxCZE)	- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.57Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.P90Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.22Drum",	DrumMag	* w22 - (DrumMag * xDrumMag)	- (w22 * x22)			- (DrumMag * MILxNON)	- (DrumMag * MILxUSA)	- (DrumMag * MILxSOV)	- (DrumMag * MILxCZE)	- (DrumMag * MILxKOR)	- (DrumMag * MILxPAC)	- (DrumMag * MILxEUR)			,
			"Base.9mmDrum",	DrumMag	* w9 - (DrumMag * xDrumMag)	- (w9 * x9)												,
			"Base.45Drum",	DrumMag	* w45 - (DrumMag * xDrumMag)	- (w45 * x45)					- (DrumMag * MILxSOV)		- (DrumMag * MILxKOR)	- (DrumMag * MILxPAC)				,
			"Base.556Drum",	DrumMag	* w556 - (DrumMag * xDrumMag)	- (w556 * x556)												,
			"Base.545Drum",	DrumMag	* w545x39 - (DrumMag * xDrumMag)	- (w545x39 * x545x39)		- (DrumMag * xSOV)		- (DrumMag * MILxUSA)		- (DrumMag * MILxCZE)	- (DrumMag * MILxKOR)		- (DrumMag * MILxEUR)	- (DrumMag * MILxISR)		,
			"Base.762Drum",	DrumMag	* w762x39 - (DrumMag * xDrumMag)	- (w762x39 * x762x39)				- (DrumMag * MILxUSA)			- (DrumMag * MILxKOR)		- (DrumMag * MILxEUR)			,
			"Base.12gDrum",	DrumMag	* w12g - (DrumMag * xDrumMag)	- (w12g * x12g)						- (DrumMag * MILxCZE)						,
			"Base.308Belt",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wLMG * xLMG)											,
			"Base.556Belt",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wLMG * xLMG)				- (StdMag * MILxSOV)	- (StdMag * MILxCZE)		- (StdMag * MILxPAC)	- (StdMag * MILxEUR)			,
			"Base.762x39Belt",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)	- (wLMG * xLMG)			- (StdMag * MILxUSA)		- (StdMag * MILxCZE)	- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.762x54rBelt",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)	- (wLMG * xLMG)	- (StdMag * xSOV)		- (StdMag * MILxUSA)			- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.556MiniCan",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wMINI * xMINI)	- (StdMag * xUSA)			- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)				,
			"Base.308MiniCan",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wMINI * xMINI)	- (StdMag * xUSA)			- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.50MiniCan",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)	- (wMINI * xMINI)	- (StdMag * xUSA)			- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)		- (StdMag * MILxISR)		,
			"Base.M2A1_Tank",	ExtMag	* wFLAME - (ExtMag * xExtMag)	- (wFLAME * xFLAME)		- (ExtMag * xUSA)										,
			"Base.M2A1_Can",	StdMag	* wFLAME - (StdMag * xStdMag)	- (wFLAME * xFLAME)		- (StdMag * xUSA)										,
			"Base.M2A1_Can",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.Standard_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.Large_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.AmmoCan30_22",	AmmoCan		* w22	- (AmmoCan * x22)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)			,
			"Base.AmmoCan30_380",	AmmoCan		* w380	- (AmmoCan * x380)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)		- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_57",	AmmoCan		* w57	- (AmmoCan * x57)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)	- (AmmoCan * x90)	,
			"Base.AmmoCan30_9",	AmmoCan		* w9	- (AmmoCan * x9)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan30_38",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_357",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_45",	AmmoCan		* w45	- (AmmoCan * x45)	- (AmmoCan * xAmmoCan)			- (AmmoCan * MILxSOV)			- (AmmoCan * MILxPAC)				,
			"Base.AmmoCan30_44",	AmmoCan		* w44	- (AmmoCan * x44)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_45LC",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_4570",	AmmoCan		* w4570	- (AmmoCan * x4570)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_50MAG",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)		- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)	- (AmmoCan * x90)	,
			"Base.AmmoCan50_223",	AmmoCan		* w223	- (AmmoCan * x223)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)		- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_556",	AmmoCan		* w556	- (AmmoCan * x556)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_556",	AmmoCan		* w556	- (AmmoCan * x556)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_762x39",	AmmoCan		* w762x39	- (AmmoCan * x762x39)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)			- (AmmoCan * MILxKOR)		- (AmmoCan * MILxEUR)			,
			"Base.AmmoCan50_762x39",	AmmoCan		* w762x39	- (AmmoCan * x762x39)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)			- (AmmoCan * MILxKOR)		- (AmmoCan * MILxEUR)			,
			"Base.AmmoCan50_545x39",	AmmoCan		* w545x39	- (AmmoCan * x545x39)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)		- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)		- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_762x54r",	AmmoCan		* w762x54r	- (AmmoCan * x762x54r)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)			- (AmmoCan * MILxKOR)		- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_308",	AmmoCan		* w308	- (AmmoCan * x308)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_308",	AmmoCan		* w308	- (AmmoCan * x308)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_3006",	AmmoCan		* w3006	- (AmmoCan * x3006)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_410",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_20",	AmmoCan		* w20g	- (AmmoCan * x20g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)		- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_12",	AmmoCan		* w12g	- (AmmoCan * x12g)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_10",	AmmoCan		* w10g	- (AmmoCan * x10g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_4",	AmmoCan		* w4g	- (AmmoCan * x4g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_50",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)			- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)		- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_50",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)			- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)		- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_ROCKET",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_ROCKET",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.BB177Box",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)	- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.CO2_Cartridge_Box",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)	- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.PB68Bag",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)	- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.Bullets22Box",	AmmoBox		* w22	- (AmmoBox * x22)	- (AmmoBox * xAmmoBox)		- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)	- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)			,
			"Base.Bullets380Box",	AmmoBox		* w380	- (AmmoBox * x380)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)		- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.Bullets57Box",	AmmoBox		* w57	- (AmmoBox * x57)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)	- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)	- (AmmoBox * x90)	,
			"Base.Bullets9mmBox",	AmmoBox		* w9	- (AmmoBox * x9)	- (AmmoBox * xAmmoBox)										,
			"Base.Bullets38Box",	AmmoBox		* w357	- (AmmoBox * x357)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)	- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.Bullets357Box",	AmmoBox		* w357	- (AmmoBox * x357)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)	- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.Bullets45Box",	AmmoBox		* w45	- (AmmoBox * x45)	- (AmmoBox * xAmmoBox)			- (AmmoBox * MILxSOV)			- (AmmoBox * MILxPAC)				,
			"Base.Bullets44Box",	AmmoBox		* w44	- (AmmoBox * x44)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)	- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.Bullets45LCBox",	AmmoBox		* w45LC	- (AmmoBox * x45LC)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)	- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.Bullets4570Box",	AmmoBox		* w4570	- (AmmoBox * x4570)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)	- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.Bullets50MAGBox",	AmmoBox		* wBMG	- (AmmoBox * xBMG)	- (AmmoBox * xAmmoBox)		- (AmmoBox * MILxUSA)		- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)	- (AmmoBox * x90)	,
			"Base.223Box",	AmmoBox		* w223	- (AmmoBox * x223)	- (AmmoBox * xAmmoBox)		- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)		- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.556Box",	AmmoBox		* w556	- (AmmoBox * x556)	- (AmmoBox * xAmmoBox)										,
			"Base.762x39Box",	AmmoBox		* w762x39	- (AmmoBox * x762x39)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)			- (AmmoBox * MILxKOR)		- (AmmoBox * MILxEUR)			,
			"Base.545x39Box",	AmmoBox		* w545x39	- (AmmoBox * x545x39)	- (AmmoBox * xAmmoBox)		- (AmmoBox * MILxUSA)		- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)		- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.762x54rBox",	AmmoBox		* w762x54r	- (AmmoBox * x762x54r)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)			- (AmmoBox * MILxKOR)		- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.308Box",	AmmoBox		* w308	- (AmmoBox * x308)	- (AmmoBox * xAmmoBox)										,
			"Base.3006Box",	AmmoBox		* w3006	- (AmmoBox * x3006)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)	- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.410gShotgunShellsBox",	AmmoBox		* w45LC	- (AmmoBox * x45LC)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)	- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.20gShotgunShellsBox",	AmmoBox		* w20g	- (AmmoBox * x20g)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)		- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.ShotgunShellsBox",	AmmoBox		* w12g	- (AmmoBox * x12g)	- (AmmoBox * xAmmoBox)										,
			"Base.10gShotgunShellsBox",	AmmoBox		* w10g	- (AmmoBox * x10g)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)	- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.4gShotgunShellsBox",	AmmoBox		* w4g	- (AmmoBox * x4g)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)	- (AmmoBox * MILxUSA)	- (AmmoBox * MILxSOV)	- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)	- (AmmoBox * MILxEUR)	- (AmmoBox * MILxISR)		,
			"Base.50BMGBox",	AmmoBox		* wBMG	- (AmmoBox * xBMG)	- (AmmoBox * xAmmoBox)			- (AmmoBox * MILxSOV)	- (AmmoBox * MILxCZE)	- (AmmoBox * MILxKOR)	- (AmmoBox * MILxPAC)		- (AmmoBox * MILxISR)		,
			"Base.Bolt_Bear",	AmmoBox		* wBOW	- (AmmoBox * xBOW)		- (AmmoBox * MILxNON)									,
			"Base.Bolt_Bear_Pack",	AmmoBox		* wBOW	- (AmmoBox * xBOW)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)									,
			"Base.Arrow_Fiberglass",	AmmoBox		* wBOW	- (AmmoBox * xBOW)		- (AmmoBox * MILxNON)									,
			"Base.Arrow_Fiberglass_Pack",	AmmoBox		* wBOW	- (AmmoBox * xBOW)	- (AmmoBox * xAmmoBox)	- (AmmoBox * MILxNON)									,
			"Base.40HERound",	AmmoBox		* wGREN	- (AmmoBox * xGREN)											,
			"Base.40INCRound",	AmmoBox		* wGREN	- (AmmoBox * xGREN)											,
			"Base.HERocket",	AmmoBox		* wGREN	- (AmmoBox * xGREN)											,
			"Base.Flare",	AmmoBox		* wFLAME	- (AmmoBox * xFLAME)											,
			"Base.Grenade_Fragmentation",	AmmoBox	* MILx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)										,
			"Base.Grenade_Stick",	AmmoBox	* MILx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xEUR)										,
			"Base.Explosive_Landmine",	AmmoBox	* MILx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)										,
			"Base.Explosive_Claymore_P",	AmmoBox	* MILx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)										,
			"Base.PolyCan_Red_SPASClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w12g	- (w12g * x12g)					- (PolyCan * MILxCZE)						,
			"Base.PolyCan_Red_12gDrum",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w12g	- (w12g * x12g)					- (PolyCan * MILxCZE)						,
			"Base.PolyCan_Red_38Speed",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w357	- (w357 * x357)	- (PolyCan * xREV)	- (PolyCan * MILxNON)	- (PolyCan * MILxUSA)	- (PolyCan * MILxSOV)	- (PolyCan * MILxCZE)	- (PolyCan * MILxKOR)	- (PolyCan * MILxPAC)	- (PolyCan * MILxEUR)	- (PolyCan * MILxISR)		,
			"Base.PolyCan_Red_44Speed",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w44	- (w44 * x44)	- (PolyCan * xREV)	- (PolyCan * MILxNON)	- (PolyCan * MILxUSA)	- (PolyCan * MILxSOV)	- (PolyCan * MILxCZE)	- (PolyCan * MILxKOR)	- (PolyCan * MILxPAC)	- (PolyCan * MILxEUR)	- (PolyCan * MILxISR)		,
			"Base.PolyCan_Blue_9mmSSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)		- (PolyCan * MILxNON)	- (PolyCan * MILxUSA)	- (PolyCan * MILxSOV)	- (PolyCan * MILxCZE)	- (PolyCan * MILxKOR)	- (PolyCan * MILxPAC)	- (PolyCan * MILxEUR)	- (PolyCan * MILxISR)		,
			"Base.PolyCan_Blue_9mmSSExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)		- (PolyCan * MILxNON)	- (PolyCan * MILxUSA)	- (PolyCan * MILxSOV)	- (PolyCan * MILxCZE)	- (PolyCan * MILxKOR)	- (PolyCan * MILxPAC)	- (PolyCan * MILxEUR)	- (PolyCan * MILxISR)		,
			"Base.PolyCan_Blue_9mmClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)											,
			"Base.PolyCan_Blue_9mmExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)											,
			"Base.PolyCan_Blue_9mmDrum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)											,
			"Base.PolyCan_Blue_45DSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)				- (PolyCan * MILxSOV)		- (PolyCan * MILxKOR)	- (PolyCan * MILxPAC)				,
			"Base.PolyCan_Blue_45DSExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)				- (PolyCan * MILxSOV)		- (PolyCan * MILxKOR)	- (PolyCan * MILxPAC)				,
			"Base.PolyCan_Blue_45Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)				- (PolyCan * MILxSOV)		- (PolyCan * MILxKOR)	- (PolyCan * MILxPAC)				,
			"Base.PolyCan_Blue_45Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)				- (PolyCan * MILxSOV)	- (PolyCan * MILxCZE)		- (PolyCan * MILxPAC)		- (PolyCan * MILxISR)		,
			"Base.PolyCan_Blue_45ExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)				- (PolyCan * MILxSOV)	- (PolyCan * MILxCZE)		- (PolyCan * MILxPAC)		- (PolyCan * MILxISR)		,
			"Base.PolyCan_Brown_556Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w556	- (w556 * x556)											,
			"Base.PolyCan_Brown_556Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w556	- (w556 * x556)											,
			"Base.PolyCan_Brown_AKClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)			- (PolyCan * MILxUSA)			- (PolyCan * MILxKOR)		- (PolyCan * MILxEUR)			,
			"Base.PolyCan_Brown_762Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)			- (PolyCan * MILxUSA)			- (PolyCan * MILxKOR)		- (PolyCan * MILxEUR)			,
			"Base.PolyCan_Brown_545StdClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w545x39	- (w545x39 * x545x39)			- (PolyCan * MILxUSA)		- (PolyCan * MILxCZE)	- (PolyCan * MILxKOR)		- (PolyCan * MILxEUR)	- (PolyCan * MILxISR)		,
			"Base.PolyCan_Brown_545Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w545x39	- (w545x39 * x545x39)			- (PolyCan * MILxUSA)		- (PolyCan * MILxCZE)	- (PolyCan * MILxKOR)		- (PolyCan * MILxEUR)	- (PolyCan * MILxISR)		,
			"Base.PolyCan_Beige_308StdClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)											,
			"Base.PolyCan_Beige_308ExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)											,
			"Base.PolyCan_Beige_BMG",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* wBMG	- (wBMG * xBMG)				- (PolyCan * MILxSOV)		- (PolyCan * MILxKOR)	- (PolyCan * MILxPAC)				,
			"Base.PolyCan_Beige_K11",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* wGREN	- (wGREN * xGREN)	- (PolyCan * xKOR)		- (PolyCan * MILxUSA)	- (PolyCan * MILxSOV)	- (PolyCan * MILxCZE)		- (PolyCan * MILxPAC)	- (PolyCan * MILxEUR)	- (PolyCan * MILxISR)	- (PolyCan * x90)	,
			"Base.PolyCan_Beige_SVDClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x54r	- (w762x54r * x762x54r)	- (PolyCan * xSOV)		- (PolyCan * MILxUSA)			- (PolyCan * MILxKOR)		- (PolyCan * MILxEUR)	- (PolyCan * MILxISR)		,
			"Base.PolyCan_Beige_SKSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)	- (PolyCan * xSOV)		- (PolyCan * MILxUSA)			- (PolyCan * MILxKOR)		- (PolyCan * MILxEUR)	- (PolyCan * MILxISR)		,
			"Base.PolyCan_Beige_M1Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w3006	- (w3006 * x3006)	- (PolyCan * xUSA)	- (PolyCan * MILxNON)	- (PolyCan * MILxUSA)	- (PolyCan * MILxSOV)	- (PolyCan * MILxCZE)	- (PolyCan * MILxKOR)	- (PolyCan * MILxPAC)	- (PolyCan * MILxEUR)	- (PolyCan * MILxISR)		,
			"Base.PolyCan_Beige_1903Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)		- (PolyCan * MILxNON)	- (PolyCan * MILxUSA)	- (PolyCan * MILxSOV)	- (PolyCan * MILxCZE)	- (PolyCan * MILxKOR)	- (PolyCan * MILxPAC)	- (PolyCan * MILxEUR)	- (PolyCan * MILxISR)		,
		}																
	},																	
																		
	SecurityGuns = {																	
		rolls =	SECRollGUN	,														
		items = {																
			"Base.UmarexSS",	wBB	 * SECx	- (wBB * xBB)		- (wBB * SECx * xUSA)		- (wBB * SECx * SECxNON)	- (wBB * SECx * x90)	,						
			"Base.Benjamin_M397",	wBB	 * SECx	- (wBB * xBB)		- (wBB * SECx * xUSA)		- (wBB * SECx * SECxNON)		,						
			"Base.RWS_M34",	wBB	 * SECx	- (wBB * xBB)		- (wBB * SECx * xUSA)		- (wBB * SECx * SECxNON)	- (wBB * SECx * x90)	,						
			"Base.VM_68",	wBB	 * SECx	- (wBB * xBB)		- (wBB * SECx * xUSA)		- (wBB * SECx * SECxNON)		,						
			"Base.Auto_Cocker",	wBB	 * SECx	- (wBB * xBB)		- (wBB * SECx * xUSA)		- (wBB * SECx * SECxNON)		,						
			"Base.Tippmann_SL68",	wBB	 * SECx	- (wBB * xBB)		- (wBB * SECx * xUSA)		- (wBB * SECx * SECxNON)		,						
			"Base.Sheridan_PGP",	wBB	 * SECx	- (wBB * xBB)		- (wBB * SECx * xUSA)		- (wBB * SECx * SECxNON)		,						
			"Base.CP33",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)	- (w22 * SECx * x90)	,						
			"Base.Ruger_MK4",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)	- (w22 * SECx * x90)	,						
			"Base.Ruger_MK4_2245",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)	- (w22 * SECx * x90)	,						
			"Base.Buckmark",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)		,						
			"Base.Buckmark_Long",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)		,						
			"Base.Buckmark_Carbine",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)		,						
			"Base.HK4_22",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xEUR)		- (w22 * SECx * SECxNON)		,						
			"Base.ZIP22",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)	- (w22 * SECx * x90)	,						
			"Base.Ruger_1022",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)		,						
			"Base.Marlin_M70",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)		,						
			"Base.Cricket_22",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xBOLT)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)		,						
			"Base.AR7",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)		,						
			"Base.Calico_22LR",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSMG)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)		,						
			"Base.American180",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSMG)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)		,						
			"Base.Winchester1903",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xLEVER)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)		,						
			"Base.KRISS22_MK11_Stock",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSMG)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)	- (w22 * SECx * x90)	,						
			"Base.KRISS22_CRB_Stock",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSMG)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)	- (w22 * SECx * x90)	,						
			"Base.CMR_30",	w22	 * SECx	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)		- (w22 * SECx * SECxNON)	- (w22 * SECx * x90)	,						
			"Base.G42",	w380	 * SECx	- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xEUR)		- (w380 * SECx * SECxNON)	- (w380 * SECx * x90)	,						
			"Base.LCP380",	w380	 * SECx	- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xUSA)		- (w380 * SECx * SECxNON)	- (w380 * SECx * x90)	,						
			"Base.BodyGuard380",	w380	 * SECx	- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xUSA)		- (w380 * SECx * SECxNON)	- (w380 * SECx * x90)	,						
			"Base.Bersa85F",	w380	 * SECx	- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xREST)		- (w380 * SECx * SECxNON)		,						
			"Base.Colt1903",	w380	 * SECx	- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xUSA)		- (w380 * SECx * SECxNON)		,						
			"Base.Makarov380",	w380	 * SECx	- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xSOV)		- (w380 * SECx * SECxNON)		,						
			"Base.PPK",	w380	 * SECx	- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xEUR)		- (w380 * SECx * SECxNON)		,						
			"Base.HK4_380",	w380	 * SECx	- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xEUR)		- (w380 * SECx * SECxNON)		,						
			"Base.VP70",	w380	 * SECx	- (w380 * x380)	- (w380 * SECx * xSMG)	- (w380 * SECx * xEUR)		- (w380 * SECx * SECxNON)		,						
			"Base.VP70_Stock",	w380	 * SECx	- (w380 * x380)	- (w380 * SECx * xSMG)	- (w380 * SECx * xEUR)		- (w380 * SECx * SECxNON)		,						
			"Base.Vz61_Fixed",	w380	 * SECx	- (w380 * x380)	- (w380 * SECx * xSMG)	- (w380 * SECx * xCZE)		- (w380 * SECx * SECxNON)		,						
			"Base.Vz61_Fold",	w380	 * SECx	- (w380 * x380)	- (w380 * SECx * xSMG)	- (w380 * SECx * xCZE)		- (w380 * SECx * SECxNON)		,						
			"Base.BT380_Stock",	w380	 * SECx	- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xEUR)		- (w380 * SECx * SECxNON)	- (w380 * SECx * x90)	,						
			"Base.FN_57", 	w57	 * SECx	- (w57 * x57)	- (w57 * SECx * xSEMI)	- (w57 * SECx * xEUR)			- (w57 * SECx * x90)	,						
			"Base.FN_57_MK2", 	w57	 * SECx	- (w57 * x57)	- (w57 * SECx * xSEMI)	- (w57 * SECx * xEUR)			- (w57 * SECx * x90)	,						
			"Base.FN_P90",	w57	 * SECx	- (w57 * x57)	- (w57 * SECx * xSMG)	- (w57 * SECx * xEUR)			- (w57 * SECx * x90)	,						
			"Base.FN_PS90",	w57	 * SECx	- (w57 * x57)	- (w57 * SECx * xSMG)	- (w57 * SECx * xEUR)			- (w57 * SECx * x90)	,						
			"Base.MPA57DMG",	w57	 * SECx	- (w57 * x57)	- (w57 * SECx * xSMG)	- (w57 * SECx * xUSA)			- (w57 * SECx * x90)	,						
			"Base.MPA57DMG_Carbine",	w57	 * SECx	- (w57 * x57)	- (w57 * SECx * xSMG)	- (w57 * SECx * xUSA)			- (w57 * SECx * x90)	,						
			"Base.AR57_PDW",	w57	 * SECx	- (w57 * x57)	- (w57 * SECx * xSMG)	- (w57 * SECx * xUSA)			- (w57 * SECx * x90)	,						
			"Base.AR57_PDW_Long",	w57	 * SECx	- (w57 * x57)	- (w57 * SECx * xSMG)	- (w57 * SECx * xUSA)			- (w57 * SECx * x90)	,						
			"Base.Ruger_PCC",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)			- (w9 * SECx * x90)	,						
			"Base.Ruger_PCC_R",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)			- (w9 * SECx * x90)	,						
			"Base.Ruger_PCC_M",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)			- (w9 * SECx * x90)	,						
			"Base.HiPoint",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)				,						
			"Base.HiPoint_Carbine",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)				,						
			"Base.STAR_BM", 	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xREST)				,						
			"Base.M39",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)				,						
			"Base.MK22",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)				,						
			"Base.G43",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)			- (w9 * SECx * x90)	,						
			"Base.CZ75",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)				,						
			"Base.CZ_75b",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)				,						
			"Base.CZ_75_SP01_SS",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)				,						
			"Base.CZ_75_SP01",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)				,						
			"Base.CZ_75_Compact",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)				,						
			"Base.CZ_75_P01",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)				,						
			"Base.CZ_2075",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)			- (w9 * SECx * x90)	,						
			"Base.CZ_75_Shadow",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)			- (w9 * SECx * x90)	,						
			"Base.CZ_75_Czechmate",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)			- (w9 * SECx * x90)	,						
			"Base.EAA_Witness_9",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)				,						
			"Base.EAA_Witness_Long_9",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)				,						
			"Base.G17",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)				,						
			"Base.G18",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)		- (w9 * SECx * SECxNON)		,						
			"Base.G34", 	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)			- (w9 * SECx * x90)	,						
			"Base.K5",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xKOR)				,						
			"Base.RPD_92FS",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)				,						
			"Base.M9",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)				,						
			"Base.M9A3",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)			- (w9 * SECx * x90)	,						
			"Base.B93R",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)		- (w9 * SECx * SECxNON)		,						
			"Base.M5906",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)				,						
			"Base.XD9",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)			- (w9 * SECx * x90)	,						
			"Base.MP9",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)			- (w9 * SECx * x90)	,						
			"Base.P226",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)				,						
			"Base.APS",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xSOV)		- (w9 * SECx * SECxNON)		,						
			"Base.Makarov",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xSOV)		- (w9 * SECx * SECxNON)		,						
			"Base.PB",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xSOV)		- (w9 * SECx * SECxNON)		,						
			"Base.Luger",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)		- (w9 * SECx * SECxNON)		,						
			"Base.Luger_WW1",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)		- (w9 * SECx * SECxNON)		,						
			"Base.Luger_Carbine",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)		- (w9 * SECx * SECxNON)		,						
			"Base.UZI", 	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xREST)				,						
			"Base.UZI_Wood",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xREST)				,						
			"Base.UZI_Micro",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xREST)				,						
			"Base.BT9_Fold",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)			- (w9 * SECx * x90)	,						
			"Base.UMP9_Stock",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)			- (w9 * SECx * x90)	,						
			"Base.SUB2000",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)		- (w9 * SECx * SECxNON)	- (w9 * SECx * x90)	,						
			"Base.MP5_Fixed",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)				,						
			"Base.MP5_Stock",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)				,						
			"Base.MP5SD6_Fixed",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	- (w9 * SECx * CIVxMIL)			,						
			"Base.MP5SD6_Stock",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	- (w9 * SECx * CIVxMIL)			,						
			"Base.EVO_Fold",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xCZE)			- (w9 * SECx * x90)	,						
			"Base.K7_Stock",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xKOR)	- (w9 * SECx * CIVxMIL)			,						
			"Base.AUG9",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)				,						
			"Base.KG9",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)				,						
			"Base.Calico_M900_Fold",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)		- (w9 * SECx * SECxNON)		,						
			"Base.Calico_M950_Pistol",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)		- (w9 * SECx * SECxNON)		,						
			"Base.Bizon2_01_Stock",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xSOV)		- (w9 * SECx * SECxNON)		,						
			"Base.VSS",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xSOV)		- (w9 * SECx * SECxNON)		,						
			"Base.ASVAL",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xSOV)		- (w9 * SECx * SECxNON)		,						
			"Base.M1Carbine",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)		- (w9 * SECx * SECxNON)		,						
			"Base.M2Carbine",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)		- (w9 * SECx * SECxNON)		,						
			"Base.M635",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)				,						
			"Base.M635S",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)				,						
			"Base.M635SD",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)	- (w9 * SECx * CIVxMIL)			,						
			"Base.MP7",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)			- (w9 * SECx * x90)	,						
			"Base.Jatimatic",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)				,						
			"Base.Sten",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)		- (w9 * SECx * SECxNON)		,						
			"Base.Sten_MK2",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)		- (w9 * SECx * SECxNON)		,						
			"Base.Sten_MK2SD",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)		- (w9 * SECx * SECxNON)		,						
			"Base.STAR_Z45_Stock",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)		- (w9 * SECx * SECxNON)		,						
			"Base.STAR_Z45_Fixed",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)		- (w9 * SECx * SECxNON)		,						
			"Base.KRISS9_Stock",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)			- (w9 * SECx * x90)	,						
			"Base.KRISS9_MLOK_Stock",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)			- (w9 * SECx * x90)	,						
			"Base.JW3_TTI_MPX",	w9	 * SECx	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)			- (w9 * SECx * x90)	,						
			"Base.M5238",	w357	 * SECx	- (w357 * x357)	- (w357 * SECx * xSEMI)	- (w357 * SECx * xUSA)		- (w357 * SECx * SECxNON)		,						
			"Base.Taurus856",	w357	 * SECx	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xREST)		- (w357 * SECx * SECxNON)	- (w357 * SECx * x90)	,						
			"Base.Colt_Service38",	w357	 * SECx	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xUSA)		- (w357 * SECx * SECxNON)		,						
			"Base.GP100_2",	w357	 * SECx	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xUSA)		- (w357 * SECx * SECxNON)		,						
			"Base.GP100_4",	w357	 * SECx	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xUSA)		- (w357 * SECx * SECxNON)		,						
			"Base.GP100_6",	w357	 * SECx	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xUSA)		- (w357 * SECx * SECxNON)		,						
			"Base.K6S",	w357	 * SECx	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xUSA)		- (w357 * SECx * SECxNON)	- (w357 * SECx * x90)	,						
			"Base.Rhino_200DS",	w357	 * SECx	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xEUR)		- (w357 * SECx * SECxNON)	- (w357 * SECx * x90)	,						
			"Base.Rhino_40DS",	w357	 * SECx	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xEUR)		- (w357 * SECx * SECxNON)	- (w357 * SECx * x90)	,						
			"Base.Rhino_60DS",	w357	 * SECx	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xEUR)		- (w357 * SECx * SECxNON)	- (w357 * SECx * x90)	,						
			"Base.SW_327",	w357	 * SECx	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xUSA)		- (w357 * SECx * SECxNON)	- (w357 * SECx * x90)	,						
			"Base.M1936",	w357	 * SECx	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xUSA)		- (w357 * SECx * SECxNON)		,						
			"Base.NEF_Handi_38",	w357	 * SECx	- (w357 * x357)	- (w357 * SECx * xBREAK)	- (w357 * SECx * xUSA)		- (w357 * SECx * SECxNON)		,						
			"Base.Marlin_1894",	w357	 * SECx	- (w357 * x357)	- (w357 * SECx * xLEVER)	- (w357 * SECx * xUSA)		- (w357 * SECx * SECxNON)		,						
			"Base.CZ97B",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xCZE)			- (w45 * SECx * x90)	,						
			"Base.EAA_Witness_45",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xEUR)				,						
			"Base.EAA_Witness_Long_45",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xEUR)				,						
			"Base.G21",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xEUR)				,						
			"Base.XD4",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)			- (w45 * SECx * x90)	,						
			"Base.MP45",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)			- (w45 * SECx * x90)	,						
			"Base.P220",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xEUR)				,						
			"Base.M4506",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)				,						
			"Base.HK_MK23",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xEUR)				,						
			"Base.HK_USP",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xEUR)				,						
			"Base.HK_USP_Match",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xEUR)				,						
			"Base.PULP_1911",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)				,						
			"Base.PARA1911",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)				,						
			"Base.AMT1911",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)				,						
			"Base.AMT1911_Long",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)				,						
			"Base.M1911_Carbine",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)		- (w45 * SECx * SECxNON)		,						
			"Base.Colt1911",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)				,						
			"Base.Colt_Kimber",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)			- (w45 * SECx * x90)	,						
			"Base.Colt_Commander",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)				,						
			"Base.UMP45_Stock",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xEUR)			- (w45 * SECx * x90)	,						
			"Base.MAC10_Fold",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xUSA)				,						
			"Base.KRISS_Stock",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xUSA)			- (w45 * SECx * x90)	,						
			"Base.Commando",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xBOLT)	- (w45 * SECx * xEUR)		- (w45 * SECx * SECxNON)		,						
			"Base.Thompson",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xUSA)		- (w45 * SECx * SECxNON)		,						
			"Base.Thompson_1928",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xUSA)		- (w45 * SECx * SECxNON)		,						
			"Base.M2Hyde",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xUSA)		- (w45 * SECx * SECxNON)		,						
			"Base.Model55_Fold",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xUSA)		- (w45 * SECx * SECxNON)		,						
			"Base.Model50",	w45	 * SECx	- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xUSA)		- (w45 * SECx * SECxNON)		,						
			"Base.Colt_Navy_1851",	w44	 * SECx	- (w44 * x44)	- (w44 * SECx * xREV)	- (w44 * SECx * xUSA)		- (w44 * SECx * SECxNON)		,						
			"Base.M29_44",	w44	 * SECx	- (w44 * x44)	- (w44 * SECx * xREV)	- (w44 * SECx * xUSA)		- (w44 * SECx * SECxNON)		,						
			"Base.M29_44Carbine",	w44	 * SECx	- (w44 * x44)	- (w44 * SECx * xREV)	- (w44 * SECx * xUSA)		- (w44 * SECx * SECxNON)		,						
			"Base.Automag",	w44	 * SECx	- (w44 * x44)	- (w44 * SECx * xSEMI)	- (w44 * SECx * xUSA)		- (w44 * SECx * SECxNON)		,						
			"Base.DEagle",	w44	 * SECx	- (w44 * x44)	- (w44 * SECx * xSEMI)	- (w44 * SECx * xISR)		- (w44 * SECx * SECxNON)		,						
			"Base.DEagle_Long",	w44	 * SECx	- (w44 * x44)	- (w44 * SECx * xSEMI)	- (w44 * SECx * xISR)		- (w44 * SECx * SECxNON)		,						
			"Base.DEagle_Hawk",	wBMG	 * SECx	- (wBMG * xBMG)	- (wBMG * SECx * xSEMI)	- (wBMG * SECx * xISR)		- (wBMG * SECx * SECxNON)		,						
			"Base.Winchester1866",	w45LC	 * SECx	- (w44 * x44)	- (w45LC * SECx * xLEVER)	- (w45LC * SECx * xUSA)		- (w45LC * SECx * SECxNON)		,						
			"Base.Win_1894",	w44	 * SECx	- (w44 * x44)	- (w44 * SECx * xLEVER)	- (w44 * SECx * xUSA)		- (w44 * SECx * SECxNON)		,						
			"Base.Colt_Service45",	w45LC	 * SECx	- (w45LC * x45LC)	- (w45LC * SECx * xREV)	- (w45LC * SECx * xUSA)		- (w45LC * SECx * SECxNON)		,						
			"Base.Judge_45LC",	w45LC	 * SECx	- (w45LC * x45LC)	- (w45LC * SECx * xREV)	- (w45LC * SECx * xREST)		- (w45LC * SECx * SECxNON)	- (w45LC * SECx * x90)	,						
			"Base.Judge513_45LC",	w45LC	 * SECx	- (w45LC * x45LC)	- (w45LC * SECx * xREV)	- (w45LC * SECx * xREST)		- (w45LC * SECx * SECxNON)	- (w45LC * SECx * x90)	,						
			"Base.Judge513_Long_45LC",	w45LC	 * SECx	- (w45LC * x45LC)	- (w45LC * SECx * xREV)	- (w45LC * SECx * xREST)		- (w45LC * SECx * SECxNON)	- (w45LC * SECx * x90)	,						
			"Base.TXS_804_45LC",	w45LC	 * SECx	- (w45LC * x45LC)	- (w45LC * SECx * xREV)	- (w45LC * SECx * xREST)		- (w45LC * SECx * SECxNON)		,						
			"Base.Winchester1873",	w45LC	 * SECx	- (w45LC * x45LC)	- (w45LC * SECx * xLEVER)	- (w45LC * SECx * xUSA)		- (w45LC * SECx * SECxNON)		,						
			"Base.Sako85",	w223	 * SECx	- (w223 * x223)	- (w223 * SECx * xBOLT)	- (w223 * SECx * xEUR)		- (w223 * SECx * SECxNON)		,						
			"Base.MINI14",	w223	 * SECx	- (w223 * x223)	- (w223 * SECx * xSEMI)	- (w223 * SECx * xUSA)		- (w223 * SECx * SECxNON)		,						
			"Base.MINI14_Stock",	w223	 * SECx	- (w223 * x223)	- (w223 * SECx * xSEMI)	- (w223 * SECx * xUSA)		- (w223 * SECx * SECxNON)		,						
			"Base.MINI14_T",	w223	 * SECx	- (w223 * x223)	- (w223 * SECx * xSEMI)	- (w223 * SECx * xUSA)		- (w223 * SECx * SECxNON)		,						
			"Base.Viper",	w223	 * SECx	- (w223 * x223)	- (w223 * SECx * xLEVER)	- (w223 * SECx * xREST)		- (w223 * SECx * SECxNON)	- (w223 * SECx * x90)	,						
			"Base.Carbon15_97",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)				,						
			"Base.CAR15SMG",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)				,						
			"Base.CAR15_Survival",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)				,						
			"Base.XM8Compact_Pistol",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.XM8",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.SCARSC_Stock",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.SCARL",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.SCAR_B",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.G33",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)				,						
			"Base.G36",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.G36C",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.G36KV",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.G11K3",	w57	 * SECx	- (w57 * x57)	- (w57 * SECx * xAUTO)	- (w57 * SECx * xEUR)			- (w57 * SECx * x90)	,						
			"Base.MK18",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)			- (w556 * SECx * x90)	,						
			"Base.AK5C",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)				,						
			"Base.M16A1",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)				,						
			"Base.M16A2",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)				,						
			"Base.M16A3",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)				,						
			"Base.M723",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)				,						
			"Base.XM117",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)			- (w556 * SECx * x90)	,						
			"Base.H416",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.M4",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)				,						
			"Base.M4A1",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)				,						
			"Base.ADAR",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xSOV)			- (w556 * SECx * x90)	,						
			"Base.K2C1_PH",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)			- (w556 * SECx * x90)	,						
			"Base.K2_ADVK2",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)			- (w556 * SECx * x90)	,						
			"Base.K2_Grunt",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)			- (w556 * SECx * x90)	,						
			"Base.K1A_DEV",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)			- (w556 * SECx * x90)	,						
			"Base.K1DEV",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)			- (w556 * SECx * x90)	,						
			"Base.K2_C1",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)			- (w556 * SECx * x90)	,						
			"Base.K2_1",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)				,						
			"Base.K2_203",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)	- (w556 * SECx * CIVxMIL)			,						
			"Base.K1_1",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)				,						
			"Base.DR_200",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)			- (w556 * SECx * x90)	,						
			"Base.LVOA_C",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xSEMI)	- (w556 * SECx * xUSA)			- (w556 * SECx * x90)	,						
			"Base.AAC_Honey",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)			- (w556 * SECx * x90)	,						
			"Base.AAC_HoneySD",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)			- (w556 * SECx * x90)	,						
			"Base.Bush_AR15_MOE",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xSEMI)	- (w556 * SECx * xUSA)				,						
			"Base.Bush_XM15",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xSEMI)	- (w556 * SECx * xUSA)				,						
			"Base.Bush_XM15_Custom",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xSEMI)	- (w556 * SECx * xUSA)				,						
			"Base.MCX_Virtus",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.MCX_VirtusPatrol",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.MCX_Socom",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.MCX_Spear",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xSEMI)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.ColtM16",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)				,						
			"Base.M16Wood",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)				,						
			"Base.M16Tape",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)				,						
			"Base.FAMAS",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)				,						
			"Base.FAMAS_G2",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)				,						
			"Base.FAMAS_Felin",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)				,						
			"Base.AUG",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)				,						
			"Base.AUG_A3",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.M85_Stock",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xSOV)				,						
			"Base.AN94",	w545x39	 * SECx	- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xSOV)				,						
			"Base.AK74",	w545x39	 * SECx	- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xSOV)				,						
			"Base.AKS74",	w545x39	 * SECx	- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xSOV)				,						
			"Base.AKS74U",	w545x39	 * SECx	- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xSOV)				,						
			"Base.AK74_Alpha",	w545x39	 * SECx	- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xSOV)			- (w545x39 * SECx * x90)	,						
			"Base.AK12",	w545x39	 * SECx	- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xSOV)			- (w545x39 * SECx * x90)	,						
			"Base.AK12_New",	w545x39	 * SECx	- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xSOV)			- (w545x39 * SECx * x90)	,						
			"Base.RPK74",	w545x39	 * SECx	- (w545x39 * x545x39)	- (w545x39 * SECx * xLMG)	- (w545x39 * SECx * xSOV)				,						
			"Base.RPK16",	w545x39	 * SECx	- (w545x39 * x545x39)	- (w545x39 * SECx * xLMG)	- (w545x39 * SECx * xSOV)			- (w545x39 * SECx * x90)	,						
			"Base.L85",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)				,						
			"Base.L85A2",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.L86",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)				,						
			"Base.L22",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.F2000",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)			- (w556 * SECx * x90)	,						
			"Base.Tavor",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xISR)			- (w556 * SECx * x90)	,						
			"Base.AR18",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)				,						
			"Base.Type20",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xPAC)			- (w556 * SECx * x90)	,						
			"Base.Type89",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xPAC)				,						
			"Base.QBZ_95",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xPAC)			- (w556 * SECx * x90)	,						
			"Base.Shrike",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xLMG)	- (w556 * SECx * xUSA)	- (w556 * SECx * CIVxMIL)		- (w556 * SECx * x90)	,						
			"Base.XM8LMG",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xLMG)	- (w556 * SECx * xEUR)	- (w556 * SECx * CIVxMIL)		- (w556 * SECx * x90)	,						
			"Base.M249",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xLMG)	- (w556 * SECx * xUSA)	- (w556 * SECx * CIVxMIL)			,						
			"Base.M249E3",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xLMG)	- (w556 * SECx * xUSA)	- (w556 * SECx * CIVxMIL)		- (w556 * SECx * x90)	,						
			"Base.K3LMG",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xLMG)	- (w556 * SECx * xKOR)	- (w556 * SECx * CIVxMIL)			,						
			"Base.AK47",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)				,						
			"Base.AKM",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)				,						
			"Base.AK103",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)			- (w762x39 * SECx * x90)	,						
			"Base.MD65_Stock",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)				,						
			"Base.AKMS_Stock",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)				,						
			"Base.Vz58",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xCZE)				,						
			"Base.Vz58_Stock",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xCZE)				,						
			"Base.Vz58_Mini_Stock",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xCZE)				,						
			"Base.SKS",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xSEMI)	- (w762x39 * SECx * xSOV)		- (w762x39 * SECx * SECxNON)		,						
			"Base.SKS_PARA",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xSEMI)	- (w762x39 * SECx * xPAC)		- (w762x39 * SECx * SECxNON)		,						
			"Base.MK47",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xSEMI)	- (w762x39 * SECx * xUSA)			- (w762x39 * SECx * x90)	,						
			"Base.AKM_Custom",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xUSA)			- (w762x39 * SECx * x90)	,						
			"Base.AK74_Custom",	w545x39	 * SECx	- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xUSA)			- (w545x39 * SECx * x90)	,						
			"Base.Ots14_1A_01",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)				,						
			"Base.Ots14_1A_02",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)				,						
			"Base.Ots14_4A",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)				,						
			"Base.Ots14_4A_01",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)				,						
			"Base.Ots14_4A_03",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)				,						
			"Base.Ots14_4A_GL",	wGREN	 * SECx	- (wGREN * xGREN)	- (wGREN * SECx * xAUTO)	- (wGREN * SECx * xSOV)				,						
			"Base.AK308",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xSOV)			- (w308 * SECx * x90)	,						
			"Base.SCARH",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)			- (w308 * SECx * x90)	,						
			"Base.SCAR20",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)			- (w308 * SECx * x90)	,						
			"Base.G28",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)			- (w308 * SECx * x90)	,						
			"Base.G3",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)				,						
			"Base.PSG1",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xSEMI)	- (w308 * SECx * xEUR)				,						
			"Base.MSG90",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xSEMI)	- (w308 * SECx * xEUR)				,						
			"Base.Type64",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xPAC)		- (w308 * SECx * SECxNON)		,						
			"Base.FAL",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)				,						
			"Base.FAL_PARA_Stock",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)				,						
			"Base.FN_FNC",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)				,						
			"Base.WA2000",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xEUR)		- (w308 * SECx * SECxNON)		,						
			"Base.SVD",	w762x54r	 * SECx	- (w762x54r * x762x54r)	- (w762x54r * SECx * xSEMI)	- (w762x54r * SECx * xSOV)		- (w762x54r * SECx * SECxNON)		,						
			"Base.SVDK",	w762x54r	 * SECx	- (w762x54r * x762x54r)	- (w762x54r * SECx * xSEMI)	- (w762x54r * SECx * xSOV)		- (w762x54r * SECx * SECxNON)		,						
			"Base.SV_98",	w762x54r	 * SECx	- (w762x54r * x762x54r)	- (w762x54r * SECx * xBOLT)	- (w762x54r * SECx * xSOV)		- (w762x54r * SECx * SECxNON)		,						
			"Base.OTS_03_SVU",	w762x54r	 * SECx	- (w762x54r * x762x54r)	- (w762x54r * SECx * xBOLT)	- (w762x54r * SECx * xSOV)			- (w762x54r * SECx * x90)	,						
			"Base.M14EBR",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xUSA)			- (w308 * SECx * x90)	,						
			"Base.M14",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xUSA)		- (w308 * SECx * SECxNON)		,						
			"Base.K14",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xKOR)			- (w308 * SECx * x90)	,						
			"Base.Savage12",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xUSA)		- (w308 * SECx * SECxNON)		,						
			"Base.Ruger_No1_3006",	w3006	 * SECx	- (w3006 * x3006)	- (w3006 * SECx * xBREAK)	- (w3006 * SECx * xUSA)		- (w3006 * SECx * SECxNON)		,						
			"Base.M40",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xUSA)				,						
			"Base.M40A1",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xUSA)				,						
			"Base.M40A2",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xUSA)				,						
			"Base.M40A3",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xUSA)				,						
			"Base.M46_Mauser",	w762x54r	 * SECx	- (w762x54r * x762x54r)	- (w762x54r * SECx * xBOLT)	- (w762x54r * SECx * xPAC)		- (w762x54r * SECx * SECxNON)		,						
			"Base.Mosin",	w762x54r	 * SECx	- (w762x54r * x762x54r)	- (w762x54r * SECx * xBOLT)	- (w762x54r * SECx * xSOV)		- (w762x54r * SECx * SECxNON)		,						
			"Base.MosinObrez_Pistol",	w762x54r	 * SECx	- (w762x54r * x762x54r)	- (w762x54r * SECx * xBOLT)	- (w762x54r * SECx * xSOV)		- (w762x54r * SECx * SECxNON)		,						
			"Base.M1",	w3006	 * SECx	- (w3006 * x3006)	- (w3006 * SECx * xSEMI)	- (w3006 * SECx * xUSA)		- (w3006 * SECx * SECxNON)		,						
			"Base.M1903",	w3006	 * SECx	- (w3006 * x3006)	- (w3006 * SECx * xBOLT)	- (w3006 * SECx * xUSA)		- (w3006 * SECx * SECxNON)		,						
			"Base.BAR",	w3006	 * SECx	- (w3006 * x3006)	- (w3006 * SECx * xAUTO)	- (w3006 * SECx * xUSA)		- (w3006 * SECx * SECxNON)		,						
			"Base.BAR_Monitor",	w3006	 * SECx	- (w3006 * x3006)	- (w3006 * SECx * xAUTO)	- (w3006 * SECx * xUSA)		- (w3006 * SECx * SECxNON)		,						
			"Base.MAS36",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)		- (w308 * SECx * SECxNON)		,						
			"Base.MAS44",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)		- (w308 * SECx * SECxNON)		,						
			"Base.MAS49",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)		- (w308 * SECx * SECxNON)		,						
			"Base.Win_1895",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xLEVER)	- (w308 * SECx * xUSA)		- (w308 * SECx * SECxNON)		,						
			"Base.Galil",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xISR)				,						
			"Base.Galil_Sniper",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xISR)				,						
			"Base.Thompson_Center_3006",	w3006	 * SECx	- (w3006 * x3006)	- (w3006 * SECx * xBREAK)	- (w3006 * SECx * xUSA)		- (w3006 * SECx * SECxNON)		,						
			"Base.Type38",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xPAC)		- (w308 * SECx * SECxNON)		,						
			"Base.Type99",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xPAC)		- (w308 * SECx * SECxNON)		,						
			"Base.L96",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xEUR)				,						
			"Base.M240",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xLMG)	- (w308 * SECx * xUSA)	- (w308 * SECx * CIVxMIL)			,						
			"Base.G21LMG",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xLMG)	- (w308 * SECx * xEUR)	- (w308 * SECx * CIVxMIL)		- (w308 * SECx * x90)	,						
			"Base.K12",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xLMG)	- (w308 * SECx * xKOR)	- (w308 * SECx * CIVxMIL)		- (w308 * SECx * x90)	,						
			"Base.PKM",	w762x54r	 * SECx	- (w762x54r * x762x54r)	- (w762x54r * SECx * xLMG)	- (w762x54r * SECx * xSOV)	- (w762x54r * SECx * CIVxMIL)			,						
			"Base.MG42",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xLMG)	- (w308 * SECx * xEUR)	- (w308 * SECx * CIVxMIL)			,						
			"Base.M60",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xLMG)	- (w308 * SECx * xUSA)	- (w308 * SECx * CIVxMIL)			,						
			"Base.MK43",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xLMG)	- (w308 * SECx * xUSA)	- (w308 * SECx * CIVxMIL)		- (w308 * SECx * x90)	,						
			"Base.RPD",	w762x39	 * SECx	- (w762x39 * x762x39)	- (w762x39 * SECx * xLMG)	- (w762x39 * SECx * xSOV)	- (w762x39 * SECx * CIVxMIL)			,						
			"Base.DSHK_Fold",	wBMG	 * SECx	- (wBMG * xBMG)	- (wBMG * SECx * xMINI)	- (wBMG * SECx * xSOV)	- (wBMG * SECx * CIVxMIL)	- (wBMG * SECx * SECxNON)		,						
			"Base.BOAR",	wBMG	 * SECx	- (wBMG * xBMG)	- (wBMG * SECx * xBREAK)	- (wBMG * SECx * xUSA)	- (wBMG * SECx * CIVxMIL)			,						
			"Base.EDM96",	wBMG	 * SECx	- (wBMG * xBMG)	- (wBMG * SECx * xBOLT)	- (wBMG * SECx * xUSA)	- (wBMG * SECx * CIVxMIL)		- (wBMG * SECx * x90)	,						
			"Base.M82",	wBMG	 * SECx	- (wBMG * xBMG)	- (wBMG * SECx * xSEMI)	- (wBMG * SECx * xUSA)	- (wBMG * SECx * CIVxMIL)			,						
			"Base.BFG50",	wBMG	 * SECx	- (wBMG * xBMG)	- (wBMG * SECx * xBREAK)	- (wBMG * SECx * xUSA)	- (wBMG * SECx * CIVxMIL)		- (wBMG * SECx * x90)	,						
			"Base.Harris50",	wBMG	 * SECx	- (wBMG * xBMG)	- (wBMG * SECx * xBOLT)	- (wBMG * SECx * xUSA)	- (wBMG * SECx * CIVxMIL)			,						
			"Base.TAC50",	wBMG	 * SECx	- (wBMG * xBMG)	- (wBMG * SECx * xBOLT)	- (wBMG * SECx * xUSA)	- (wBMG * SECx * CIVxMIL)			,						
			"Base.CheyTac50",	wBMG	 * SECx	- (wBMG * xBMG)	- (wBMG * SECx * xBOLT)	- (wBMG * SECx * xUSA)	- (wBMG * SECx * CIVxMIL)		- (wBMG * SECx * x90)	,						
			"Base.Gepard_M6",	wBMG	 * SECx	- (wBMG * xBMG)	- (wBMG * SECx * xBOLT)	- (wBMG * SECx * xEUR)	- (wBMG * SECx * CIVxMIL)			,						
			"Base.OSV_96",	wBMG	 * SECx	- (wBMG * xBMG)	- (wBMG * SECx * xBOLT)	- (wBMG * SECx * xSOV)	- (wBMG * SECx * CIVxMIL)		- (wBMG * SECx * x90)	,						
			"Base.Ash",	wBMG	 * SECx	- (wBMG * xBMG)	- (wBMG * SECx * xAUTO)	- (wBMG * SECx * xSOV)	- (wBMG * SECx * CIVxMIL)		- (wBMG * SECx * x90)	,						
			"Base.VSSK",	wBMG	 * SECx	- (wBMG * xBMG)	- (wBMG * SECx * xBOLT)	- (wBMG * SECx * xSOV)	- (wBMG * SECx * CIVxMIL)		- (wBMG * SECx * x90)	,						
			"Base.SW_M500",	wBMG	 * SECx	- (wBMG * xBMG)	- (wBMG * SECx * xREV)	- (wBMG * SECx * xUSA)	- (wBMG * SECx * CIVxMIL)		- (wBMG * SECx * x90)	,						
			"Base.SPAS12_Fixed",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xEUR)				,						
			"Base.SPAS12_Fold",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xEUR)				,						
			"Base.Origin",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xUSA)			- (w12g * SECx * x90)	,						
			"Base.SPAS_15",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xEUR)				,						
			"Base.USAS_12",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xAUTO)	- (w12g * SECx * xKOR)				,						
			"Base.Shorty_Pistol",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)		- (w12g * SECx * SECxNON)	- (w12g * SECx * x90)	,						
			"Base.R11_87",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xUSA)		- (w12g * SECx * SECxNON)		,						
			"Base.M870",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)				,						
			"Base.M1897",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)		- (w12g * SECx * SECxNON)		,						
			"Base.DT11",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xBREAK)	- (w12g * SECx * xEUR)		- (w12g * SECx * SECxNON)		,						
			"Base.Coachgun",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xBREAK)	- (w12g * SECx * xUSA)		- (w12g * SECx * SECxNON)		,						
			"Base.Terminator",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xBREAK)	- (w12g * SECx * xUSA)		- (w12g * SECx * SECxNON)		,						
			"Base.SIX12",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xREV)	- (w12g * SECx * xUSA)			- (w12g * SECx * x90)	,						
			"Base.SIX12SD",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xREV)	- (w12g * SECx * xUSA)	- (w12g * SECx * CIVxMIL)		- (w12g * SECx * x90)	,						
			"Base.M870_Wingmaster",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)		- (w12g * SECx * SECxNON)		,						
			"Base.M870_Police",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)				,						
			"Base.M870_MCS",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)				,						
			"Base.M870_CQB",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)				,						
			"Base.M870_Breaching_Pistol",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)				,						
			"Base.M870_Express",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)				,						
			"Base.Ithaca_M37",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)				,						
			"Base.AUTO_5",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xUSA)		- (w12g * SECx * SECxNON)		,						
			"Base.A400",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xEUR)			- (w12g * SECx * x90)	,						
			"Base.M1014",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xEUR)			- (w12g * SECx * x90)	,						
			"Base.M1014_Fold",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xEUR)			- (w12g * SECx * x90)	,						
			"Base.M1014_Wick",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xEUR)			- (w12g * SECx * x90)	,						
			"Base.DAO12",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xREV)	- (w12g * SECx * xREST)				,						
			"Base.M1887",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xLEVER)	- (w12g * SECx * xUSA)				,						
			"Base.M1208",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xREV)	- (w12g * SECx * xUSA)		- (w12g * SECx * SECxNON)	- (w12g * SECx * x90)	,						
			"Base.M1212",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xREV)	- (w12g * SECx * xUSA)			- (w12g * SECx * x90)	,						
			"Base.M1216",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xREV)	- (w12g * SECx * xUSA)			- (w12g * SECx * x90)	,						
			"Base.AA12",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xAUTO)	- (w12g * SECx * xUSA)			- (w12g * SECx * x90)	,						
			"Base.CAWS",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xAUTO)	- (w12g * SECx * xEUR)				,						
			"Base.ROYAL_SXS",	w10g	 * SECx	- (w10g * x10g)	- (w10g * SECx * xBREAK)	- (w10g * SECx * xEUR)		- (w10g * SECx * SECxNON)		,						
			"Base.KS23",	w4g	 * SECx	- (w4g * x4g)	- (w4g * SECx * xPUMP)	- (w4g * SECx * xSOV)		- (w4g * SECx * SECxNON)		,						
			"Base.KS23_S_Pistol",	w4g	 * SECx	- (w4g * x4g)	- (w4g * SECx * xPUMP)	- (w4g * SECx * xSOV)		- (w4g * SECx * SECxNON)		,						
			"Base.Triple_Crown",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xBREAK)	- (w12g * SECx * xEUR)		- (w12g * SECx * SECxNON)		,						
			"Base.Moss500_20",	w20g	 * SECx	- (w20g * x20g)	- (w20g * SECx * xPUMP)	- (w20g * SECx * xUSA)		- (w20g * SECx * SECxNON)		,						
			"Base.10855_Silver",	w20g	 * SECx	- (w20g * x20g)	- (w20g * SECx * xSEMI)	- (w20g * SECx * xEUR)		- (w20g * SECx * SECxNON)		,						
			"Base.Colt1855",	w20g	 * SECx	- (w20g * x20g)	- (w20g * SECx * xREV)	- (w20g * SECx * xUSA)		- (w20g * SECx * SECxNON)		,						
			"Base.TOZ106",	w20g	 * SECx	- (w20g * x20g)	- (w20g * SECx * xBOLT)	- (w20g * SECx * xSOV)		- (w20g * SECx * SECxNON)		,						
			"Base.TOZ194_Pistol",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xSOV)				,						
			"Base.Saiga12",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xAUTO)	- (w12g * SECx * xSOV)			- (w12g * SECx * x90)	,						
			"Base.Saiga12_Long",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xAUTO)	- (w12g * SECx * xSOV)		- (w12g * SECx * SECxNON)	- (w12g * SECx * x90)	,						
			"Base.Saiga12_Tromix",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xAUTO)	- (w12g * SECx * xSOV)			- (w12g * SECx * x90)	,						
			"Base.MP133",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xSOV)			- (w12g * SECx * x90)	,						
			"Base.MP133S_Pistol",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xSOV)			- (w12g * SECx * x90)	,						
			"Base.KSG",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)			- (w12g * SECx * x90)	,						
			"Base.KSG25",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)			- (w12g * SECx * x90)	,						
			"Base.UTS15",	w12g	 * SECx	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xREST)			- (w12g * SECx * x90)	,						
			"Base.EX41_HE",	wGREN	 * SECx		- (wGREN * SECx * xGREN)	- (wGREN * SECx * xUSA)	- (wGREN * SECx * CIVxMIL)			,						
			"Base.Federal_HE",	wGREN	 * SECx		- (wGREN * SECx * xGREN)	- (wGREN * SECx * xUSA)	- (wGREN * SECx * CIVxMIL)			,						
			"Base.M32_HE",	wGREN	 * SECx		- (wGREN * SECx * xGREN)	- (wGREN * SECx * xUSA)	- (wGREN * SECx * CIVxMIL)			,						
			"Base.GM94_HE",	wGREN	 * SECx		- (wGREN * SECx * xGREN)	- (wGREN * SECx * xSOV)	- (wGREN * SECx * CIVxMIL)		- (wGREN * SECx * x90)	,						
			"Base.K11",	wGREN	 * SECx	- (wGREN * SECx * xAUTO)	- (wGREN * SECx * xGREN)	- (wGREN * SECx * xKOR)	- (wGREN * SECx * CIVxMIL)		- (wGREN * SECx * x90)	,						
			"Base.M72_LAW",	wGREN	 * SECx		- (wGREN * SECx * xGREN)	- (wGREN * SECx * xUSA)	- (wGREN * SECx * CIVxMIL)			,						
			"Base.RPG_7",	wGREN	 * SECx		- (wGREN * SECx * xGREN)	- (wGREN * SECx * xSOV)	- (wGREN * SECx * CIVxMIL)			,						
			"Base.XM214",	w556	 * SECx	- (w556 * x556)	- (w556 * SECx * xMINI)	- (w556 * SECx * xUSA)	- (w556 * SECx * CIVxMIL)			,						
			"Base.GAU17",	w308	 * SECx	- (w308 * x308)	- (w308 * SECx * xMINI)	- (w308 * SECx * xUSA)	- (w308 * SECx * CIVxMIL)			,						
			"Base.GAU19",	wBMG	 * SECx	- (wBMG * xBMG)	- (wBMG * SECx * xMINI)	- (wBMG * SECx * xUSA)	- (wBMG * SECx * CIVxMIL)			,						
			"Base.TAC15",	wBOW	 * SECx		- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)		- (wBOW * SECx * SECxNON)		,						
			"Base.HortonScout_125",	wBOW	 * SECx		- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)		- (wBOW * SECx * SECxNON)		,						
			"Base.MissionMXB_400",	wBOW	 * SECx		- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)		- (wBOW * SECx * SECxNON)		,						
			"Base.TenPointTurbo_XLT",	wBOW	 * SECx		- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)		- (wBOW * SECx * SECxNON)		,						
			"Base.HZRedback_RTS",	wBOW	 * SECx		- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)		- (wBOW * SECx * SECxNON)		,						
			"Base.Genesis_X_Bow",	wBOW	 * SECx		- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)		- (wBOW * SECx * SECxNON)		,						
			"Base.Genesis_Bow",	wBOW	 * SECx		- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)		- (wBOW * SECx * SECxNON)		,						
			"Base.Genesis_Mini_Bow",	wBOW	 * SECx		- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)		- (wBOW * SECx * SECxNON)		,						
			"Base.BowTechSR_350",	wBOW	 * SECx		- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)		- (wBOW * SECx * SECxNON)		,						
			"Base.HoytSpectra_1000",	wBOW	 * SECx		- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)		- (wBOW * SECx * SECxNON)		,						
			"Base.SlingShot_Rock",	wBOW	 * SECx		- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)		- (wBOW * SECx * SECxNON)		,						
			"Base.WristRocket_Rock",	wBOW	 * SECx		- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)		- (wBOW * SECx * SECxNON)		,						
			"Base.M2A1",	wFLAME	 * SECx		- (wFLAME * SECx * xFLAME)	- (wFLAME * SECx * xUSA)	- (wFLAME * SECx * CIVxMIL)	- (wFLAME * SECx * SECxNON)		,						
			"Base.Musk",	wFLAME	 * SECx		- (wFLAME * SECx * xFLAME)	- (wFLAME * SECx * xUSA)		- (wFLAME * SECx * SECxNON)	- (wFLAME * SECx * x90)	,						
			"Base.Launcher",	Part		- (wGREN * xGREN)		- (Part * xUSA)	- (Part * CIVxMIL)			,						
			"Base.Launcher2",	Part		- (wGREN * xGREN)		- (Part * xSOV)	- (Part * CIVxMIL)			,						
			"Base.Bipod",	Part		- (Part * xPart)				- (Part * SECxNON)		,						
			"Base.Ammobelt",	Part		- (Part * xPart)						,						
			"Base.Sling_1",	Part		- (Part * xPart)						,						
			"Base.Sling_2",	Part		- (Part * xPart)						,						
			"Base.Sling_3",	Part		- (Part * xPart)						,						
			"Base.ForeGrip",	Part		- (Part * xPart)						,						
			"Base.Grip_Magpul",	Part		- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_MLOK",	Part		- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_TG",	Part		- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_BCM",	Part		- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_Fold",	Part		- (Part * xPart)						,						
			"Base.Light_Small",	Light		- (Light * xLight)						,						
			"Base.Light_Large",	Light		- (Light * xLight)						,						
			"Base.Light_Medium_M952V",	Light		- (Light * xLight)						,						
			"Base.Laser_Green",	Light		- (Light * xLight)						,						
			"Base.Laser_Red",	Light		- (Light * xLight)						,						
			"Base.Laser_DVAL",	Light		- (Light * xLight)						,						
			"Base.Laser_PEQ15",	Light		- (Light * xLight)			- (Light * CIVxMIL)			,						
			"Base.Light_Small_Socom",	Light		- (Light * xLight)			- (Light * CIVxMIL)			,						
			"Base.Light_Small_TLR_7AH",	Light		- (Light * xLight)						,						
			"Base.Light_Medium_M900",	Light		- (Light * xLight)						,						
			"Base.Suppressor_Pistol",	Suppress		- (Suppress * xSuppress)						,						
			"Base.Suppressor_Rifle",	Suppress		- (Suppress * xSuppress)						,						
			"Base.Suppressor_Shotgun",	Suppress		- (Suppress * xSuppress)						,						
			"Base.Suppressor_BMG",	Suppress		- (Suppress * xSuppress)	- (wBMG * xBMG)		- (Suppress * CIVxMIL)			,						
			"Base.Suppressor_Socom_Pistol",	Suppress		- (Suppress * xSuppress)						,						
			"Base.Suppressor_NorthStar_Pistol",	Suppress		- (Suppress * xSuppress)				- (Suppress * SECxNON)		,						
			"Base.Suppressor_PBS1_Rifle",	Suppress		- (Suppress * xSuppress)						,						
			"Base.Suppressor_PBS4_Rifle",	Suppress		- (Suppress * xSuppress)						,						
			"Base.Suppressor_ROME_BMG",	Suppress		- (Suppress * xSuppress)	- (wBMG * xBMG)		- (Suppress * CIVxMIL)			,						
			"Base.Bayonet_M4",	Part		- (Part * xPart)				- (Part * SECxNON)		,						
			"Base.Bayonet_AK",	Part		- (Part * xPart)		- (Part * xSOV)		- (Part * SECxNON)		,						
			"Base.Bayonet_M1917",	Part		- (Part * xPart)				- (Part * SECxNON)		,						
			"Base.Bayonet_Type30",	Part		- (Part * xPart)				- (Part * SECxNON)		,						
			"Base.Choke_Full",	Part		- (Part * xPart)				- (Part * SECxNON)		,						
			"Base.Choke_Full_Dbl",	Part		- (Part * xPart)				- (Part * SECxNON)		,						
			"Base.Compensator",	Part		- (Part * xPart)						,						
			"Base.LinearComp_Noveske",	Part		- (Part * xPart)						,						
			"Base.MuzzleBrake",	Part		- (Part * xPart)						,						
			"Base.MuzzleBrake_DK1",	Part		- (Part * xPart)						,						
			"Base.MuzzleBrake_DK2",	Part		- (Part * xPart)						,						
			"Base.Pad",	Part		- (Part * xPart)				- (Part * SECxNON)		,						
			"Base.Carrier_12g",	Part		- (Part * xPart)						,						
			"Base.GhostRing",	Optic		- (Optic * xOptic)						,						
			"Base.Sight_MicroDot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_RaceDot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Phantom_XL",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_OKP7_Reflex",	Optic		- (Optic * xOptic)		- (Optic * xSOV)			- (Optic * x90)	,						
			"Base.Sight_SRS",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_EOTech",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_3xEOTech",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_4xACOG",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_4xACOG_ECO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_6xELCAN",	Optic		- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_6xHensoldt",	Optic		- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_KOBRA",	Optic		- (Optic * xOptic)		- (Optic * xSOV)				,						
			"Base.Scope_4xPSO",	Optic		- (Optic * xOptic)		- (Optic * xSOV)				,						
			"Base.Scope_12xPSO",	Optic		- (Optic * xOptic)		- (Optic * xSOV)				,						
			"Base.Scope_1-4x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_Trijicon_1-6x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_TANGO6T_1-6x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_20x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * SECxNON)		,						
			"Base.Sight_Thermal",	Optic		- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * CIVxMIL)			,						
			"Base.Sight_Thermal_AK",	Optic		- (Optic * xOptic)		- (Optic * xSOV)	- (Optic * CIVxMIL)			,						
			"Base.Sight_Aimpoint",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Aimpoint_Dot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Fiber_Shotgun",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Mepro_M21",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_Mepro_MOR",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_UH1",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_C79",	Optic		- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_SUSAT",	Optic		- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_Raven",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_G28_Scope",	Optic		- (Optic * xOptic)		- (Optic * xEUR)	- (Optic * CIVxMIL)	- (Optic * SECxNON)		,						
			"Base.Scope_ATACR7_F1",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_ATACR7_F1r",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_ACRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_MRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_SRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_Nikon",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_M8",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_VX3",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_1P87",	Optic		- (Optic * xOptic)		- (Optic * xSOV)				,						
			"Base.Sight_1P63",	Optic		- (Optic * xOptic)		- (Optic * xSOV)				,						
			"Base.Sight_Brownells",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_L2",	Optic		- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_Malcom",	Optic		- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * SECxNON)		,						
			"Base.Sight_LUX",	Optic		- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * SECxNON)		,						
			"Base.Sight_NO32",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_PKAS",	Optic		- (Optic * xOptic)		- (Optic * xSOV)				,						
			"Base.Sight_PU",	Optic		- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * SECxNON)		,						
			"Base.Sight_XPS",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_PVS4",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Burris_NV",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Armasight_NV",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Barrel_308",	w308		- (w308 * xPart)	- (w308 * xBREAK)	- (w308 * xUSA)		- (w308 * SECxNON)		,						
			"Base.Barrel_3006",	w3006		- (w3006 * xPart)	- (w3006 * xBREAK)	- (w3006 * xUSA)		- (w3006 * SECxNON)		,						
			"Base.Barrel_4570",	w4570		- (w4570 * xPart)	- (w4570 * xBREAK)	- (w4570 * xUSA)		- (w4570 * SECxNON)		,						
			"Base.Barrel_357",	w357		- (w357 * xPart)	- (w357 * xBREAK)	- (w357 * xUSA)		- (w357 * SECxNON)		,						
			"Base.Barrel_357_Short",	w357		- (w357 * xPart)	- (w357 * xBREAK)	- (w357 * xUSA)		- (w357 * SECxNON)		,						
			"Base.Barrel_45LC",	w45LC		- (w45LC * xPart)	- (w45LC * xBREAK)	- (w45LC * xUSA)		- (w45LC * SECxNON)		,						
			"Base.Barrel_45LC_Short",	w45LC		- (w45LC * xPart)	- (w45LC * xBREAK)	- (w45LC * xUSA)		- (w45LC * SECxNON)		,						
			"Base.TriggerGroup_AR",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)				,						
			"Base.TriggerGroup_AK",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xSOV)				,						
			"Base.TriggerGroup_HK",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xEUR)				,						
			"Base.TriggerGroup_FN",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xEUR)				,						
			"Base.Switch_Striker_Black",	Part 		- (Part * xPart)	- (Part  * xAUTO)	- (Part  * xUSA)			- (Part  * x90)	,						
			"Base.Switch_Striker_Red",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)			- (Part * x90)	,						
			"Base.Switch_Striker_Blue",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)			- (Part * x90)	,						
			"Base.Switch_Striker_Green",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)			- (Part * x90)	,						
			"Base.Grip_G10_Blue",	Part		- (Part * xPart)		- (Part * xUSA)		- (Part * SECxNON)		,						
			"Base.Grip_G10_Brown",	Part		- (Part * xPart)		- (Part * xUSA)		- (Part * SECxNON)		,						
			"Base.Grip_G10_Black",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_G10_Red",	Part		- (Part * xPart)		- (Part * xUSA)		- (Part * SECxNON)		,						
			"Base.Grip_G10_Green",	Part		- (Part * xPart)		- (Part * xUSA)		- (Part * SECxNON)		,						
			"Base.Grip_G10_Pink",	Part		- (Part * xPart)		- (Part * xUSA)		- (Part * SECxNON)		,						
			"Base.Grip_Alloy_Black",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_Alloy_Silver",	Part		- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_Alloy_Blue",	Part		- (Part * xPart)		- (Part * xUSA)		- (Part * SECxNON)		,						
			"Base.Grip_Alloy_Red",	Part		- (Part * xPart)		- (Part * xUSA)		- (Part * SECxNON)		,						
			"Base.Grip_Wood",	Part		- (Part * xPart)		- (Part * xUSA)		- (Part * SECxNON)		,						
			"Base.Grip_Punisher",	Part		- (Part * xPart)		- (Part * xUSA)		- (Part * SECxNON)		,						
			"Base.Grip_Spartan",	Part		- (Part * xPart)		- (Part * xUSA)		- (Part * SECxNON)		,						
			"Base.Grip_Ivory",	Part		- (Part * xPart)		- (Part * xUSA)		- (Part * SECxNON)		,						
			"Base.Grip_Carbon",	Part		- (Part * xPart)		- (Part * xUSA)		- (Part * SECxNON)		,						
			"Base.38Speed",	StdMag	* w357 - (StdMag * xStdMag)	- (w357 * x357)	- (StdMag * xREV)			- (StdMag * SECxNON)		,						
			"Base.44Speed",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)	- (StdMag * xREV)			- (StdMag * SECxNON)		,						
			"Base.SRM1208_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)		- (StdMag * SECxNON)	- (StdMag * x90)	,						
			"Base.SRM1212_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * x90)	,						
			"Base.SRM1216_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * x90)	,						
			"Base.SIX12_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * x90)	,						
			"Base.CP33Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)		- (StdMag * xUSA)		- (StdMag * SECxNON)	- (StdMag * x90)	,						
			"Base.CP33_17MagBase",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)		- (ExtMag * xUSA)		- (ExtMag * SECxNON)	- (ExtMag * x90)	,						
			"Base.22Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)				- (StdMag * SECxNON)		,						
			"Base.22ExtClip",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)				- (ExtMag * SECxNON)		,						
			"Base.380Clip",	StdMag	* w380 - (StdMag * xStdMag)	- (w380 * x380)				- (StdMag * SECxNON)		,						
			"Base.380StdClip",	StdMag	* w380 - (StdMag * xStdMag)	- (w380 * x380)				- (StdMag * SECxNON)		,						
			"Base.380ExtClip",	ExtMag	* w380 - (ExtMag * xExtMag)	- (w380 * x380)				- (ExtMag * SECxNON)		,						
			"Base.9mmSSClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)						,						
			"Base.9mmSSExtClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)						,						
			"Base.9mmClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)						,						
			"Base.9mmExtClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)						,						
			"Base.45DSClip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)						,						
			"Base.45DSExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)						,						
			"Base.45Clip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)						,						
			"Base.45ExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)						,						
			"Base.44Clip",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)				- (StdMag * SECxNON)		,						
			"Base.50Clip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)				- (StdMag * SECxNON)		,						
			"Base.223StdClip",	StdMag	* w223 - (StdMag * xStdMag)	- (w223 * x223)				- (StdMag * SECxNON)		,						
			"Base.223ExtClip",	ExtMag	* w223 - (ExtMag * xExtMag)	- (w223 * x223)				- (ExtMag * SECxNON)		,						
			"Base.556Clip",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)						,						
			"Base.308StdClip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)						,						
			"Base.308ExtClip",	ExtMag	* w308 - (ExtMag * xExtMag)	- (w308 * x308)						,						
			"Base.3006ExtClip",	ExtMag	* w3006 - (ExtMag * xExtMag)	- (w3006 * x3006)		- (ExtMag * xUSA)				,						
			"Base.SVDClip",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)		- (StdMag * xSOV)		- (StdMag * SECxNON)		,						
			"Base.ASHClip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xSOV)		- (StdMag * SECxNON)	- (StdMag * x90)	,						
			"Base.M82Clip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xUSA)	- (StdMag * CIVxMIL)	- (StdMag * SECxNON)		,						
			"Base.M1Clip",	StdMag	* w3006 - (StdMag * xStdMag)	- (w3006 * x3006)		- (StdMag * xUSA)		- (StdMag * SECxNON)		,						
			"Base.SKSClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)		- (StdMag * xSOV)		- (StdMag * SECxNON)		,						
			"Base.1903Clip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)				- (StdMag * SECxNON)		,						
			"Base.545StdClip",	StdMag	* w545x39 - (StdMag * xStdMag)	- (w545x39 * x545x39)		- (StdMag * xSOV)				,						
			"Base.AKClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)						,						
			"Base.ASVALClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)		- (ExtMag * xSOV)		- (ExtMag * SECxNON)		,						
			"Base.VSSClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)		- (StdMag * xSOV)		- (StdMag * SECxNON)		,						
			"Base.57Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)			- (StdMag * x90)	,						
			"Base.P90Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)			- (StdMag * x90)	,						
			"Base.22Drum",	DrumMag	* w22 - (DrumMag * xDrumMag)	- (w22 * x22)				- (DrumMag * SECxNON)		,						
			"Base.9mmDrum",	DrumMag	* w9 - (DrumMag * xDrumMag)	- (w9 * x9)						,						
			"Base.45Drum",	DrumMag	* w45 - (DrumMag * xDrumMag)	- (w45 * x45)						,						
			"Base.556Drum",	DrumMag	* w556 - (DrumMag * xDrumMag)	- (w556 * x556)						,						
			"Base.545Drum",	DrumMag	* w545x39 - (DrumMag * xDrumMag)	- (w545x39 * x545x39)		- (DrumMag * xSOV)				,						
			"Base.762Drum",	DrumMag	* w762x39 - (DrumMag * xDrumMag)	- (w762x39 * x762x39)						,						
			"Base.12gDrum",	DrumMag	* w12g - (DrumMag * xDrumMag)	- (w12g * x12g)						,						
			"Base.308Belt",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wLMG * xLMG)		- (StdMag * CIVxMIL)			,						
			"Base.556Belt",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wLMG * xLMG)		- (StdMag * CIVxMIL)			,						
			"Base.762x39Belt",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)	- (wLMG * xLMG)		- (StdMag * CIVxMIL)			,						
			"Base.762x54rBelt",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)	- (wLMG * xLMG)	- (StdMag * xSOV)	- (StdMag * CIVxMIL)			,						
			"Base.556MiniCan",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wMINI * xMINI)	- (StdMag * xUSA)	- (StdMag * CIVxMIL)			,						
			"Base.308MiniCan",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wMINI * xMINI)	- (StdMag * xUSA)	- (StdMag * CIVxMIL)			,						
			"Base.50MiniCan",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)	- (wMINI * xMINI)	- (StdMag * xUSA)	- (StdMag * CIVxMIL)			,						
			"Base.M2A1_Tank",	ExtMag	* wFLAME - (ExtMag * xExtMag)	- (wFLAME * xFLAME)		- (ExtMag * xUSA)	- (ExtMag * CIVxMIL)			,						
			"Base.M2A1_Can",	StdMag	* wFLAME - (StdMag * xStdMag)	- (wFLAME * xFLAME)		- (StdMag * xUSA)	- (StdMag * CIVxMIL)			,						
			"Base.M2A1_Can",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)		- (StdMag * SECxNON)		,						
			"Base.Standard_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)		- (StdMag * SECxNON)		,						
			"Base.Large_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)		- (StdMag * SECxNON)		,						
			"Base.RussianMachete",	LgKnife		- (LgKnife * xLgKnife)		- (LgKnife * xSOV)		- (LgKnife * SECxNON)		,						
			"Base.BGMachete",	LgKnife		- (LgKnife * xLgKnife)		- (LgKnife * xUSA)		- (LgKnife * SECxNON)		,						
			"Base.RamboKnife",	LgKnife		- (LgKnife * xLgKnife)		- (LgKnife * xUSA)				,						
			"Base.Butterfly",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xPAC)				,						
			"Base.PushDagger",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xUSA)				,						
			"Base.Karambit",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xPAC)				,						
			"Base.ThrowingKnife",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xUSA)		- (SmKnife * SECxNON)		,						
			"Base.NinjaStar",	SmKnife		- (SmKnife * xSmKnife)		- (SmKnife * xPAC)		- (SmKnife * SECxNON)		,						
			"Base.Tactical_Axe",	Axe		- (Axe * xAxe)		- (Axe * xUSA)		- (Axe * SECxNON)		,						
			"Base.Tactical_Sickle",	Axe		- (Axe * xAxe)		- (Axe * xUSA)		- (Axe * SECxNON)		,						
			"Base.Trench_Axe",	Axe		- (Axe * xAxe)		- (Axe * xEUR)		- (Axe * SECxNON)		,						
			"Base.Broad_Axe",	Axe		- (Axe * xAxe)		- (Axe * xEUR)		- (Axe * SECxNON)		,						
			"Base.DingDong",	Blunt		- (Blunt * xBlunt)		- (Blunt * xUSA)		- (Blunt * SECxNON)		,						
			"Base.MilitaryBaton",	Blunt		- (Blunt * xBlunt)		- (Blunt * xUSA)	- (Blunt * CIVxMIL)			,						
			"Base.ASP_B",	Blunt		- (Blunt * xBlunt)		- (Blunt * xUSA)				,						
			"Base.KillBill",	Sword		- (Sword * xSword)		- (Sword * xPAC)		- (Sword * SECxNON)		,						
			"Base.CH_WarSword",	Sword		- (Sword * xSword)		- (Sword * xPAC)		- (Sword * SECxNON)		,						
			"Base.Conan_Sword",	Sword		- (Sword * xSword)		- (Sword * xUSA)		- (Sword * SECxNON)		,						
			"Base.AmmoCan30_22",	AmmoCan		* w22	- (AmmoCan * x22)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan30_380",	AmmoCan		* w380	- (AmmoCan * x380)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan30_57",	AmmoCan		* w57	- (AmmoCan * x57)	- (AmmoCan * xAmmoCan)			- (AmmoCan * x90)	,						
			"Base.AmmoCan30_9",	AmmoCan		* w9	- (AmmoCan * x9)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_38",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan30_357",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan30_45",	AmmoCan		* w45	- (AmmoCan * x45)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_44",	AmmoCan		* w44	- (AmmoCan * x44)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan30_45LC",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan30_4570",	AmmoCan		* w4570	- (AmmoCan * x4570)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan30_50MAG",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)	- (AmmoCan * x90)	,						
			"Base.AmmoCan50_223",	AmmoCan		* w223	- (AmmoCan * x223)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan50_556",	AmmoCan		* w556	- (AmmoCan * x556)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_762x39",	AmmoCan		* w762x39	- (AmmoCan * x762x39)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_545x39",	AmmoCan		* w545x39	- (AmmoCan * x545x39)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_762x54r",	AmmoCan		* w762x54r	- (AmmoCan * x762x54r)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan50_308",	AmmoCan		* w308	- (AmmoCan * x308)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_3006",	AmmoCan		* w3006	- (AmmoCan * x3006)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan50_410",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan50_20",	AmmoCan		* w20g	- (AmmoCan * x20g)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan50_12",	AmmoCan		* w12g	- (AmmoCan * x12g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * CIVxMIL)			,						
			"Base.AmmoCan50_10",	AmmoCan		* w10g	- (AmmoCan * x10g)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan50_4",	AmmoCan		* w4g	- (AmmoCan * x4g)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan50_50",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)	- (AmmoCan * CIVxMIL)			,						
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)	- (AmmoCan * CIVxMIL)			,						
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)	- (AmmoCan * CIVxMIL)			,						
			"Base.AmmoCan50_ROCKET",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)	- (AmmoCan * CIVxMIL)			,						
		},																
		dontSpawnAmmo = 		 SECammo	,													
	},																	
																		
	SecurityAmmo = {																	
		rolls =	SECRollAMMO	,														
		items = {																
			"Base.AmmoCan30_22",	AmmoCan		* w22	- (AmmoCan * x22)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan30_380",	AmmoCan		* w380	- (AmmoCan * x380)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan30_57",	AmmoCan		* w57	- (AmmoCan * x57)	- (AmmoCan * xAmmoCan)			- (AmmoCan * x90)	,						
			"Base.AmmoCan30_9",	AmmoCan		* w9	- (AmmoCan * x9)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_38",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan30_357",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan30_45",	AmmoCan		* w45	- (AmmoCan * x45)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_44",	AmmoCan		* w44	- (AmmoCan * x44)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan30_45LC",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan30_4570",	AmmoCan		* w4570	- (AmmoCan * x4570)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan30_50MAG",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)	- (AmmoCan * x90)	,						
			"Base.AmmoCan50_223",	AmmoCan		* w223	- (AmmoCan * x223)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan50_556",	AmmoCan		* w556	- (AmmoCan * x556)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_762x39",	AmmoCan		* w762x39	- (AmmoCan * x762x39)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_545x39",	AmmoCan		* w545x39	- (AmmoCan * x545x39)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_762x54r",	AmmoCan		* w762x54r	- (AmmoCan * x762x54r)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan50_308",	AmmoCan		* w308	- (AmmoCan * x308)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_3006",	AmmoCan		* w3006	- (AmmoCan * x3006)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan50_410",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan50_20",	AmmoCan		* w20g	- (AmmoCan * x20g)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan50_12",	AmmoCan		* w12g	- (AmmoCan * x12g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * CIVxMIL)			,						
			"Base.AmmoCan50_10",	AmmoCan		* w10g	- (AmmoCan * x10g)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan50_4",	AmmoCan		* w4g	- (AmmoCan * x4g)	- (AmmoCan * xAmmoCan)		- (AmmoCan * SECxNON)		,						
			"Base.AmmoCan50_50",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)	- (AmmoCan * CIVxMIL)			,						
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)	- (AmmoCan * CIVxMIL)			,						
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)	- (AmmoCan * CIVxMIL)			,						
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)	- (AmmoCan * CIVxMIL)			,						
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)	- (AmmoCan * CIVxMIL)			,						
			"Base.AmmoCan50_ROCKET",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)	- (AmmoCan * CIVxMIL)			,						
			"Base.BB177Box",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.CO2_Cartridge_Box",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.PB68Bag",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.Bullets22Box",	AmmoBox		* w22	- (AmmoBox * x22)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.Bullets380Box",	AmmoBox		* w380	- (AmmoBox * x380)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.Bullets57Box",	AmmoBox		* w57	- (AmmoBox * x57)	- (AmmoBox * xAmmoBox)			- (AmmoBox * x90)	,						
			"Base.Bullets9mmBox",	AmmoBox		* w9	- (AmmoBox * x9)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets38Box",	AmmoBox		* w357	- (AmmoBox * x357)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.Bullets357Box",	AmmoBox		* w357	- (AmmoBox * x357)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.Bullets45Box",	AmmoBox		* w45	- (AmmoBox * x45)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets44Box",	AmmoBox		* w44	- (AmmoBox * x44)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.Bullets45LCBox",	AmmoBox		* w45LC	- (AmmoBox * x45LC)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.Bullets4570Box",	AmmoBox		* w4570	- (AmmoBox * x4570)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.Bullets50MAGBox",	AmmoBox		* wBMG	- (AmmoBox * xBMG)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)	- (AmmoBox * x90)	,						
			"Base.223Box",	AmmoBox		* w223	- (AmmoBox * x223)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.556Box",	AmmoBox		* w556	- (AmmoBox * x556)	- (AmmoBox * xAmmoBox)				,						
			"Base.762x39Box",	AmmoBox		* w762x39	- (AmmoBox * x762x39)	- (AmmoBox * xAmmoBox)				,						
			"Base.545x39Box",	AmmoBox		* w545x39	- (AmmoBox * x545x39)	- (AmmoBox * xAmmoBox)				,						
			"Base.762x54rBox",	AmmoBox		* w762x54r	- (AmmoBox * x762x54r)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.308Box",	AmmoBox		* w308	- (AmmoBox * x308)	- (AmmoBox * xAmmoBox)				,						
			"Base.3006Box",	AmmoBox		* w3006	- (AmmoBox * x3006)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.410gShotgunShellsBox",	AmmoBox		* w45LC	- (AmmoBox * x45LC)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.20gShotgunShellsBox",	AmmoBox		* w20g	- (AmmoBox * x20g)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.ShotgunShellsBox",	AmmoBox		* w12g	- (AmmoBox * x12g)	- (AmmoBox * xAmmoBox)				,						
			"Base.10gShotgunShellsBox",	AmmoBox		* w10g	- (AmmoBox * x10g)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.4gShotgunShellsBox",	AmmoBox		* w4g	- (AmmoBox * x4g)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.50BMGBox",	AmmoBox		* wBMG	- (AmmoBox * xBMG)	- (AmmoBox * xAmmoBox)	- (AmmoBox * CIVxMIL)			,						
			"Base.Bolt_Bear",	AmmoBox		* wBOW	- (AmmoBox * xBOW)			- (AmmoBox * SECxNON)		,						
			"Base.Bolt_Bear_Pack",	AmmoBox		* wBOW	- (AmmoBox * xBOW)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.Arrow_Fiberglass",	AmmoBox		* wBOW	- (AmmoBox * xBOW)			- (AmmoBox * SECxNON)		,						
			"Base.Arrow_Fiberglass_Pack",	AmmoBox		* wBOW	- (AmmoBox * xBOW)	- (AmmoBox * xAmmoBox)		- (AmmoBox * SECxNON)		,						
			"Base.40HERound",	AmmoBox		* wGREN	- (AmmoBox * xGREN)		- (AmmoBox * CIVxMIL)			,						
			"Base.40INCRound",	AmmoBox		* wGREN	- (AmmoBox * xGREN)		- (AmmoBox * CIVxMIL)			,						
			"Base.HERocket",	AmmoBox		* wGREN	- (AmmoBox * xGREN)		- (AmmoBox * CIVxMIL)			,						
			"Base.Flare",	AmmoBox		* wFLAME	- (AmmoBox * xFLAME)			- (AmmoBox * SECxNON)		,						
			"Base.Grenade_Fragmentation",	AmmoBox	* SECx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)	- (AmmoBox* SECx * CIVxMIL)	- (AmmoBox* SECx * SECxNON)		,						
			"Base.Grenade_Stick",	AmmoBox	* SECx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xEUR)	- (AmmoBox* SECx * CIVxMIL)	- (AmmoBox* SECx * SECxNON)		,						
			"Base.Explosive_Landmine",	AmmoBox	* SECx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)	- (AmmoBox* SECx * CIVxMIL)	- (AmmoBox* SECx * SECxNON)		,						
			"Base.Explosive_Claymore_P",	AmmoBox	* SECx	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)	- (AmmoBox* SECx * CIVxMIL)	- (AmmoBox* SECx * SECxNON)		,						
			"Base.PolyCan_Red_SPASClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w12g	- (w12g * x12g)					,						
			"Base.PolyCan_Red_12gDrum",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w12g	- (w12g * x12g)					,						
			"Base.PolyCan_Red_38Speed",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w357	- (w357 * x357)	- (PolyCan * xREV)		- (PolyCan * SECxNON)		,						
			"Base.PolyCan_Red_44Speed",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w44	- (w44 * x44)	- (PolyCan * xREV)		- (PolyCan * SECxNON)		,						
			"Base.PolyCan_Blue_9mmSSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)					,						
			"Base.PolyCan_Blue_9mmSSExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)					,						
			"Base.PolyCan_Blue_9mmClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)					,						
			"Base.PolyCan_Blue_9mmExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)					,						
			"Base.PolyCan_Blue_9mmDrum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)					,						
			"Base.PolyCan_Blue_45DSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)					,						
			"Base.PolyCan_Blue_45DSExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)					,						
			"Base.PolyCan_Blue_45Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)					,						
			"Base.PolyCan_Blue_45Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)					,						
			"Base.PolyCan_Blue_45ExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)					,						
			"Base.PolyCan_Brown_556Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w556	- (w556 * x556)					,						
			"Base.PolyCan_Brown_556Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w556	- (w556 * x556)					,						
			"Base.PolyCan_Brown_AKClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)					,						
			"Base.PolyCan_Brown_762Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)					,						
			"Base.PolyCan_Brown_545StdClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w545x39	- (w545x39 * x545x39)					,						
			"Base.PolyCan_Brown_545Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w545x39	- (w545x39 * x545x39)					,						
			"Base.PolyCan_Beige_308StdClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)					,						
			"Base.PolyCan_Beige_308ExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)					,						
			"Base.PolyCan_Beige_BMG",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* wBMG	- (wBMG * xBMG)		- (PolyCan * CIVxMIL)			,						
			"Base.PolyCan_Beige_K11",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* wGREN	- (wGREN * xGREN)	- (PolyCan * xKOR)	- (PolyCan * CIVxMIL)		- (PolyCan * x90)	,						
			"Base.PolyCan_Beige_SVDClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x54r	- (w762x54r * x762x54r)	- (PolyCan * xSOV)		- (PolyCan * SECxNON)		,						
			"Base.PolyCan_Beige_SKSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)	- (PolyCan * xSOV)		- (PolyCan * SECxNON)		,						
			"Base.PolyCan_Beige_M1Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w3006	- (w3006 * x3006)	- (PolyCan * xUSA)		- (PolyCan * SECxNON)		,						
			"Base.PolyCan_Beige_1903Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)			- (PolyCan * SECxNON)		,						
		}																
	},																	
																		
																		
	HuntGuns = {																	
		rolls =	HNTRollGUN	,														
		items = {																
			"Base.UmarexSS",	wBB	 * HNTx	- (wBB * xBB)		- (wBB * HNTx * xUSA)			- (wBB * HNTx * HNTxNON)	- (wBB * HNTx * x90)	,					
			"Base.Benjamin_M397",	wBB	 * HNTx	- (wBB * xBB)		- (wBB * HNTx * xUSA)					,					
			"Base.RWS_M34",	wBB	 * HNTx	- (wBB * xBB)		- (wBB * HNTx * xUSA)				- (wBB * HNTx * x90)	,					
			"Base.VM_68",	wBB	 * HNTx	- (wBB * xBB)		- (wBB * HNTx * xUSA)					,					
			"Base.Auto_Cocker",	wBB	 * HNTx	- (wBB * xBB)		- (wBB * HNTx * xUSA)					,					
			"Base.Tippmann_SL68",	wBB	 * HNTx	- (wBB * xBB)		- (wBB * HNTx * xUSA)					,					
			"Base.Sheridan_PGP",	wBB	 * HNTx	- (wBB * xBB)		- (wBB * HNTx * xUSA)					,					
			"Base.CP33",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSEMI)	- (w22 * HNTx * xUSA)			- (w22 * HNTx * HNTxNON)	- (w22 * HNTx * x90)	,					
			"Base.Ruger_MK4",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSEMI)	- (w22 * HNTx * xUSA)				- (w22 * HNTx * x90)	,					
			"Base.Ruger_MK4_2245",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSEMI)	- (w22 * HNTx * xUSA)				- (w22 * HNTx * x90)	,					
			"Base.Buckmark",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSEMI)	- (w22 * HNTx * xUSA)					,					
			"Base.Buckmark_Long",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSEMI)	- (w22 * HNTx * xUSA)					,					
			"Base.Buckmark_Carbine",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSEMI)	- (w22 * HNTx * xUSA)					,					
			"Base.HK4_22",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSEMI)	- (w22 * HNTx * xEUR)			- (w22 * HNTx * HNTxNON)		,					
			"Base.ZIP22",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSEMI)	- (w22 * HNTx * xUSA)			- (w22 * HNTx * HNTxNON)	- (w22 * HNTx * x90)	,					
			"Base.Ruger_1022",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSEMI)	- (w22 * HNTx * xUSA)					,					
			"Base.Marlin_M70",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSEMI)	- (w22 * HNTx * xUSA)					,					
			"Base.Cricket_22",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xBOLT)	- (w22 * HNTx * xUSA)					,					
			"Base.AR7",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSEMI)	- (w22 * HNTx * xUSA)					,					
			"Base.Calico_22LR",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSMG)	- (w22 * HNTx * xUSA)			- (w22 * HNTx * HNTxNON)		,					
			"Base.American180",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSMG)	- (w22 * HNTx * xUSA)			- (w22 * HNTx * HNTxNON)		,					
			"Base.Winchester1903",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xLEVER)	- (w22 * HNTx * xUSA)					,					
			"Base.KRISS22_MK11_Stock",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSMG)	- (w22 * HNTx * xUSA)			- (w22 * HNTx * HNTxNON)	- (w22 * HNTx * x90)	,					
			"Base.KRISS22_CRB_Stock",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSMG)	- (w22 * HNTx * xUSA)			- (w22 * HNTx * HNTxNON)	- (w22 * HNTx * x90)	,					
			"Base.CMR_30",	w22	 * HNTx	- (w22 * x22)	- (w22 * HNTx * xSEMI)	- (w22 * HNTx * xUSA)			- (w22 * HNTx * HNTxNON)	- (w22 * HNTx * x90)	,					
			"Base.G42",	w380	 * HNTx	- (w380 * x380)	- (w380 * HNTx * xSEMI)	- (w380 * HNTx * xEUR)			- (w380 * HNTx * HNTxNON)	- (w380 * HNTx * x90)	,					
			"Base.LCP380",	w380	 * HNTx	- (w380 * x380)	- (w380 * HNTx * xSEMI)	- (w380 * HNTx * xUSA)			- (w380 * HNTx * HNTxNON)	- (w380 * HNTx * x90)	,					
			"Base.BodyGuard380",	w380	 * HNTx	- (w380 * x380)	- (w380 * HNTx * xSEMI)	- (w380 * HNTx * xUSA)			- (w380 * HNTx * HNTxNON)	- (w380 * HNTx * x90)	,					
			"Base.Bersa85F",	w380	 * HNTx	- (w380 * x380)	- (w380 * HNTx * xSEMI)	- (w380 * HNTx * xREST)			- (w380 * HNTx * HNTxNON)		,					
			"Base.Colt1903",	w380	 * HNTx	- (w380 * x380)	- (w380 * HNTx * xSEMI)	- (w380 * HNTx * xUSA)			- (w380 * HNTx * HNTxNON)		,					
			"Base.Makarov380",	w380	 * HNTx	- (w380 * x380)	- (w380 * HNTx * xSEMI)	- (w380 * HNTx * xSOV)			- (w380 * HNTx * HNTxNON)		,					
			"Base.PPK",	w380	 * HNTx	- (w380 * x380)	- (w380 * HNTx * xSEMI)	- (w380 * HNTx * xEUR)			- (w380 * HNTx * HNTxNON)		,					
			"Base.HK4_380",	w380	 * HNTx	- (w380 * x380)	- (w380 * HNTx * xSEMI)	- (w380 * HNTx * xEUR)			- (w380 * HNTx * HNTxNON)		,					
			"Base.VP70",	w380	 * HNTx	- (w380 * x380)	- (w380 * HNTx * xSMG)	- (w380 * HNTx * xEUR)			- (w380 * HNTx * HNTxNON)		,					
			"Base.VP70_Stock",	w380	 * HNTx	- (w380 * x380)	- (w380 * HNTx * xSMG)	- (w380 * HNTx * xEUR)			- (w380 * HNTx * HNTxNON)		,					
			"Base.Vz61_Fixed",	w380	 * HNTx	- (w380 * x380)	- (w380 * HNTx * xSMG)	- (w380 * HNTx * xCZE)			- (w380 * HNTx * HNTxNON)		,					
			"Base.Vz61_Fold",	w380	 * HNTx	- (w380 * x380)	- (w380 * HNTx * xSMG)	- (w380 * HNTx * xCZE)			- (w380 * HNTx * HNTxNON)		,					
			"Base.BT380_Stock",	w380	 * HNTx	- (w380 * x380)	- (w380 * HNTx * xSEMI)	- (w380 * HNTx * xEUR)			- (w380 * HNTx * HNTxNON)	- (w380 * HNTx * x90)	,					
			"Base.FN_57", 	w57	 * HNTx	- (w57 * x57)	- (w57 * HNTx * xSEMI)	- (w57 * HNTx * xEUR)			- (w57 * HNTx * HNTxNON)	- (w57 * HNTx * x90)	,					
			"Base.FN_57_MK2", 	w57	 * HNTx	- (w57 * x57)	- (w57 * HNTx * xSEMI)	- (w57 * HNTx * xEUR)			- (w57 * HNTx * HNTxNON)	- (w57 * HNTx * x90)	,					
			"Base.FN_P90",	w57	 * HNTx	- (w57 * x57)	- (w57 * HNTx * xSMG)	- (w57 * HNTx * xEUR)	- (w57 * HNTx * CIVxLEO)		- (w57 * HNTx * HNTxNON)	- (w57 * HNTx * x90)	,					
			"Base.FN_PS90",	w57	 * HNTx	- (w57 * x57)	- (w57 * HNTx * xSMG)	- (w57 * HNTx * xEUR)	- (w57 * HNTx * CIVxLEO)		- (w57 * HNTx * HNTxNON)	- (w57 * HNTx * x90)	,					
			"Base.MPA57DMG",	w57	 * HNTx	- (w57 * x57)	- (w57 * HNTx * xSMG)	- (w57 * HNTx * xUSA)			- (w57 * HNTx * HNTxNON)	- (w57 * HNTx * x90)	,					
			"Base.MPA57DMG_Carbine",	w57	 * HNTx	- (w57 * x57)	- (w57 * HNTx * xSMG)	- (w57 * HNTx * xUSA)			- (w57 * HNTx * HNTxNON)	- (w57 * HNTx * x90)	,					
			"Base.AR57_PDW",	w57	 * HNTx	- (w57 * x57)	- (w57 * HNTx * xSMG)	- (w57 * HNTx * xUSA)			- (w57 * HNTx * HNTxNON)	- (w57 * HNTx * x90)	,					
			"Base.AR57_PDW_Long",	w57	 * HNTx	- (w57 * x57)	- (w57 * HNTx * xSMG)	- (w57 * HNTx * xUSA)			- (w57 * HNTx * HNTxNON)	- (w57 * HNTx * x90)	,					
			"Base.Ruger_PCC",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.Ruger_PCC_R",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.Ruger_PCC_M",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.HiPoint",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)		,					
			"Base.HiPoint_Carbine",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)		,					
			"Base.STAR_BM", 	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xREST)			- (w9 * HNTx * HNTxNON)		,					
			"Base.M39",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)		,					
			"Base.MK22",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)		,					
			"Base.G43",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xEUR)			- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.CZ75",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xCZE)			- (w9 * HNTx * HNTxNON)		,					
			"Base.CZ_75b",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xCZE)			- (w9 * HNTx * HNTxNON)		,					
			"Base.CZ_75_SP01_SS",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xCZE)			- (w9 * HNTx * HNTxNON)		,					
			"Base.CZ_75_SP01",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xCZE)			- (w9 * HNTx * HNTxNON)		,					
			"Base.CZ_75_Compact",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xCZE)			- (w9 * HNTx * HNTxNON)		,					
			"Base.CZ_75_P01",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xCZE)			- (w9 * HNTx * HNTxNON)		,					
			"Base.CZ_2075",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xCZE)			- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.CZ_75_Shadow",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xCZE)			- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.CZ_75_Czechmate",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xCZE)			- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.EAA_Witness_9",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xEUR)			- (w9 * HNTx * HNTxNON)		,					
			"Base.EAA_Witness_Long_9",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xEUR)					,					
			"Base.G17",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xEUR)		- (w9 * HNTx * CIVxMIL)	- (w9 * HNTx * HNTxNON)		,					
			"Base.G18",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)		- (w9 * HNTx * CIVxMIL)	- (w9 * HNTx * HNTxNON)		,					
			"Base.G34", 	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.K5",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xKOR)		- (w9 * HNTx * CIVxMIL)	- (w9 * HNTx * HNTxNON)		,					
			"Base.RPD_92FS",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xEUR)	- (w9 * HNTx * CIVxLEO)		- (w9 * HNTx * HNTxNON)		,					
			"Base.M9",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xEUR)		- (w9 * HNTx * CIVxMIL)	- (w9 * HNTx * HNTxNON)		,					
			"Base.M9A3",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xEUR)			- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.B93R",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)		- (w9 * HNTx * CIVxMIL)	- (w9 * HNTx * HNTxNON)		,					
			"Base.M5906",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)		,					
			"Base.XD9",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xUSA)	- (w9 * HNTx * CIVxLEO)		- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.MP9",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xUSA)	- (w9 * HNTx * CIVxLEO)		- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.P226",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xEUR)	- (w9 * HNTx * CIVxLEO)		- (w9 * HNTx * HNTxNON)		,					
			"Base.APS",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xSOV)			- (w9 * HNTx * HNTxNON)		,					
			"Base.Makarov",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xSOV)			- (w9 * HNTx * HNTxNON)		,					
			"Base.PB",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xSOV)			- (w9 * HNTx * HNTxNON)		,					
			"Base.Luger",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xEUR)			- (w9 * HNTx * HNTxNON)		,					
			"Base.Luger_WW1",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xEUR)			- (w9 * HNTx * HNTxNON)		,					
			"Base.Luger_Carbine",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xEUR)			- (w9 * HNTx * HNTxNON)		,					
			"Base.UZI", 	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xREST)			- (w9 * HNTx * HNTxNON)		,					
			"Base.UZI_Wood",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xREST)			- (w9 * HNTx * HNTxNON)		,					
			"Base.UZI_Micro",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xREST)			- (w9 * HNTx * HNTxNON)		,					
			"Base.BT9_Fold",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)			- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.UMP9_Stock",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)	- (w9 * HNTx * CIVxLEO)		- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.SUB2000",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xUSA)				- (w9 * HNTx * x90)	,					
			"Base.MP5_Fixed",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)	- (w9 * HNTx * CIVxLEO)		- (w9 * HNTx * HNTxNON)		,					
			"Base.MP5_Stock",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)	- (w9 * HNTx * CIVxLEO)		- (w9 * HNTx * HNTxNON)		,					
			"Base.MP5SD6_Fixed",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)		- (w9 * HNTx * CIVxMIL)	- (w9 * HNTx * HNTxNON)		,					
			"Base.MP5SD6_Stock",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)		- (w9 * HNTx * CIVxMIL)	- (w9 * HNTx * HNTxNON)		,					
			"Base.EVO_Fold",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xCZE)			- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.K7_Stock",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xKOR)		- (w9 * HNTx * CIVxMIL)	- (w9 * HNTx * HNTxNON)		,					
			"Base.AUG9",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)		- (w9 * HNTx * CIVxMIL)	- (w9 * HNTx * HNTxNON)		,					
			"Base.KG9",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)		,					
			"Base.Calico_M900_Fold",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)		,					
			"Base.Calico_M950_Pistol",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)		,					
			"Base.Bizon2_01_Stock",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xSOV)					,					
			"Base.VSS",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xSOV)					,					
			"Base.ASVAL",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xSOV)					,					
			"Base.M1Carbine",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSEMI)	- (w9 * HNTx * xUSA)					,					
			"Base.M2Carbine",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)		,					
			"Base.M635",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xUSA)	- (w9 * HNTx * CIVxLEO)		- (w9 * HNTx * HNTxNON)		,					
			"Base.M635S",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xUSA)	- (w9 * HNTx * CIVxLEO)		- (w9 * HNTx * HNTxNON)		,					
			"Base.M635SD",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xUSA)		- (w9 * HNTx * CIVxMIL)	- (w9 * HNTx * HNTxNON)		,					
			"Base.MP7",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)	- (w9 * HNTx * CIVxLEO)		- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.Jatimatic",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)			- (w9 * HNTx * HNTxNON)		,					
			"Base.Sten",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)			- (w9 * HNTx * HNTxNON)		,					
			"Base.Sten_MK2",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)			- (w9 * HNTx * HNTxNON)		,					
			"Base.Sten_MK2SD",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)			- (w9 * HNTx * HNTxNON)		,					
			"Base.STAR_Z45_Stock",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)			- (w9 * HNTx * HNTxNON)		,					
			"Base.STAR_Z45_Fixed",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xEUR)			- (w9 * HNTx * HNTxNON)		,					
			"Base.KRISS9_Stock",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.KRISS9_MLOK_Stock",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.JW3_TTI_MPX",	w9	 * HNTx	- (w9 * x9)	- (w9 * HNTx * xSMG)	- (w9 * HNTx * xUSA)			- (w9 * HNTx * HNTxNON)	- (w9 * HNTx * x90)	,					
			"Base.M5238",	w357	 * HNTx	- (w357 * x357)	- (w357 * HNTx * xSEMI)	- (w357 * HNTx * xUSA)			- (w357 * HNTx * HNTxNON)		,					
			"Base.Taurus856",	w357	 * HNTx	- (w357 * x357)	- (w357 * HNTx * xREV)	- (w357 * HNTx * xREST)				- (w357 * HNTx * x90)	,					
			"Base.Colt_Service38",	w357	 * HNTx	- (w357 * x357)	- (w357 * HNTx * xREV)	- (w357 * HNTx * xUSA)			- (w357 * HNTx * HNTxNON)		,					
			"Base.GP100_2",	w357	 * HNTx	- (w357 * x357)	- (w357 * HNTx * xREV)	- (w357 * HNTx * xUSA)					,					
			"Base.GP100_4",	w357	 * HNTx	- (w357 * x357)	- (w357 * HNTx * xREV)	- (w357 * HNTx * xUSA)					,					
			"Base.GP100_6",	w357	 * HNTx	- (w357 * x357)	- (w357 * HNTx * xREV)	- (w357 * HNTx * xUSA)					,					
			"Base.K6S",	w357	 * HNTx	- (w357 * x357)	- (w357 * HNTx * xREV)	- (w357 * HNTx * xUSA)				- (w357 * HNTx * x90)	,					
			"Base.Rhino_200DS",	w357	 * HNTx	- (w357 * x357)	- (w357 * HNTx * xREV)	- (w357 * HNTx * xEUR)				- (w357 * HNTx * x90)	,					
			"Base.Rhino_40DS",	w357	 * HNTx	- (w357 * x357)	- (w357 * HNTx * xREV)	- (w357 * HNTx * xEUR)				- (w357 * HNTx * x90)	,					
			"Base.Rhino_60DS",	w357	 * HNTx	- (w357 * x357)	- (w357 * HNTx * xREV)	- (w357 * HNTx * xEUR)				- (w357 * HNTx * x90)	,					
			"Base.SW_327",	w357	 * HNTx	- (w357 * x357)	- (w357 * HNTx * xREV)	- (w357 * HNTx * xUSA)				- (w357 * HNTx * x90)	,					
			"Base.M1936",	w357	 * HNTx	- (w357 * x357)	- (w357 * HNTx * xREV)	- (w357 * HNTx * xUSA)			- (w357 * HNTx * HNTxNON)		,					
			"Base.NEF_Handi_38",	w357	 * HNTx	- (w357 * x357)	- (w357 * HNTx * xBREAK)	- (w357 * HNTx * xUSA)					,					
			"Base.Marlin_1894",	w357	 * HNTx	- (w357 * x357)	- (w357 * HNTx * xLEVER)	- (w357 * HNTx * xUSA)					,					
			"Base.CZ97B",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xCZE)			- (w45 * HNTx * HNTxNON)	- (w45 * HNTx * x90)	,					
			"Base.EAA_Witness_45",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xEUR)			- (w45 * HNTx * HNTxNON)		,					
			"Base.EAA_Witness_Long_45",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xEUR)					,					
			"Base.G21",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xEUR)			- (w45 * HNTx * HNTxNON)		,					
			"Base.XD4",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xUSA)			- (w45 * HNTx * HNTxNON)	- (w45 * HNTx * x90)	,					
			"Base.MP45",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xUSA)			- (w45 * HNTx * HNTxNON)	- (w45 * HNTx * x90)	,					
			"Base.P220",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xEUR)			- (w45 * HNTx * HNTxNON)		,					
			"Base.M4506",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xUSA)			- (w45 * HNTx * HNTxNON)		,					
			"Base.HK_MK23",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xEUR)			- (w45 * HNTx * HNTxNON)		,					
			"Base.HK_USP",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xEUR)			- (w45 * HNTx * HNTxNON)		,					
			"Base.HK_USP_Match",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xEUR)			- (w45 * HNTx * HNTxNON)		,					
			"Base.PULP_1911",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xUSA)			- (w45 * HNTx * HNTxNON)		,					
			"Base.PARA1911",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xUSA)					,					
			"Base.AMT1911",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xUSA)					,					
			"Base.AMT1911_Long",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xUSA)					,					
			"Base.M1911_Carbine",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xUSA)					,					
			"Base.Colt1911",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xUSA)					,					
			"Base.Colt_Kimber",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xUSA)				- (w45 * HNTx * x90)	,					
			"Base.Colt_Commander",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSEMI)	- (w45 * HNTx * xUSA)					,					
			"Base.UMP45_Stock",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSMG)	- (w45 * HNTx * xEUR)	- (w45 * HNTx * CIVxLEO)		- (w45 * HNTx * HNTxNON)	- (w45 * HNTx * x90)	,					
			"Base.MAC10_Fold",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSMG)	- (w45 * HNTx * xUSA)			- (w45 * HNTx * HNTxNON)		,					
			"Base.KRISS_Stock",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSMG)	- (w45 * HNTx * xUSA)			- (w45 * HNTx * HNTxNON)	- (w45 * HNTx * x90)	,					
			"Base.Commando",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xBOLT)	- (w45 * HNTx * xEUR)					,					
			"Base.Thompson",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSMG)	- (w45 * HNTx * xUSA)			- (w45 * HNTx * HNTxNON)		,					
			"Base.Thompson_1928",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSMG)	- (w45 * HNTx * xUSA)			- (w45 * HNTx * HNTxNON)		,					
			"Base.M2Hyde",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSMG)	- (w45 * HNTx * xUSA)			- (w45 * HNTx * HNTxNON)		,					
			"Base.Model55_Fold",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSMG)	- (w45 * HNTx * xUSA)			- (w45 * HNTx * HNTxNON)		,					
			"Base.Model50",	w45	 * HNTx	- (w45 * x45)	- (w45 * HNTx * xSMG)	- (w45 * HNTx * xUSA)			- (w45 * HNTx * HNTxNON)		,					
			"Base.Colt_Navy_1851",	w44	 * HNTx	- (w44 * x44)	- (w44 * HNTx * xREV)	- (w44 * HNTx * xUSA)					,					
			"Base.M29_44",	w44	 * HNTx	- (w44 * x44)	- (w44 * HNTx * xREV)	- (w44 * HNTx * xUSA)					,					
			"Base.M29_44Carbine",	w44	 * HNTx	- (w44 * x44)	- (w44 * HNTx * xREV)	- (w44 * HNTx * xUSA)					,					
			"Base.Automag",	w44	 * HNTx	- (w44 * x44)	- (w44 * HNTx * xSEMI)	- (w44 * HNTx * xUSA)					,					
			"Base.DEagle",	w44	 * HNTx	- (w44 * x44)	- (w44 * HNTx * xSEMI)	- (w44 * HNTx * xISR)					,					
			"Base.DEagle_Long",	w44	 * HNTx	- (w44 * x44)	- (w44 * HNTx * xSEMI)	- (w44 * HNTx * xISR)					,					
			"Base.DEagle_Hawk",	wBMG	 * HNTx	- (wBMG * xBMG)	- (wBMG * HNTx * xSEMI)	- (wBMG * HNTx * xISR)					,					
			"Base.Winchester1866",	w45LC	 * HNTx	- (w44 * x44)	- (w45LC * HNTx * xLEVER)	- (w45LC * HNTx * xUSA)					,					
			"Base.Win_1894",	w44	 * HNTx	- (w44 * x44)	- (w44 * HNTx * xLEVER)	- (w44 * HNTx * xUSA)					,					
			"Base.Colt_Service45",	w45LC	 * HNTx	- (w45LC * x45LC)	- (w45LC * HNTx * xREV)	- (w45LC * HNTx * xUSA)					,					
			"Base.Judge_45LC",	w45LC	 * HNTx	- (w45LC * x45LC)	- (w45LC * HNTx * xREV)	- (w45LC * HNTx * xREST)				- (w45LC * HNTx * x90)	,					
			"Base.Judge513_45LC",	w45LC	 * HNTx	- (w45LC * x45LC)	- (w45LC * HNTx * xREV)	- (w45LC * HNTx * xREST)				- (w45LC * HNTx * x90)	,					
			"Base.Judge513_Long_45LC",	w45LC	 * HNTx	- (w45LC * x45LC)	- (w45LC * HNTx * xREV)	- (w45LC * HNTx * xREST)				- (w45LC * HNTx * x90)	,					
			"Base.TXS_804_45LC",	w45LC	 * HNTx	- (w45LC * x45LC)	- (w45LC * HNTx * xREV)	- (w45LC * HNTx * xREST)					,					
			"Base.Winchester1873",	w45LC	 * HNTx	- (w45LC * x45LC)	- (w45LC * HNTx * xLEVER)	- (w45LC * HNTx * xUSA)					,					
			"Base.Sako85",	w223	 * HNTx	- (w223 * x223)	- (w223 * HNTx * xBOLT)	- (w223 * HNTx * xEUR)					,					
			"Base.MINI14",	w223	 * HNTx	- (w223 * x223)	- (w223 * HNTx * xSEMI)	- (w223 * HNTx * xUSA)					,					
			"Base.MINI14_Stock",	w223	 * HNTx	- (w223 * x223)	- (w223 * HNTx * xSEMI)	- (w223 * HNTx * xUSA)					,					
			"Base.MINI14_T",	w223	 * HNTx	- (w223 * x223)	- (w223 * HNTx * xSEMI)	- (w223 * HNTx * xUSA)	- (w223 * HNTx * CIVxLEO)				,					
			"Base.Viper",	w223	 * HNTx	- (w223 * x223)	- (w223 * HNTx * xLEVER)	- (w223 * HNTx * xREST)				- (w223 * HNTx * x90)	,					
			"Base.Carbon15_97",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)	- (w556 * HNTx * CIVxLEO)		- (w556 * HNTx * HNTxNON)		,					
			"Base.CAR15SMG",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)	- (w556 * HNTx * CIVxLEO)		- (w556 * HNTx * HNTxNON)		,					
			"Base.CAR15_Survival",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)	- (w556 * HNTx * CIVxLEO)		- (w556 * HNTx * HNTxNON)		,					
			"Base.XM8Compact_Pistol",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.XM8",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.SCARSC_Stock",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.SCARL",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.SCAR_B",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.G33",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.G36",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.G36C",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.G36KV",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.G11K3",	w57	 * HNTx	- (w57 * x57)	- (w57 * HNTx * xAUTO)	- (w57 * HNTx * xEUR)		- (w57 * HNTx * CIVxMIL)	- (w57 * HNTx * HNTxNON)	- (w57 * HNTx * x90)	,					
			"Base.MK18",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.AK5C",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.M16A1",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.M16A2",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)			- (w556 * HNTx * HNTxNON)		,					
			"Base.M16A3",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.M723",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.XM117",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.H416",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.M4",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.M4A1",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.ADAR",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xSOV)			- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.K2C1_PH",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xKOR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.K2_ADVK2",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xKOR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.K2_Grunt",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xKOR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.K1A_DEV",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xKOR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.K1DEV",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xKOR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.K2_C1",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xKOR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.K2_1",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xKOR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.K2_203",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xKOR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.K1_1",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xKOR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.DR_200",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xKOR)	- (w556 * HNTx * CIVxLEO)			- (w556 * HNTx * x90)	,					
			"Base.LVOA_C",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xSEMI)	- (w556 * HNTx * xUSA)			- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.AAC_Honey",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.AAC_HoneySD",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.Bush_AR15_MOE",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xSEMI)	- (w556 * HNTx * xUSA)			- (w556 * HNTx * HNTxNON)		,					
			"Base.Bush_XM15",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xSEMI)	- (w556 * HNTx * xUSA)			- (w556 * HNTx * HNTxNON)		,					
			"Base.Bush_XM15_Custom",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xSEMI)	- (w556 * HNTx * xUSA)			- (w556 * HNTx * HNTxNON)		,					
			"Base.MCX_Virtus",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)			- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.MCX_VirtusPatrol",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)			- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.MCX_Socom",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)			- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.MCX_Spear",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xSEMI)	- (w556 * HNTx * xEUR)			- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.ColtM16",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)			- (w556 * HNTx * HNTxNON)		,					
			"Base.M16Wood",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)			- (w556 * HNTx * HNTxNON)		,					
			"Base.M16Tape",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)			- (w556 * HNTx * HNTxNON)		,					
			"Base.FAMAS",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.FAMAS_G2",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.FAMAS_Felin",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.AUG",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)			- (w556 * HNTx * HNTxNON)		,					
			"Base.AUG_A3",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)			- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.M85_Stock",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xSOV)			- (w556 * HNTx * HNTxNON)		,					
			"Base.AN94",	w545x39	 * HNTx	- (w545x39 * x545x39)	- (w545x39 * HNTx * xAUTO)	- (w545x39 * HNTx * xSOV)			- (w545x39 * HNTx * HNTxNON)		,					
			"Base.AK74",	w545x39	 * HNTx	- (w545x39 * x545x39)	- (w545x39 * HNTx * xAUTO)	- (w545x39 * HNTx * xSOV)			- (w545x39 * HNTx * HNTxNON)		,					
			"Base.AKS74",	w545x39	 * HNTx	- (w545x39 * x545x39)	- (w545x39 * HNTx * xAUTO)	- (w545x39 * HNTx * xSOV)			- (w545x39 * HNTx * HNTxNON)		,					
			"Base.AKS74U",	w545x39	 * HNTx	- (w545x39 * x545x39)	- (w545x39 * HNTx * xAUTO)	- (w545x39 * HNTx * xSOV)			- (w545x39 * HNTx * HNTxNON)		,					
			"Base.AK74_Alpha",	w545x39	 * HNTx	- (w545x39 * x545x39)	- (w545x39 * HNTx * xAUTO)	- (w545x39 * HNTx * xSOV)		- (w545x39 * HNTx * CIVxMIL)	- (w545x39 * HNTx * HNTxNON)	- (w545x39 * HNTx * x90)	,					
			"Base.AK12",	w545x39	 * HNTx	- (w545x39 * x545x39)	- (w545x39 * HNTx * xAUTO)	- (w545x39 * HNTx * xSOV)		- (w545x39 * HNTx * CIVxMIL)	- (w545x39 * HNTx * HNTxNON)	- (w545x39 * HNTx * x90)	,					
			"Base.AK12_New",	w545x39	 * HNTx	- (w545x39 * x545x39)	- (w545x39 * HNTx * xAUTO)	- (w545x39 * HNTx * xSOV)		- (w545x39 * HNTx * CIVxMIL)	- (w545x39 * HNTx * HNTxNON)	- (w545x39 * HNTx * x90)	,					
			"Base.RPK74",	w545x39	 * HNTx	- (w545x39 * x545x39)	- (w545x39 * HNTx * xLMG)	- (w545x39 * HNTx * xSOV)			- (w545x39 * HNTx * HNTxNON)		,					
			"Base.RPK16",	w545x39	 * HNTx	- (w545x39 * x545x39)	- (w545x39 * HNTx * xLMG)	- (w545x39 * HNTx * xSOV)			- (w545x39 * HNTx * HNTxNON)	- (w545x39 * HNTx * x90)	,					
			"Base.L85",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.L85A2",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.L86",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.L22",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.F2000",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)			- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.Tavor",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xISR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.AR18",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xUSA)			- (w556 * HNTx * HNTxNON)		,					
			"Base.Type20",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xPAC)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.Type89",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xPAC)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.QBZ_95",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xPAC)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.Shrike",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xLMG)	- (w556 * HNTx * xUSA)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.XM8LMG",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xLMG)	- (w556 * HNTx * xEUR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.M249",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xLMG)	- (w556 * HNTx * xUSA)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.M249E3",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xLMG)	- (w556 * HNTx * xUSA)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)	- (w556 * HNTx * x90)	,					
			"Base.K3LMG",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xLMG)	- (w556 * HNTx * xKOR)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.AK47",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xAUTO)	- (w762x39 * HNTx * xSOV)			- (w762x39 * HNTx * HNTxNON)		,					
			"Base.AKM",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xAUTO)	- (w762x39 * HNTx * xSOV)			- (w762x39 * HNTx * HNTxNON)		,					
			"Base.AK103",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xAUTO)	- (w762x39 * HNTx * xSOV)			- (w762x39 * HNTx * HNTxNON)	- (w762x39 * HNTx * x90)	,					
			"Base.MD65_Stock",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xAUTO)	- (w762x39 * HNTx * xSOV)			- (w762x39 * HNTx * HNTxNON)		,					
			"Base.AKMS_Stock",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xAUTO)	- (w762x39 * HNTx * xSOV)			- (w762x39 * HNTx * HNTxNON)		,					
			"Base.Vz58",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xAUTO)	- (w762x39 * HNTx * xCZE)			- (w762x39 * HNTx * HNTxNON)		,					
			"Base.Vz58_Stock",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xAUTO)	- (w762x39 * HNTx * xCZE)			- (w762x39 * HNTx * HNTxNON)		,					
			"Base.Vz58_Mini_Stock",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xAUTO)	- (w762x39 * HNTx * xCZE)			- (w762x39 * HNTx * HNTxNON)		,					
			"Base.SKS",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xSEMI)	- (w762x39 * HNTx * xSOV)					,					
			"Base.SKS_PARA",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xSEMI)	- (w762x39 * HNTx * xPAC)					,					
			"Base.MK47",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xSEMI)	- (w762x39 * HNTx * xUSA)			- (w762x39 * HNTx * HNTxNON)	- (w762x39 * HNTx * x90)	,					
			"Base.AKM_Custom",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xAUTO)	- (w762x39 * HNTx * xUSA)			- (w762x39 * HNTx * HNTxNON)	- (w762x39 * HNTx * x90)	,					
			"Base.AK74_Custom",	w545x39	 * HNTx	- (w545x39 * x545x39)	- (w545x39 * HNTx * xAUTO)	- (w545x39 * HNTx * xUSA)			- (w545x39 * HNTx * HNTxNON)	- (w545x39 * HNTx * x90)	,					
			"Base.Ots14_1A_01",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xAUTO)	- (w762x39 * HNTx * xSOV)			- (w762x39 * HNTx * HNTxNON)		,					
			"Base.Ots14_1A_02",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xAUTO)	- (w762x39 * HNTx * xSOV)			- (w762x39 * HNTx * HNTxNON)		,					
			"Base.Ots14_4A",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xAUTO)	- (w762x39 * HNTx * xSOV)			- (w762x39 * HNTx * HNTxNON)		,					
			"Base.Ots14_4A_01",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xAUTO)	- (w762x39 * HNTx * xSOV)			- (w762x39 * HNTx * HNTxNON)		,					
			"Base.Ots14_4A_03",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xAUTO)	- (w762x39 * HNTx * xSOV)			- (w762x39 * HNTx * HNTxNON)		,					
			"Base.Ots14_4A_GL",	wGREN	 * HNTx	- (wGREN * xGREN)	- (wGREN * HNTx * xAUTO)	- (wGREN * HNTx * xSOV)		- (wGREN * HNTx * CIVxMIL)	- (wGREN * HNTx * HNTxNON)		,					
			"Base.AK308",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xAUTO)	- (w308 * HNTx * xSOV)		- (w308 * HNTx * CIVxMIL)	- (w308 * HNTx * HNTxNON)	- (w308 * HNTx * x90)	,					
			"Base.SCARH",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xAUTO)	- (w308 * HNTx * xEUR)		- (w308 * HNTx * CIVxMIL)	- (w308 * HNTx * HNTxNON)	- (w308 * HNTx * x90)	,					
			"Base.SCAR20",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xAUTO)	- (w308 * HNTx * xEUR)		- (w308 * HNTx * CIVxMIL)	- (w308 * HNTx * HNTxNON)	- (w308 * HNTx * x90)	,					
			"Base.G28",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xAUTO)	- (w308 * HNTx * xEUR)		- (w308 * HNTx * CIVxMIL)	- (w308 * HNTx * HNTxNON)	- (w308 * HNTx * x90)	,					
			"Base.G3",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xAUTO)	- (w308 * HNTx * xEUR)		- (w308 * HNTx * CIVxMIL)	- (w308 * HNTx * HNTxNON)		,					
			"Base.PSG1",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xSEMI)	- (w308 * HNTx * xEUR)		- (w308 * HNTx * CIVxMIL)	- (w308 * HNTx * HNTxNON)		,					
			"Base.MSG90",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xSEMI)	- (w308 * HNTx * xEUR)		- (w308 * HNTx * CIVxMIL)	- (w308 * HNTx * HNTxNON)		,					
			"Base.Type64",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xAUTO)	- (w308 * HNTx * xPAC)			- (w308 * HNTx * HNTxNON)		,					
			"Base.FAL",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xAUTO)	- (w308 * HNTx * xEUR)			- (w308 * HNTx * HNTxNON)		,					
			"Base.FAL_PARA_Stock",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xAUTO)	- (w308 * HNTx * xEUR)			- (w308 * HNTx * HNTxNON)		,					
			"Base.FN_FNC",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xAUTO)	- (w556 * HNTx * xEUR)			- (w556 * HNTx * HNTxNON)		,					
			"Base.WA2000",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xBOLT)	- (w308 * HNTx * xEUR)					,					
			"Base.SVD",	w762x54r	 * HNTx	- (w762x54r * x762x54r)	- (w762x54r * HNTx * xSEMI)	- (w762x54r * HNTx * xSOV)					,					
			"Base.SVDK",	w762x54r	 * HNTx	- (w762x54r * x762x54r)	- (w762x54r * HNTx * xSEMI)	- (w762x54r * HNTx * xSOV)					,					
			"Base.SV_98",	w762x54r	 * HNTx	- (w762x54r * x762x54r)	- (w762x54r * HNTx * xBOLT)	- (w762x54r * HNTx * xSOV)					,					
			"Base.OTS_03_SVU",	w762x54r	 * HNTx	- (w762x54r * x762x54r)	- (w762x54r * HNTx * xBOLT)	- (w762x54r * HNTx * xSOV)			- (w762x54r * HNTx * HNTxNON)	- (w762x54r * HNTx * x90)	,					
			"Base.M14EBR",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xAUTO)	- (w308 * HNTx * xUSA)	- (w308 * HNTx * CIVxLEO)		- (w308 * HNTx * HNTxNON)	- (w308 * HNTx * x90)	,					
			"Base.M14",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xAUTO)	- (w308 * HNTx * xUSA)			- (w308 * HNTx * HNTxNON)		,					
			"Base.K14",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xBOLT)	- (w308 * HNTx * xKOR)		- (w308 * HNTx * CIVxMIL)		- (w308 * HNTx * x90)	,					
			"Base.Savage12",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xBOLT)	- (w308 * HNTx * xUSA)					,					
			"Base.Ruger_No1_3006",	w3006	 * HNTx	- (w3006 * x3006)	- (w3006 * HNTx * xBREAK)	- (w3006 * HNTx * xUSA)					,					
			"Base.M40",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xBOLT)	- (w308 * HNTx * xUSA)					,					
			"Base.M40A1",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xBOLT)	- (w308 * HNTx * xUSA)					,					
			"Base.M40A2",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xBOLT)	- (w308 * HNTx * xUSA)					,					
			"Base.M40A3",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xBOLT)	- (w308 * HNTx * xUSA)					,					
			"Base.M46_Mauser",	w762x54r	 * HNTx	- (w762x54r * x762x54r)	- (w762x54r * HNTx * xBOLT)	- (w762x54r * HNTx * xPAC)					,					
			"Base.Mosin",	w762x54r	 * HNTx	- (w762x54r * x762x54r)	- (w762x54r * HNTx * xBOLT)	- (w762x54r * HNTx * xSOV)					,					
			"Base.MosinObrez_Pistol",	w762x54r	 * HNTx	- (w762x54r * x762x54r)	- (w762x54r * HNTx * xBOLT)	- (w762x54r * HNTx * xSOV)					,					
			"Base.M1",	w3006	 * HNTx	- (w3006 * x3006)	- (w3006 * HNTx * xSEMI)	- (w3006 * HNTx * xUSA)					,					
			"Base.M1903",	w3006	 * HNTx	- (w3006 * x3006)	- (w3006 * HNTx * xBOLT)	- (w3006 * HNTx * xUSA)					,					
			"Base.BAR",	w3006	 * HNTx	- (w3006 * x3006)	- (w3006 * HNTx * xAUTO)	- (w3006 * HNTx * xUSA)			- (w3006 * HNTx * HNTxNON)		,					
			"Base.BAR_Monitor",	w3006	 * HNTx	- (w3006 * x3006)	- (w3006 * HNTx * xAUTO)	- (w3006 * HNTx * xUSA)			- (w3006 * HNTx * HNTxNON)		,					
			"Base.MAS36",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xAUTO)	- (w308 * HNTx * xEUR)			- (w308 * HNTx * HNTxNON)		,					
			"Base.MAS44",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xAUTO)	- (w308 * HNTx * xEUR)			- (w308 * HNTx * HNTxNON)		,					
			"Base.MAS49",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xAUTO)	- (w308 * HNTx * xEUR)			- (w308 * HNTx * HNTxNON)		,					
			"Base.Win_1895",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xLEVER)	- (w308 * HNTx * xUSA)					,					
			"Base.Galil",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xAUTO)	- (w308 * HNTx * xISR)			- (w308 * HNTx * HNTxNON)		,					
			"Base.Galil_Sniper",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xAUTO)	- (w308 * HNTx * xISR)			- (w308 * HNTx * HNTxNON)		,					
			"Base.Thompson_Center_3006",	w3006	 * HNTx	- (w3006 * x3006)	- (w3006 * HNTx * xBREAK)	- (w3006 * HNTx * xUSA)					,					
			"Base.Type38",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xBOLT)	- (w308 * HNTx * xPAC)		- (w308 * HNTx * CIVxMIL)			,					
			"Base.Type99",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xBOLT)	- (w308 * HNTx * xPAC)		- (w308 * HNTx * CIVxMIL)			,					
			"Base.L96",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xBOLT)	- (w308 * HNTx * xEUR)					,					
			"Base.M240",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xLMG)	- (w308 * HNTx * xUSA)		- (w308 * HNTx * CIVxMIL)	- (w308 * HNTx * HNTxNON)		,					
			"Base.G21LMG",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xLMG)	- (w308 * HNTx * xEUR)		- (w308 * HNTx * CIVxMIL)	- (w308 * HNTx * HNTxNON)	- (w308 * HNTx * x90)	,					
			"Base.K12",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xLMG)	- (w308 * HNTx * xKOR)		- (w308 * HNTx * CIVxMIL)	- (w308 * HNTx * HNTxNON)	- (w308 * HNTx * x90)	,					
			"Base.PKM",	w762x54r	 * HNTx	- (w762x54r * x762x54r)	- (w762x54r * HNTx * xLMG)	- (w762x54r * HNTx * xSOV)		- (w762x54r * HNTx * CIVxMIL)	- (w762x54r * HNTx * HNTxNON)		,					
			"Base.MG42",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xLMG)	- (w308 * HNTx * xEUR)		- (w308 * HNTx * CIVxMIL)	- (w308 * HNTx * HNTxNON)		,					
			"Base.M60",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xLMG)	- (w308 * HNTx * xUSA)		- (w308 * HNTx * CIVxMIL)	- (w308 * HNTx * HNTxNON)		,					
			"Base.MK43",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xLMG)	- (w308 * HNTx * xUSA)		- (w308 * HNTx * CIVxMIL)	- (w308 * HNTx * HNTxNON)	- (w308 * HNTx * x90)	,					
			"Base.RPD",	w762x39	 * HNTx	- (w762x39 * x762x39)	- (w762x39 * HNTx * xLMG)	- (w762x39 * HNTx * xSOV)		- (w762x39 * HNTx * CIVxMIL)	- (w762x39 * HNTx * HNTxNON)		,					
			"Base.DSHK_Fold",	wBMG	 * HNTx	- (wBMG * xBMG)	- (wBMG * HNTx * xMINI)	- (wBMG * HNTx * xSOV)		- (wBMG * HNTx * CIVxMIL)	- (wBMG * HNTx * HNTxNON)		,					
			"Base.BOAR",	wBMG	 * HNTx	- (wBMG * xBMG)	- (wBMG * HNTx * xBREAK)	- (wBMG * HNTx * xUSA)					,					
			"Base.EDM96",	wBMG	 * HNTx	- (wBMG * xBMG)	- (wBMG * HNTx * xBOLT)	- (wBMG * HNTx * xUSA)				- (wBMG * HNTx * x90)	,					
			"Base.M82",	wBMG	 * HNTx	- (wBMG * xBMG)	- (wBMG * HNTx * xSEMI)	- (wBMG * HNTx * xUSA)					,					
			"Base.BFG50",	wBMG	 * HNTx	- (wBMG * xBMG)	- (wBMG * HNTx * xBREAK)	- (wBMG * HNTx * xUSA)				- (wBMG * HNTx * x90)	,					
			"Base.Harris50",	wBMG	 * HNTx	- (wBMG * xBMG)	- (wBMG * HNTx * xBOLT)	- (wBMG * HNTx * xUSA)					,					
			"Base.TAC50",	wBMG	 * HNTx	- (wBMG * xBMG)	- (wBMG * HNTx * xBOLT)	- (wBMG * HNTx * xUSA)					,					
			"Base.CheyTac50",	wBMG	 * HNTx	- (wBMG * xBMG)	- (wBMG * HNTx * xBOLT)	- (wBMG * HNTx * xUSA)				- (wBMG * HNTx * x90)	,					
			"Base.Gepard_M6",	wBMG	 * HNTx	- (wBMG * xBMG)	- (wBMG * HNTx * xBOLT)	- (wBMG * HNTx * xEUR)					,					
			"Base.OSV_96",	wBMG	 * HNTx	- (wBMG * xBMG)	- (wBMG * HNTx * xBOLT)	- (wBMG * HNTx * xSOV)				- (wBMG * HNTx * x90)	,					
			"Base.Ash",	wBMG	 * HNTx	- (wBMG * xBMG)	- (wBMG * HNTx * xAUTO)	- (wBMG * HNTx * xSOV)		- (wBMG * HNTx * CIVxMIL)	- (wBMG * HNTx * HNTxNON)	- (wBMG * HNTx * x90)	,					
			"Base.VSSK",	wBMG	 * HNTx	- (wBMG * xBMG)	- (wBMG * HNTx * xBOLT)	- (wBMG * HNTx * xSOV)		- (wBMG * HNTx * CIVxMIL)	- (wBMG * HNTx * HNTxNON)	- (wBMG * HNTx * x90)	,					
			"Base.SW_M500",	wBMG	 * HNTx	- (wBMG * xBMG)	- (wBMG * HNTx * xREV)	- (wBMG * HNTx * xUSA)				- (wBMG * HNTx * x90)	,					
			"Base.SPAS12_Fixed",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xSEMI)	- (w12g * HNTx * xEUR)	- (w12g * HNTx * CIVxLEO)				,					
			"Base.SPAS12_Fold",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xSEMI)	- (w12g * HNTx * xEUR)	- (w12g * HNTx * CIVxLEO)				,					
			"Base.Origin",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xSEMI)	- (w12g * HNTx * xUSA)		- (w12g * HNTx * CIVxMIL)	- (w12g * HNTx * HNTxNON)	- (w12g * HNTx * x90)	,					
			"Base.SPAS_15",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xSEMI)	- (w12g * HNTx * xEUR)		- (w12g * HNTx * CIVxMIL)	- (w12g * HNTx * HNTxNON)		,					
			"Base.USAS_12",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xAUTO)	- (w12g * HNTx * xKOR)		- (w12g * HNTx * CIVxMIL)	- (w12g * HNTx * HNTxNON)		,					
			"Base.Shorty_Pistol",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xUSA)	- (w12g * HNTx * CIVxLEO)		- (w12g * HNTx * HNTxNON)	- (w12g * HNTx * x90)	,					
			"Base.R11_87",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xSEMI)	- (w12g * HNTx * xUSA)					,					
			"Base.M870",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xUSA)					,					
			"Base.M1897",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xUSA)					,					
			"Base.DT11",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xBREAK)	- (w12g * HNTx * xEUR)					,					
			"Base.Coachgun",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xBREAK)	- (w12g * HNTx * xUSA)					,					
			"Base.Terminator",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xBREAK)	- (w12g * HNTx * xUSA)					,					
			"Base.SIX12",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xREV)	- (w12g * HNTx * xUSA)	- (w12g * HNTx * CIVxLEO)		- (w12g * HNTx * HNTxNON)	- (w12g * HNTx * x90)	,					
			"Base.SIX12SD",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xREV)	- (w12g * HNTx * xUSA)		- (w12g * HNTx * CIVxMIL)	- (w12g * HNTx * HNTxNON)	- (w12g * HNTx * x90)	,					
			"Base.M870_Wingmaster",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xUSA)					,					
			"Base.M870_Police",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xUSA)	- (w12g * HNTx * CIVxLEO)		- (w12g * HNTx * HNTxNON)		,					
			"Base.M870_MCS",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xUSA)	- (w12g * HNTx * CIVxLEO)		- (w12g * HNTx * HNTxNON)		,					
			"Base.M870_CQB",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xUSA)	- (w12g * HNTx * CIVxLEO)		- (w12g * HNTx * HNTxNON)		,					
			"Base.M870_Breaching_Pistol",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xUSA)	- (w12g * HNTx * CIVxLEO)		- (w12g * HNTx * HNTxNON)		,					
			"Base.M870_Express",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xUSA)					,					
			"Base.Ithaca_M37",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xUSA)					,					
			"Base.AUTO_5",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xSEMI)	- (w12g * HNTx * xUSA)					,					
			"Base.A400",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xSEMI)	- (w12g * HNTx * xEUR)				- (w12g * HNTx * x90)	,					
			"Base.M1014",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xSEMI)	- (w12g * HNTx * xEUR)				- (w12g * HNTx * x90)	,					
			"Base.M1014_Fold",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xSEMI)	- (w12g * HNTx * xEUR)		- (w12g * HNTx * CIVxMIL)		- (w12g * HNTx * x90)	,					
			"Base.M1014_Wick",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xSEMI)	- (w12g * HNTx * xEUR)		- (w12g * HNTx * CIVxMIL)		- (w12g * HNTx * x90)	,					
			"Base.DAO12",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xREV)	- (w12g * HNTx * xREST)	- (w12g * HNTx * CIVxLEO)		- (w12g * HNTx * HNTxNON)		,					
			"Base.M1887",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xLEVER)	- (w12g * HNTx * xUSA)					,					
			"Base.M1208",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xREV)	- (w12g * HNTx * xUSA)			- (w12g * HNTx * HNTxNON)	- (w12g * HNTx * x90)	,					
			"Base.M1212",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xREV)	- (w12g * HNTx * xUSA)	- (w12g * HNTx * CIVxLEO)		- (w12g * HNTx * HNTxNON)	- (w12g * HNTx * x90)	,					
			"Base.M1216",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xREV)	- (w12g * HNTx * xUSA)	- (w12g * HNTx * CIVxLEO)		- (w12g * HNTx * HNTxNON)	- (w12g * HNTx * x90)	,					
			"Base.AA12",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xAUTO)	- (w12g * HNTx * xUSA)		- (w12g * HNTx * CIVxMIL)	- (w12g * HNTx * HNTxNON)	- (w12g * HNTx * x90)	,					
			"Base.CAWS",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xAUTO)	- (w12g * HNTx * xEUR)		- (w12g * HNTx * CIVxMIL)	- (w12g * HNTx * HNTxNON)		,					
			"Base.ROYAL_SXS",	w10g	 * HNTx	- (w10g * x10g)	- (w10g * HNTx * xBREAK)	- (w10g * HNTx * xEUR)					,					
			"Base.KS23",	w4g	 * HNTx	- (w4g * x4g)	- (w4g * HNTx * xPUMP)	- (w4g * HNTx * xSOV)					,					
			"Base.KS23_S_Pistol",	w4g	 * HNTx	- (w4g * x4g)	- (w4g * HNTx * xPUMP)	- (w4g * HNTx * xSOV)					,					
			"Base.Triple_Crown",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xBREAK)	- (w12g * HNTx * xEUR)					,					
			"Base.Moss500_20",	w20g	 * HNTx	- (w20g * x20g)	- (w20g * HNTx * xPUMP)	- (w20g * HNTx * xUSA)					,					
			"Base.10855_Silver",	w20g	 * HNTx	- (w20g * x20g)	- (w20g * HNTx * xSEMI)	- (w20g * HNTx * xEUR)					,					
			"Base.Colt1855",	w20g	 * HNTx	- (w20g * x20g)	- (w20g * HNTx * xREV)	- (w20g * HNTx * xUSA)					,					
			"Base.TOZ106",	w20g	 * HNTx	- (w20g * x20g)	- (w20g * HNTx * xBOLT)	- (w20g * HNTx * xSOV)					,					
			"Base.TOZ194_Pistol",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xSOV)					,					
			"Base.Saiga12",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xAUTO)	- (w12g * HNTx * xSOV)			- (w12g * HNTx * HNTxNON)	- (w12g * HNTx * x90)	,					
			"Base.Saiga12_Long",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xAUTO)	- (w12g * HNTx * xSOV)				- (w12g * HNTx * x90)	,					
			"Base.Saiga12_Tromix",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xAUTO)	- (w12g * HNTx * xSOV)		- (w12g * HNTx * CIVxMIL)	- (w12g * HNTx * HNTxNON)	- (w12g * HNTx * x90)	,					
			"Base.MP133",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xSOV)				- (w12g * HNTx * x90)	,					
			"Base.MP133S_Pistol",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xSOV)				- (w12g * HNTx * x90)	,					
			"Base.KSG",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xUSA)				- (w12g * HNTx * x90)	,					
			"Base.KSG25",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xUSA)				- (w12g * HNTx * x90)	,					
			"Base.UTS15",	w12g	 * HNTx	- (w12g * x12g)	- (w12g * HNTx * xPUMP)	- (w12g * HNTx * xREST)				- (w12g * HNTx * x90)	,					
			"Base.EX41_HE",	wGREN	 * HNTx		- (wGREN * HNTx * xGREN)	- (wGREN * HNTx * xUSA)		- (wGREN * HNTx * CIVxMIL)	- (wGREN * HNTx * HNTxNON)		,					
			"Base.Federal_HE",	wGREN	 * HNTx		- (wGREN * HNTx * xGREN)	- (wGREN * HNTx * xUSA)		- (wGREN * HNTx * CIVxMIL)	- (wGREN * HNTx * HNTxNON)		,					
			"Base.M32_HE",	wGREN	 * HNTx		- (wGREN * HNTx * xGREN)	- (wGREN * HNTx * xUSA)		- (wGREN * HNTx * CIVxMIL)	- (wGREN * HNTx * HNTxNON)		,					
			"Base.GM94_HE",	wGREN	 * HNTx		- (wGREN * HNTx * xGREN)	- (wGREN * HNTx * xSOV)		- (wGREN * HNTx * CIVxMIL)	- (wGREN * HNTx * HNTxNON)	- (wGREN * HNTx * x90)	,					
			"Base.K11",	wGREN	 * HNTx	- (wGREN * HNTx * xAUTO)	- (wGREN * HNTx * xGREN)	- (wGREN * HNTx * xKOR)		- (wGREN * HNTx * CIVxMIL)	- (wGREN * HNTx * HNTxNON)	- (wGREN * HNTx * x90)	,					
			"Base.M72_LAW",	wGREN	 * HNTx		- (wGREN * HNTx * xGREN)	- (wGREN * HNTx * xUSA)		- (wGREN * HNTx * CIVxMIL)	- (wGREN * HNTx * HNTxNON)		,					
			"Base.RPG_7",	wGREN	 * HNTx		- (wGREN * HNTx * xGREN)	- (wGREN * HNTx * xSOV)		- (wGREN * HNTx * CIVxMIL)	- (wGREN * HNTx * HNTxNON)		,					
			"Base.XM214",	w556	 * HNTx	- (w556 * x556)	- (w556 * HNTx * xMINI)	- (w556 * HNTx * xUSA)		- (w556 * HNTx * CIVxMIL)	- (w556 * HNTx * HNTxNON)		,					
			"Base.GAU17",	w308	 * HNTx	- (w308 * x308)	- (w308 * HNTx * xMINI)	- (w308 * HNTx * xUSA)		- (w308 * HNTx * CIVxMIL)	- (w308 * HNTx * HNTxNON)		,					
			"Base.GAU19",	wBMG	 * HNTx	- (wBMG * xBMG)	- (wBMG * HNTx * xMINI)	- (wBMG * HNTx * xUSA)		- (wBMG * HNTx * CIVxMIL)	- (wBMG * HNTx * HNTxNON)		,					
			"Base.TAC15",	wBOW	 * HNTx		- (wBOW * HNTx * xBOW)	- (wBOW * HNTx * xUSA)					,					
			"Base.HortonScout_125",	wBOW	 * HNTx		- (wBOW * HNTx * xBOW)	- (wBOW * HNTx * xUSA)					,					
			"Base.MissionMXB_400",	wBOW	 * HNTx		- (wBOW * HNTx * xBOW)	- (wBOW * HNTx * xUSA)					,					
			"Base.TenPointTurbo_XLT",	wBOW	 * HNTx		- (wBOW * HNTx * xBOW)	- (wBOW * HNTx * xUSA)					,					
			"Base.HZRedback_RTS",	wBOW	 * HNTx		- (wBOW * HNTx * xBOW)	- (wBOW * HNTx * xUSA)					,					
			"Base.Genesis_X_Bow",	wBOW	 * HNTx		- (wBOW * HNTx * xBOW)	- (wBOW * HNTx * xUSA)					,					
			"Base.Genesis_Bow",	wBOW	 * HNTx		- (wBOW * HNTx * xBOW)	- (wBOW * HNTx * xUSA)					,					
			"Base.Genesis_Mini_Bow",	wBOW	 * HNTx		- (wBOW * HNTx * xBOW)	- (wBOW * HNTx * xUSA)					,					
			"Base.BowTechSR_350",	wBOW	 * HNTx		- (wBOW * HNTx * xBOW)	- (wBOW * HNTx * xUSA)					,					
			"Base.HoytSpectra_1000",	wBOW	 * HNTx		- (wBOW * HNTx * xBOW)	- (wBOW * HNTx * xUSA)					,					
			"Base.SlingShot_Rock",	wBOW	 * HNTx		- (wBOW * HNTx * xBOW)	- (wBOW * HNTx * xUSA)					,					
			"Base.WristRocket_Rock",	wBOW	 * HNTx		- (wBOW * HNTx * xBOW)	- (wBOW * HNTx * xUSA)					,					
			"Base.M2A1",	wFLAME	 * HNTx		- (wFLAME * HNTx * xFLAME)	- (wFLAME * HNTx * xUSA)		- (wFLAME * HNTx * CIVxMIL)	- (wFLAME * HNTx * HNTxNON)		,					
			"Base.Musk",	wFLAME	 * HNTx		- (wFLAME * HNTx * xFLAME)	- (wFLAME * HNTx * xUSA)			- (wFLAME * HNTx * HNTxNON)	- (wFLAME * HNTx * x90)	,					
		},																
		dontSpawnAmmo = 		 HNTammo	,													
	},																	
																		
	HuntParts = {																	
		rolls =	HNTRollPART	,														
		items = {																
			"Base.Launcher",	Part		- (wGREN * xGREN)		- (Part * xUSA)		- (Part * CIVxMIL)	- (Part * HNTxNON)		,					
			"Base.Launcher2",	Part		- (wGREN * xGREN)		- (Part * xSOV)		- (Part * CIVxMIL)	- (Part * HNTxNON)		,					
			"Base.Bipod",	Part		- (Part * xPart)							,					
			"Base.Ammobelt",	Part		- (Part * xPart)							,					
			"Base.Sling_1",	Part		- (Part * xPart)							,					
			"Base.Sling_2",	Part		- (Part * xPart)							,					
			"Base.Sling_3",	Part		- (Part * xPart)					- (Part * HNTxNON)		,					
			"Base.ForeGrip",	Part		- (Part * xPart)							,					
			"Base.Grip_Magpul",	Part		- (Part * xPart)						- (Part * x90)	,					
			"Base.Grip_MLOK",	Part		- (Part * xPart)						- (Part * x90)	,					
			"Base.Grip_TG",	Part		- (Part * xPart)						- (Part * x90)	,					
			"Base.Grip_BCM",	Part		- (Part * xPart)						- (Part * x90)	,					
			"Base.Grip_Fold",	Part		- (Part * xPart)							,					
			"Base.Light_Small",	Light		- (Light * xLight)							,					
			"Base.Light_Large",	Light		- (Light * xLight)							,					
			"Base.Light_Medium_M952V",	Light		- (Light * xLight)							,					
			"Base.Laser_Green",	Light		- (Light * xLight)					- (Light * HNTxNON)		,					
			"Base.Laser_Red",	Light		- (Light * xLight)					- (Light * HNTxNON)		,					
			"Base.Laser_DVAL",	Light		- (Light * xLight)			- (Light * CIVxLEO)		- (Light * HNTxNON)		,					
			"Base.Laser_PEQ15",	Light		- (Light * xLight)				- (Light * CIVxMIL)	- (Light * HNTxNON)		,					
			"Base.Light_Small_Socom",	Light		- (Light * xLight)				- (Light * CIVxMIL)	- (Light * HNTxNON)		,					
			"Base.Light_Small_TLR_7AH",	Light		- (Light * xLight)							,					
			"Base.Light_Medium_M900",	Light		- (Light * xLight)							,					
			"Base.Suppressor_Pistol",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)			,					
			"Base.Suppressor_Rifle",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)			,					
			"Base.Suppressor_Shotgun",	Suppress		- (Suppress * xSuppress)							,					
			"Base.Suppressor_BMG",	Suppress		- (Suppress * xSuppress)	- (wBMG * xBMG)			- (Suppress * CIVxMIL)			,					
			"Base.Suppressor_Socom_Pistol",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)			,					
			"Base.Suppressor_NorthStar_Pistol",	Suppress		- (Suppress * xSuppress)							,					
			"Base.Suppressor_PBS1_Rifle",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)			,					
			"Base.Suppressor_PBS4_Rifle",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)			,					
			"Base.Suppressor_ROME_BMG",	Suppress		- (Suppress * xSuppress)	- (wBMG * xBMG)			- (Suppress * CIVxMIL)			,					
			"Base.Bayonet_M4",	Part		- (Part * xPart)					- (Part * HNTxNON)		,					
			"Base.Bayonet_AK",	Part		- (Part * xPart)		- (Part * xSOV)			- (Part * HNTxNON)		,					
			"Base.Bayonet_M1917",	Part		- (Part * xPart)					- (Part * HNTxNON)		,					
			"Base.Bayonet_Type30",	Part		- (Part * xPart)					- (Part * HNTxNON)		,					
			"Base.Choke_Full",	Part		- (Part * xPart)							,					
			"Base.Choke_Full_Dbl",	Part		- (Part * xPart)							,					
			"Base.Compensator",	Part		- (Part * xPart)							,					
			"Base.LinearComp_Noveske",	Part		- (Part * xPart)							,					
			"Base.MuzzleBrake",	Part		- (Part * xPart)							,					
			"Base.MuzzleBrake_DK1",	Part		- (Part * xPart)							,					
			"Base.MuzzleBrake_DK2",	Part		- (Part * xPart)							,					
			"Base.Pad",	Part		- (Part * xPart)							,					
			"Base.Carrier_12g",	Part		- (Part * xPart)							,					
			"Base.GhostRing",	Optic		- (Optic * xOptic)					- (Optic * HNTxNON)		,					
			"Base.Sight_MicroDot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * HNTxNON)	- (Optic * x90)	,					
			"Base.Sight_RaceDot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * HNTxNON)		,					
			"Base.Sight_Phantom_XL",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * HNTxNON)	- (Optic * x90)	,					
			"Base.Sight_OKP7_Reflex",	Optic		- (Optic * xOptic)		- (Optic * xSOV)			- (Optic * HNTxNON)	- (Optic * x90)	,					
			"Base.Sight_SRS",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				- (Optic * x90)	,					
			"Base.Sight_EOTech",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_3xEOTech",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_4xACOG",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_4xACOG_ECO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_6xELCAN",	Optic		- (Optic * xOptic)		- (Optic * xEUR)					,					
			"Base.Sight_6xHensoldt",	Optic		- (Optic * xOptic)		- (Optic * xEUR)					,					
			"Base.Sight_KOBRA",	Optic		- (Optic * xOptic)		- (Optic * xSOV)					,					
			"Base.Scope_4xPSO",	Optic		- (Optic * xOptic)		- (Optic * xSOV)					,					
			"Base.Scope_12xPSO",	Optic		- (Optic * xOptic)		- (Optic * xSOV)					,					
			"Base.Scope_1-4x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Scope_Trijicon_1-6x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Scope_TANGO6T_1-6x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Scope_20x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_Thermal",	Optic		- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * CIVxMIL)			,					
			"Base.Sight_Thermal_AK",	Optic		- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * CIVxMIL)			,					
			"Base.Sight_Aimpoint",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_Aimpoint_Dot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_Fiber_Shotgun",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_Mepro_M21",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				- (Optic * x90)	,					
			"Base.Sight_Mepro_MOR",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				- (Optic * x90)	,					
			"Base.Sight_UH1",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				- (Optic * x90)	,					
			"Base.Sight_C79",	Optic		- (Optic * xOptic)		- (Optic * xEUR)					,					
			"Base.Sight_SUSAT",	Optic		- (Optic * xOptic)		- (Optic * xEUR)					,					
			"Base.Sight_Raven",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_G28_Scope",	Optic		- (Optic * xOptic)		- (Optic * xEUR)					,					
			"Base.Scope_ATACR7_F1",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Scope_ATACR7_F1r",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_ACRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				- (Optic * x90)	,					
			"Base.Sight_MRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				- (Optic * x90)	,					
			"Base.Sight_SRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				- (Optic * x90)	,					
			"Base.Sight_Nikon",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_M8",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_VX3",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_1P87",	Optic		- (Optic * xOptic)		- (Optic * xSOV)					,					
			"Base.Sight_1P63",	Optic		- (Optic * xOptic)		- (Optic * xSOV)					,					
			"Base.Sight_Brownells",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_L2",	Optic		- (Optic * xOptic)		- (Optic * xEUR)					,					
			"Base.Sight_Malcom",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_LUX",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_NO32",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_PKAS",	Optic		- (Optic * xOptic)		- (Optic * xSOV)					,					
			"Base.Sight_PU",	Optic		- (Optic * xOptic)		- (Optic * xSOV)					,					
			"Base.Sight_XPS",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				- (Optic * x90)	,					
			"Base.Sight_PVS4",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_Burris_NV",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_Armasight_NV",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Barrel_308",	w308		- (w308 * xPart)	- (w308 * xBREAK)	- (w308 * xUSA)					,					
			"Base.Barrel_3006",	w3006		- (w3006 * xPart)	- (w3006 * xBREAK)	- (w3006 * xUSA)					,					
			"Base.Barrel_4570",	w4570		- (w4570 * xPart)	- (w4570 * xBREAK)	- (w4570 * xUSA)					,					
			"Base.Barrel_357",	w357		- (w357 * xPart)	- (w357 * xBREAK)	- (w357 * xUSA)					,					
			"Base.Barrel_357_Short",	w357		- (w357 * xPart)	- (w357 * xBREAK)	- (w357 * xUSA)					,					
			"Base.Barrel_45LC",	w45LC		- (w45LC * xPart)	- (w45LC * xBREAK)	- (w45LC * xUSA)					,					
			"Base.Barrel_45LC_Short",	w45LC		- (w45LC * xPart)	- (w45LC * xBREAK)	- (w45LC * xUSA)					,					
			"Base.TriggerGroup_AR",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)			- (Part * HNTxNON)		,					
			"Base.TriggerGroup_AK",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xSOV)			- (Part * HNTxNON)		,					
			"Base.TriggerGroup_HK",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xEUR)			- (Part * HNTxNON)		,					
			"Base.TriggerGroup_FN",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xEUR)			- (Part * HNTxNON)		,					
			"Base.Switch_Striker_Black",	Part 		- (Part * xPart)	- (Part  * xAUTO)	- (Part  * xUSA)			- (Part  * HNTxNON)	- (Part  * x90)	,					
			"Base.Switch_Striker_Red",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)			- (Part * HNTxNON)	- (Part * x90)	,					
			"Base.Switch_Striker_Blue",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)			- (Part * HNTxNON)	- (Part * x90)	,					
			"Base.Switch_Striker_Green",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)			- (Part * HNTxNON)	- (Part * x90)	,					
			"Base.Grip_G10_Blue",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * HNTxNON)		,					
			"Base.Grip_G10_Brown",	Part		- (Part * xPart)		- (Part * xUSA)					,					
			"Base.Grip_G10_Black",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * HNTxNON)		,					
			"Base.Grip_G10_Red",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * HNTxNON)		,					
			"Base.Grip_G10_Green",	Part		- (Part * xPart)		- (Part * xUSA)					,					
			"Base.Grip_G10_Pink",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * HNTxNON)		,					
			"Base.Grip_Alloy_Black",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * HNTxNON)		,					
			"Base.Grip_Alloy_Silver",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * HNTxNON)		,					
			"Base.Grip_Alloy_Blue",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * HNTxNON)		,					
			"Base.Grip_Alloy_Red",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * HNTxNON)		,					
			"Base.Grip_Wood",	Part		- (Part * xPart)		- (Part * xUSA)					,					
			"Base.Grip_Punisher",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * HNTxNON)		,					
			"Base.Grip_Spartan",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * HNTxNON)		,					
			"Base.Grip_Ivory",	Part		- (Part * xPart)		- (Part * xUSA)					,					
			"Base.Grip_Carbon",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * HNTxNON)		,					
			"Base.38Speed",	StdMag	* w357 - (StdMag * xStdMag)	- (w357 * x357)	- (StdMag * xREV)						,					
			"Base.44Speed",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)	- (StdMag * xREV)						,					
			"Base.SRM1208_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * HNTxNON)	- (StdMag * x90)	,					
			"Base.SRM1212_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * HNTxNON)	- (StdMag * x90)	,					
			"Base.SRM1216_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * HNTxNON)	- (StdMag * x90)	,					
			"Base.SIX12_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * HNTxNON)	- (StdMag * x90)	,					
			"Base.CP33Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)		- (StdMag * xUSA)			- (StdMag * HNTxNON)	- (StdMag * x90)	,					
			"Base.CP33_17MagBase",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)		- (ExtMag * xUSA)			- (ExtMag * HNTxNON)	- (ExtMag * x90)	,					
			"Base.22Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)							,					
			"Base.22ExtClip",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)							,					
			"Base.380Clip",	StdMag	* w380 - (StdMag * xStdMag)	- (w380 * x380)					- (StdMag * HNTxNON)		,					
			"Base.380ExtClip",	ExtMag	* w380 - (ExtMag * xExtMag)	- (w380 * x380)					- (ExtMag * HNTxNON)		,					
			"Base.9mmSSClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)							,					
			"Base.9mmSSExtClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)							,					
			"Base.9mmClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)							,					
			"Base.9mmExtClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)					- (ExtMag * HNTxNON)		,					
			"Base.45DSClip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)							,					
			"Base.45DSExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)					- (ExtMag * HNTxNON)		,					
			"Base.45Clip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)							,					
			"Base.45ExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)					- (ExtMag * HNTxNON)		,					
			"Base.44Clip",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)							,					
			"Base.50Clip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)							,					
			"Base.223StdClip",	StdMag	* w223 - (StdMag * xStdMag)	- (w223 * x223)							,					
			"Base.223ExtClip",	ExtMag	* w223 - (ExtMag * xExtMag)	- (w223 * x223)					- (ExtMag * HNTxNON)		,					
			"Base.556Clip",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)					- (StdMag * HNTxNON)		,					
			"Base.308StdClip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)							,					
			"Base.308StdClip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)							,					
			"Base.308ExtClip",	ExtMag	* w308 - (ExtMag * xExtMag)	- (w308 * x308)					- (ExtMag * HNTxNON)		,					
			"Base.3006ExtClip",	ExtMag	* w3006 - (ExtMag * xExtMag)	- (w3006 * x3006)		- (ExtMag * xUSA)			- (ExtMag * HNTxNON)		,					
			"Base.SVDClip",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)		- (StdMag * xSOV)					,					
			"Base.ASHClip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xSOV)		- (StdMag * CIVxMIL)	- (StdMag * HNTxNON)	- (StdMag * x90)	,					
			"Base.M82Clip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xUSA)					,					
			"Base.M1Clip",	StdMag	* w3006 - (StdMag * xStdMag)	- (w3006 * x3006)		- (StdMag * xUSA)					,					
			"Base.SKSClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)		- (StdMag * xSOV)					,					
			"Base.1903Clip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)							,					
			"Base.545StdClip",	StdMag	* w545x39 - (StdMag * xStdMag)	- (w545x39 * x545x39)		- (StdMag * xSOV)			- (StdMag * HNTxNON)		,					
			"Base.AKClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)					- (StdMag * HNTxNON)		,					
			"Base.ASVALClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)		- (ExtMag * xSOV)					,					
			"Base.VSSClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)		- (StdMag * xSOV)					,					
			"Base.57Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)			- (StdMag * HNTxNON)	- (StdMag * x90)	,					
			"Base.P90Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)			- (StdMag * HNTxNON)	- (StdMag * x90)	,					
			"Base.22Drum",	DrumMag	* w22 - (DrumMag * xDrumMag)	- (w22 * x22)					- (DrumMag * HNTxNON)		,					
			"Base.9mmDrum",	DrumMag	* w9 - (DrumMag * xDrumMag)	- (w9 * x9)					- (DrumMag * HNTxNON)		,					
			"Base.45Drum",	DrumMag	* w45 - (DrumMag * xDrumMag)	- (w45 * x45)					- (DrumMag * HNTxNON)		,					
			"Base.556Drum",	DrumMag	* w556 - (DrumMag * xDrumMag)	- (w556 * x556)					- (DrumMag * HNTxNON)		,					
			"Base.545Drum",	DrumMag	* w545x39 - (DrumMag * xDrumMag)	- (w545x39 * x545x39)		- (DrumMag * xSOV)			- (DrumMag * HNTxNON)		,					
			"Base.762Drum",	DrumMag	* w762x39 - (DrumMag * xDrumMag)	- (w762x39 * x762x39)					- (DrumMag * HNTxNON)		,					
			"Base.12gDrum",	DrumMag	* w12g - (DrumMag * xDrumMag)	- (w12g * x12g)				- (DrumMag * CIVxMIL)	- (DrumMag * HNTxNON)		,					
			"Base.308Belt",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wLMG * xLMG)			- (StdMag * CIVxMIL)	- (StdMag * HNTxNON)		,					
			"Base.556Belt",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wLMG * xLMG)			- (StdMag * CIVxMIL)	- (StdMag * HNTxNON)		,					
			"Base.762x39Belt",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)	- (wLMG * xLMG)			- (StdMag * CIVxMIL)	- (StdMag * HNTxNON)		,					
			"Base.762x54rBelt",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)	- (wLMG * xLMG)	- (StdMag * xSOV)		- (StdMag * CIVxMIL)	- (StdMag * HNTxNON)		,					
			"Base.556MiniCan",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * CIVxMIL)	- (StdMag * HNTxNON)		,					
			"Base.308MiniCan",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * CIVxMIL)	- (StdMag * HNTxNON)		,					
			"Base.50MiniCan",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * CIVxMIL)	- (StdMag * HNTxNON)		,					
			"Base.M2A1_Tank",	ExtMag	* wFLAME - (ExtMag * xExtMag)	- (wFLAME * xFLAME)		- (ExtMag * xUSA)		- (ExtMag * CIVxMIL)	- (ExtMag * HNTxNON)		,					
			"Base.M2A1_Can",	StdMag	* wFLAME - (StdMag * xStdMag)	- (wFLAME * xFLAME)		- (StdMag * xUSA)		- (StdMag * CIVxMIL)	- (StdMag * HNTxNON)		,					
			"Base.M2A1_Can",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)					,					
			"Base.Standard_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)					,					
			"Base.Large_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)					,					
			"Base.RussianMachete",	LgKnife	 * HNTx	- (LgKnife * xLgKnife)		- (LgKnife * xSOV)					,					
			"Base.BGMachete",	LgKnife	 * HNTx	- (LgKnife * xLgKnife)		- (LgKnife * xUSA)					,					
			"Base.RamboKnife",	LgKnife	 * HNTx	- (LgKnife * xLgKnife)		- (LgKnife * xUSA)					,					
			"Base.Butterfly",	SmKnife	 * HNTx	- (SmKnife * xSmKnife)		- (SmKnife * xPAC)					,					
			"Base.PushDagger",	SmKnife	 * HNTx	- (SmKnife * xSmKnife)		- (SmKnife * xUSA)					,					
			"Base.Karambit",	SmKnife	 * HNTx	- (SmKnife * xSmKnife)		- (SmKnife * xPAC)					,					
			"Base.ThrowingKnife",	SmKnife	 * HNTx	- (SmKnife * xSmKnife)		- (SmKnife * xUSA)					,					
			"Base.NinjaStar",	SmKnife	 * HNTx	- (SmKnife * xSmKnife)		- (SmKnife * xPAC)					,					
			"Base.Tactical_Axe",	Axe	 * HNTx	- (Axe * xAxe)		- (Axe * xUSA)					,					
			"Base.Tactical_Sickle",	Axe	 * HNTx	- (Axe * xAxe)		- (Axe * xUSA)					,					
			"Base.Trench_Axe",	Axe	 * HNTx	- (Axe * xAxe)		- (Axe * xEUR)					,					
			"Base.Broad_Axe",	Axe	 * HNTx	- (Axe * xAxe)		- (Axe * xEUR)					,					
			"Base.DingDong",	Blunt	 * HNTx	- (Blunt * xBlunt)		- (Blunt * xUSA)			- (Blunt * HNTx * HNTxNON)		,					
			"Base.MilitaryBaton",	Blunt	 * HNTx	- (Blunt * xBlunt)		- (Blunt * xUSA)			- (Blunt * HNTx * HNTxNON)		,					
			"Base.ASP_B",	Blunt	 * HNTx	- (Blunt * xBlunt)		- (Blunt * xUSA)			- (Blunt * HNTx * HNTxNON)		,					
			"Base.KillBill",	Sword	 * HNTx	- (Sword * xSword)		- (Sword * xPAC)			- (Sword * HNTx * HNTxNON)		,					
			"Base.CH_WarSword",	Sword	 * HNTx	- (Sword * xSword)		- (Sword * xPAC)			- (Sword * HNTx * HNTxNON)		,					
			"Base.Conan_Sword",	Sword	 * HNTx	- (Sword * xSword)		- (Sword * xUSA)			- (Sword * HNTx * HNTxNON)		,					
		}																
	},																	
	HuntAmmo = {																	
		rolls =	HNTRollAMMO	,														
		items = {																
			"Base.AmmoCan30_22",	AmmoCan		* w22	- (AmmoCan * x22)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_380",	AmmoCan		* w380	- (AmmoCan * x380)	- (AmmoCan * xAmmoCan)			- (AmmoCan * HNTxNON)		,					
			"Base.AmmoCan30_57",	AmmoCan		* w57	- (AmmoCan * x57)	- (AmmoCan * xAmmoCan)			- (AmmoCan * HNTxNON)	- (AmmoCan * x90)	,					
			"Base.AmmoCan30_9",	AmmoCan		* w9	- (AmmoCan * x9)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_38",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_357",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_45",	AmmoCan		* w45	- (AmmoCan * x45)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_44",	AmmoCan		* w44	- (AmmoCan * x44)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_45LC",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_4570",	AmmoCan		* w4570	- (AmmoCan * x4570)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_50MAG",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)				- (AmmoCan * x90)	,					
			"Base.AmmoCan50_223",	AmmoCan		* w223	- (AmmoCan * x223)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_556",	AmmoCan		* w556	- (AmmoCan * x556)	- (AmmoCan * xAmmoCan)			- (AmmoCan * HNTxNON)		,					
			"Base.AmmoCan50_762x39",	AmmoCan		* w762x39	- (AmmoCan * x762x39)	- (AmmoCan * xAmmoCan)			- (AmmoCan * HNTxNON)		,					
			"Base.AmmoCan50_545x39",	AmmoCan		* w545x39	- (AmmoCan * x545x39)	- (AmmoCan * xAmmoCan)			- (AmmoCan * HNTxNON)		,					
			"Base.AmmoCan50_762x54r",	AmmoCan		* w762x54r	- (AmmoCan * x762x54r)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_308",	AmmoCan		* w308	- (AmmoCan * x308)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_3006",	AmmoCan		* w3006	- (AmmoCan * x3006)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_410",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_20",	AmmoCan		* w20g	- (AmmoCan * x20g)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_12",	AmmoCan		* w12g	- (AmmoCan * x12g)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_10",	AmmoCan		* w10g	- (AmmoCan * x10g)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_4",	AmmoCan		* w4g	- (AmmoCan * x4g)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_50",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * CIVxMIL)	- (AmmoCan * HNTxNON)		,					
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * CIVxMIL)	- (AmmoCan * HNTxNON)		,					
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * CIVxMIL)	- (AmmoCan * HNTxNON)		,					
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * CIVxMIL)	- (AmmoCan * HNTxNON)		,					
			"Base.AmmoCan50_ROCKET",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * CIVxMIL)	- (AmmoCan * HNTxNON)		,					
			"Base.BB177Box",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)					,					
			"Base.CO2_Cartridge_Box",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)					,					
			"Base.PB68Bag",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)			- (AmmoBox * HNTxNON)		,					
			"Base.Bullets22Box",	AmmoBox		* w22	- (AmmoBox * x22)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets380Box",	AmmoBox		* w380	- (AmmoBox * x380)	- (AmmoBox * xAmmoBox)			- (AmmoBox * HNTxNON)		,					
			"Base.Bullets57Box",	AmmoBox		* w57	- (AmmoBox * x57)	- (AmmoBox * xAmmoBox)			- (AmmoBox * HNTxNON)	- (AmmoBox * x90)	,					
			"Base.Bullets9mmBox",	AmmoBox		* w9	- (AmmoBox * x9)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets38Box",	AmmoBox		* w357	- (AmmoBox * x357)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets357Box",	AmmoBox		* w357	- (AmmoBox * x357)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets45Box",	AmmoBox		* w45	- (AmmoBox * x45)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets44Box",	AmmoBox		* w44	- (AmmoBox * x44)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets45LCBox",	AmmoBox		* w45LC	- (AmmoBox * x45LC)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets4570Box",	AmmoBox		* w4570	- (AmmoBox * x4570)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets50MAGBox",	AmmoBox		* wBMG	- (AmmoBox * xBMG)	- (AmmoBox * xAmmoBox)				- (AmmoBox * x90)	,					
			"Base.223Box",	AmmoBox		* w223	- (AmmoBox * x223)	- (AmmoBox * xAmmoBox)					,					
			"Base.556Box",	AmmoBox		* w556	- (AmmoBox * x556)	- (AmmoBox * xAmmoBox)					,					
			"Base.762x39Box",	AmmoBox		* w762x39	- (AmmoBox * x762x39)	- (AmmoBox * xAmmoBox)					,					
			"Base.545x39Box",	AmmoBox		* w545x39	- (AmmoBox * x545x39)	- (AmmoBox * xAmmoBox)			- (AmmoBox * HNTxNON)		,					
			"Base.762x54rBox",	AmmoBox		* w762x54r	- (AmmoBox * x762x54r)	- (AmmoBox * xAmmoBox)					,					
			"Base.308Box",	AmmoBox		* w308	- (AmmoBox * x308)	- (AmmoBox * xAmmoBox)					,					
			"Base.3006Box",	AmmoBox		* w3006	- (AmmoBox * x3006)	- (AmmoBox * xAmmoBox)					,					
			"Base.410gShotgunShellsBox",	AmmoBox		* w45LC	- (AmmoBox * x45LC)	- (AmmoBox * xAmmoBox)					,					
			"Base.20gShotgunShellsBox",	AmmoBox		* w20g	- (AmmoBox * x20g)	- (AmmoBox * xAmmoBox)					,					
			"Base.ShotgunShellsBox",	AmmoBox		* w12g	- (AmmoBox * x12g)	- (AmmoBox * xAmmoBox)					,					
			"Base.10gShotgunShellsBox",	AmmoBox		* w10g	- (AmmoBox * x10g)	- (AmmoBox * xAmmoBox)					,					
			"Base.4gShotgunShellsBox",	AmmoBox		* w4g	- (AmmoBox * x4g)	- (AmmoBox * xAmmoBox)					,					
			"Base.50BMGBox",	AmmoBox		* wBMG	- (AmmoBox * xBMG)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bolt_Bear",	AmmoBox		* wBOW	- (AmmoBox * xBOW)						,					
			"Base.Bolt_Bear_Pack",	AmmoBox		* wBOW	- (AmmoBox * xBOW)	- (AmmoBox * xAmmoBox)					,					
			"Base.Arrow_Fiberglass",	AmmoBox		* wBOW	- (AmmoBox * xBOW)						,					
			"Base.Arrow_Fiberglass_Pack",	AmmoBox		* wBOW	- (AmmoBox * xBOW)	- (AmmoBox * xAmmoBox)					,					
			"Base.40HERound",	AmmoBox		* wGREN	- (AmmoBox * xGREN)			- (AmmoBox * CIVxMIL)	- (AmmoBox * HNTxNON)		,					
			"Base.40INCRound",	AmmoBox		* wGREN	- (AmmoBox * xGREN)			- (AmmoBox * CIVxMIL)	- (AmmoBox * HNTxNON)		,					
			"Base.HERocket",	AmmoBox		* wGREN	- (AmmoBox * xGREN)			- (AmmoBox * CIVxMIL)	- (AmmoBox * HNTxNON)		,					
			"Base.Flare",	AmmoBox		* wFLAME	- (AmmoBox * xFLAME)						,					
			"Base.Grenade_Fragmentation",	AmmoBox	* HNTx	* wGREN	- (AmmoBox * xGREN)			- (AmmoBox* HNTx * CIVxMIL)	- (AmmoBox* HNTx * HNTxNON)		,					
			"Base.Grenade_Stick",	AmmoBox	* HNTx	* wGREN	- (AmmoBox * xGREN)			- (AmmoBox* HNTx * CIVxMIL)	- (AmmoBox* HNTx * HNTxNON)		,					
			"Base.Explosive_Landmine",	AmmoBox	* HNTx	* wGREN	- (AmmoBox * xGREN)			- (AmmoBox* HNTx * CIVxMIL)	- (AmmoBox* HNTx * HNTxNON)		,					
			"Base.Explosive_Claymore_P",	AmmoBox	* HNTx	* wGREN	- (AmmoBox * xGREN)			- (AmmoBox* HNTx * CIVxMIL)	- (AmmoBox* HNTx * HNTxNON)		,					
			"Base.PolyCan_Red_SPASClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w12g	- (w12g * x12g)				- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Red_12gDrum",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w12g	- (w12g * x12g)				- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Red_38Speed",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w357	- (w357 * x357)	- (PolyCan * xREV)					,					
			"Base.PolyCan_Red_44Speed",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w44	- (w44 * x44)	- (PolyCan * xREV)					,					
			"Base.PolyCan_Blue_9mmSSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)						,					
			"Base.PolyCan_Blue_9mmSSExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)				- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Blue_9mmClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)						,					
			"Base.PolyCan_Blue_9mmExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)				- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Blue_9mmDrum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)				- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Blue_45DSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)						,					
			"Base.PolyCan_Blue_45DSExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)				- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Blue_45Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)				- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Blue_45Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)						,					
			"Base.PolyCan_Blue_45ExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)				- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Brown_556Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w556	- (w556 * x556)				- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Brown_556Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w556	- (w556 * x556)				- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Brown_AKClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)				- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Brown_762Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)				- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Brown_545StdClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w545x39	- (w545x39 * x545x39)				- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Brown_545Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w545x39	- (w545x39 * x545x39)				- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Beige_308StdClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)						,					
			"Base.PolyCan_Beige_308ExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)				- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Beige_BMG",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* wBMG	- (wBMG * xBMG)			- (PolyCan * CIVxMIL)	- (PolyCan * HNTxNON)		,					
			"Base.PolyCan_Beige_K11",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* wGREN	- (wGREN * xGREN)	- (PolyCan * xKOR)		- (PolyCan * CIVxMIL)	- (PolyCan * HNTxNON)	- (PolyCan * x90)	,					
			"Base.PolyCan_Beige_SVDClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x54r	- (w762x54r * x762x54r)	- (PolyCan * xSOV)					,					
			"Base.PolyCan_Beige_SKSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)	- (PolyCan * xSOV)					,					
			"Base.PolyCan_Beige_M1Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w3006	- (w3006 * x3006)	- (PolyCan * xUSA)					,					
			"Base.PolyCan_Beige_1903Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)						,					
		}																
	},																	
																		
	SurplusGuns = {																	
		rolls =	SURRollGUN	,														
		items = {																
			"Base.UmarexSS",	wBB	 * SURx	- (wBB * xBB)		- (wBB * SURx * xUSA)			- (wBB * SURx * SURxNON)	- (wBB * SURx * x90)	,					
			"Base.Benjamin_M397",	wBB	 * SURx	- (wBB * xBB)		- (wBB * SURx * xUSA)					,					
			"Base.RWS_M34",	wBB	 * SURx	- (wBB * xBB)		- (wBB * SURx * xUSA)			- (wBB * SURx * SURxNON)	- (wBB * SURx * x90)	,					
			"Base.VM_68",	wBB	 * SURx	- (wBB * xBB)		- (wBB * SURx * xUSA)					,					
			"Base.Auto_Cocker",	wBB	 * SURx	- (wBB * xBB)		- (wBB * SURx * xUSA)					,					
			"Base.Tippmann_SL68",	wBB	 * SURx	- (wBB * xBB)		- (wBB * SURx * xUSA)					,					
			"Base.Sheridan_PGP",	wBB	 * SURx	- (wBB * xBB)		- (wBB * SURx * xUSA)					,					
			"Base.CP33",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSEMI)	- (w22 * SURx * xUSA)			- (w22 * SURx * SURxNON)	- (w22 * SURx * x90)	,					
			"Base.Ruger_MK4",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSEMI)	- (w22 * SURx * xUSA)				- (w22 * SURx * x90)	,					
			"Base.Ruger_MK4_2245",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSEMI)	- (w22 * SURx * xUSA)				- (w22 * SURx * x90)	,					
			"Base.Buckmark",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSEMI)	- (w22 * SURx * xUSA)					,					
			"Base.Buckmark_Long",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSEMI)	- (w22 * SURx * xUSA)					,					
			"Base.Buckmark_Carbine",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSEMI)	- (w22 * SURx * xUSA)					,					
			"Base.HK4_22",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSEMI)	- (w22 * SURx * xEUR)			- (w22 * SURx * SURxNON)		,					
			"Base.ZIP22",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSEMI)	- (w22 * SURx * xUSA)			- (w22 * SURx * SURxNON)	- (w22 * SURx * x90)	,					
			"Base.Ruger_1022",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSEMI)	- (w22 * SURx * xUSA)					,					
			"Base.Marlin_M70",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSEMI)	- (w22 * SURx * xUSA)					,					
			"Base.Marlin_M70_A26",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSEMI)	- (w22 * SURx * xUSA)					,					
			"Base.Cricket_22",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xBOLT)	- (w22 * SURx * xUSA)					,					
			"Base.AR7",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSEMI)	- (w22 * SURx * xUSA)					,					
			"Base.Calico_22LR",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSMG)	- (w22 * SURx * xUSA)					,					
			"Base.American180",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSMG)	- (w22 * SURx * xUSA)					,					
			"Base.Winchester1903",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xLEVER)	- (w22 * SURx * xUSA)					,					
			"Base.KRISS22_MK11_Stock",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSMG)	- (w22 * SURx * xUSA)			- (w22 * SURx * SURxNON)	- (w22 * SURx * x90)	,					
			"Base.KRISS22_CRB_Stock",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSMG)	- (w22 * SURx * xUSA)			- (w22 * SURx * SURxNON)	- (w22 * SURx * x90)	,					
			"Base.CMR_30",	w22	 * SURx	- (w22 * x22)	- (w22 * SURx * xSEMI)	- (w22 * SURx * xUSA)			- (w22 * SURx * SURxNON)	- (w22 * SURx * x90)	,					
			"Base.G42",	w380	 * SURx	- (w380 * x380)	- (w380 * SURx * xSEMI)	- (w380 * SURx * xEUR)			- (w380 * SURx * SURxNON)	- (w380 * SURx * x90)	,					
			"Base.LCP380",	w380	 * SURx	- (w380 * x380)	- (w380 * SURx * xSEMI)	- (w380 * SURx * xUSA)			- (w380 * SURx * SURxNON)	- (w380 * SURx * x90)	,					
			"Base.BodyGuard380",	w380	 * SURx	- (w380 * x380)	- (w380 * SURx * xSEMI)	- (w380 * SURx * xUSA)			- (w380 * SURx * SURxNON)	- (w380 * SURx * x90)	,					
			"Base.Bersa85F",	w380	 * SURx	- (w380 * x380)	- (w380 * SURx * xSEMI)	- (w380 * SURx * xREST)					,					
			"Base.Colt1903",	w380	 * SURx	- (w380 * x380)	- (w380 * SURx * xSEMI)	- (w380 * SURx * xUSA)					,					
			"Base.Makarov380",	w380	 * SURx	- (w380 * x380)	- (w380 * SURx * xSEMI)	- (w380 * SURx * xSOV)					,					
			"Base.PPK",	w380	 * SURx	- (w380 * x380)	- (w380 * SURx * xSEMI)	- (w380 * SURx * xEUR)					,					
			"Base.HK4_380",	w380	 * SURx	- (w380 * x380)	- (w380 * SURx * xSEMI)	- (w380 * SURx * xEUR)			- (w380 * SURx * SURxNON)		,					
			"Base.VP70",	w380	 * SURx	- (w380 * x380)	- (w380 * SURx * xSMG)	- (w380 * SURx * xEUR)					,					
			"Base.VP70_Stock",	w380	 * SURx	- (w380 * x380)	- (w380 * SURx * xSMG)	- (w380 * SURx * xEUR)					,					
			"Base.Vz61_Fixed",	w380	 * SURx	- (w380 * x380)	- (w380 * SURx * xSMG)	- (w380 * SURx * xCZE)					,					
			"Base.Vz61_Fold",	w380	 * SURx	- (w380 * x380)	- (w380 * SURx * xSMG)	- (w380 * SURx * xCZE)					,					
			"Base.BT380_Stock",	w380	 * SURx	- (w380 * x380)	- (w380 * SURx * xSEMI)	- (w380 * SURx * xEUR)			- (w380 * SURx * SURxNON)	- (w380 * SURx * x90)	,					
			"Base.FN_57", 	w57	 * SURx	- (w57 * x57)	- (w57 * SURx * xSEMI)	- (w57 * SURx * xEUR)			- (w57 * SURx * SURxNON)	- (w57 * SURx * x90)	,					
			"Base.FN_57_MK2", 	w57	 * SURx	- (w57 * x57)	- (w57 * SURx * xSEMI)	- (w57 * SURx * xEUR)			- (w57 * SURx * SURxNON)	- (w57 * SURx * x90)	,					
			"Base.FN_P90",	w57	 * SURx	- (w57 * x57)	- (w57 * SURx * xSMG)	- (w57 * SURx * xEUR)	- (w57 * SURx * CIVxLEO)		- (w57 * SURx * SURxNON)	- (w57 * SURx * x90)	,					
			"Base.FN_PS90",	w57	 * SURx	- (w57 * x57)	- (w57 * SURx * xSMG)	- (w57 * SURx * xEUR)	- (w57 * SURx * CIVxLEO)		- (w57 * SURx * SURxNON)	- (w57 * SURx * x90)	,					
			"Base.MPA57DMG",	w57	 * SURx	- (w57 * x57)	- (w57 * SURx * xSMG)	- (w57 * SURx * xUSA)			- (w57 * SURx * SURxNON)	- (w57 * SURx * x90)	,					
			"Base.MPA57DMG_Carbine",	w57	 * SURx	- (w57 * x57)	- (w57 * SURx * xSMG)	- (w57 * SURx * xUSA)			- (w57 * SURx * SURxNON)	- (w57 * SURx * x90)	,					
			"Base.AR57_PDW",	w57	 * SURx	- (w57 * x57)	- (w57 * SURx * xSMG)	- (w57 * SURx * xUSA)			- (w57 * SURx * SURxNON)	- (w57 * SURx * x90)	,					
			"Base.AR57_PDW_Long",	w57	 * SURx	- (w57 * x57)	- (w57 * SURx * xSMG)	- (w57 * SURx * xUSA)			- (w57 * SURx * SURxNON)	- (w57 * SURx * x90)	,					
			"Base.Ruger_PCC",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xUSA)			- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.Ruger_PCC_R",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xUSA)			- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.Ruger_PCC_M",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xUSA)			- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.HiPoint",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xUSA)					,					
			"Base.HiPoint_Carbine",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xUSA)					,					
			"Base.STAR_BM", 	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xREST)					,					
			"Base.M39",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xUSA)					,					
			"Base.MK22",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xUSA)					,					
			"Base.G43",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xEUR)		- (w9 * SURx * CIVxMIL)	- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.CZ75",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xCZE)					,					
			"Base.CZ_75b",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xCZE)					,					
			"Base.CZ_75_SP01_SS",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xCZE)					,					
			"Base.CZ_75_SP01",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xCZE)					,					
			"Base.CZ_75_Compact",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xCZE)					,					
			"Base.CZ_75_P01",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xCZE)					,					
			"Base.CZ_2075",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xCZE)			- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.CZ_75_Shadow",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xCZE)			- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.CZ_75_Czechmate",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xCZE)			- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.EAA_Witness_9",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xEUR)					,					
			"Base.EAA_Witness_Long_9",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xEUR)					,					
			"Base.G17",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xEUR)		- (w9 * SURx * CIVxMIL)	- (w9 * SURx * SURxNON)		,					
			"Base.G18",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)		- (w9 * SURx * CIVxMIL)	- (w9 * SURx * SURxNON)		,					
			"Base.G34", 	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xUSA)			- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.K5",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xKOR)		- (w9 * SURx * CIVxMIL)	- (w9 * SURx * SURxNON)		,					
			"Base.RPD_92FS",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xEUR)	- (w9 * SURx * CIVxLEO)				,					
			"Base.M9",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xEUR)					,					
			"Base.M9A3",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xEUR)				- (w9 * SURx * x90)	,					
			"Base.B93R",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)		- (w9 * SURx * CIVxMIL)	- (w9 * SURx * SURxNON)		,					
			"Base.M5906",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xUSA)					,					
			"Base.XD9",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xUSA)	- (w9 * SURx * CIVxLEO)		- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.MP9",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xUSA)	- (w9 * SURx * CIVxLEO)		- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.P226",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xEUR)	- (w9 * SURx * CIVxLEO)		- (w9 * SURx * SURxNON)		,					
			"Base.APS",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xSOV)					,					
			"Base.Makarov",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xSOV)					,					
			"Base.PB",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xSOV)					,					
			"Base.Luger",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xEUR)					,					
			"Base.Luger_WW1",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xEUR)					,					
			"Base.Luger_Carbine",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xEUR)					,					
			"Base.UZI", 	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xREST)					,					
			"Base.UZI_Wood",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xREST)					,					
			"Base.UZI_Micro",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xREST)					,					
			"Base.BT9_Fold",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)			- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.UMP9_Stock",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)	- (w9 * SURx * CIVxLEO)		- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.SUB2000",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xUSA)			- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.MP5_Fixed",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)	- (w9 * SURx * CIVxLEO)		- (w9 * SURx * SURxNON)		,					
			"Base.MP5_Stock",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)	- (w9 * SURx * CIVxLEO)		- (w9 * SURx * SURxNON)		,					
			"Base.MP5SD6_Fixed",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)		- (w9 * SURx * CIVxMIL)	- (w9 * SURx * SURxNON)		,					
			"Base.MP5SD6_Stock",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)		- (w9 * SURx * CIVxMIL)	- (w9 * SURx * SURxNON)		,					
			"Base.EVO_Fold",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xCZE)			- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.K7_Stock",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xKOR)		- (w9 * SURx * CIVxMIL)	- (w9 * SURx * SURxNON)		,					
			"Base.AUG9",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)		- (w9 * SURx * CIVxMIL)	- (w9 * SURx * SURxNON)		,					
			"Base.KG9",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xUSA)					,					
			"Base.Calico_M900_Fold",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xUSA)					,					
			"Base.Calico_M950_Pistol",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xUSA)					,					
			"Base.Bizon2_01_Stock",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xSOV)					,					
			"Base.VSS",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xSOV)					,					
			"Base.ASVAL",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xSOV)					,					
			"Base.M1Carbine",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSEMI)	- (w9 * SURx * xUSA)					,					
			"Base.M2Carbine",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xUSA)					,					
			"Base.M635",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xUSA)	- (w9 * SURx * CIVxLEO)		- (w9 * SURx * SURxNON)		,					
			"Base.M635S",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xUSA)	- (w9 * SURx * CIVxLEO)		- (w9 * SURx * SURxNON)		,					
			"Base.M635SD",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xUSA)		- (w9 * SURx * CIVxMIL)	- (w9 * SURx * SURxNON)		,					
			"Base.MP7",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)	- (w9 * SURx * CIVxLEO)		- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.Jatimatic",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)					,					
			"Base.Sten",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)					,					
			"Base.Sten_MK2",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)					,					
			"Base.Sten_MK2SD",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)					,					
			"Base.STAR_Z45_Stock",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)					,					
			"Base.STAR_Z45_Fixed",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xEUR)					,					
			"Base.KRISS9_Stock",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xUSA)			- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.KRISS9_MLOK_Stock",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xUSA)			- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.JW3_TTI_MPX",	w9	 * SURx	- (w9 * x9)	- (w9 * SURx * xSMG)	- (w9 * SURx * xUSA)			- (w9 * SURx * SURxNON)	- (w9 * SURx * x90)	,					
			"Base.M5238",	w357	 * SURx	- (w357 * x357)	- (w357 * SURx * xSEMI)	- (w357 * SURx * xUSA)					,					
			"Base.Taurus856",	w357	 * SURx	- (w357 * x357)	- (w357 * SURx * xREV)	- (w357 * SURx * xREST)			- (w357 * SURx * SURxNON)	- (w357 * SURx * x90)	,					
			"Base.Colt_Service38",	w357	 * SURx	- (w357 * x357)	- (w357 * SURx * xREV)	- (w357 * SURx * xUSA)					,					
			"Base.GP100_2",	w357	 * SURx	- (w357 * x357)	- (w357 * SURx * xREV)	- (w357 * SURx * xUSA)					,					
			"Base.GP100_4",	w357	 * SURx	- (w357 * x357)	- (w357 * SURx * xREV)	- (w357 * SURx * xUSA)					,					
			"Base.GP100_6",	w357	 * SURx	- (w357 * x357)	- (w357 * SURx * xREV)	- (w357 * SURx * xUSA)					,					
			"Base.K6S",	w357	 * SURx	- (w357 * x357)	- (w357 * SURx * xREV)	- (w357 * SURx * xUSA)			- (w357 * SURx * SURxNON)	- (w357 * SURx * x90)	,					
			"Base.Rhino_200DS",	w357	 * SURx	- (w357 * x357)	- (w357 * SURx * xREV)	- (w357 * SURx * xEUR)			- (w357 * SURx * SURxNON)	- (w357 * SURx * x90)	,					
			"Base.Rhino_40DS",	w357	 * SURx	- (w357 * x357)	- (w357 * SURx * xREV)	- (w357 * SURx * xEUR)			- (w357 * SURx * SURxNON)	- (w357 * SURx * x90)	,					
			"Base.Rhino_60DS",	w357	 * SURx	- (w357 * x357)	- (w357 * SURx * xREV)	- (w357 * SURx * xEUR)			- (w357 * SURx * SURxNON)	- (w357 * SURx * x90)	,					
			"Base.SW_327",	w357	 * SURx	- (w357 * x357)	- (w357 * SURx * xREV)	- (w357 * SURx * xUSA)			- (w357 * SURx * SURxNON)	- (w357 * SURx * x90)	,					
			"Base.M1936",	w357	 * SURx	- (w357 * x357)	- (w357 * SURx * xREV)	- (w357 * SURx * xUSA)					,					
			"Base.NEF_Handi_38",	w357	 * SURx	- (w357 * x357)	- (w357 * SURx * xBREAK)	- (w357 * SURx * xUSA)					,					
			"Base.Marlin_1894",	w357	 * SURx	- (w357 * x357)	- (w357 * SURx * xLEVER)	- (w357 * SURx * xUSA)					,					
			"Base.CZ97B",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xCZE)			- (w45 * SURx * SURxNON)	- (w45 * SURx * x90)	,					
			"Base.EAA_Witness_45",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xEUR)					,					
			"Base.EAA_Witness_Long_45",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xEUR)					,					
			"Base.G21",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xEUR)			- (w45 * SURx * SURxNON)		,					
			"Base.XD4",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xUSA)			- (w45 * SURx * SURxNON)	- (w45 * SURx * x90)	,					
			"Base.MP45",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xUSA)			- (w45 * SURx * SURxNON)	- (w45 * SURx * x90)	,					
			"Base.P220",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xEUR)			- (w45 * SURx * SURxNON)		,					
			"Base.M4506",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xUSA)					,					
			"Base.HK_MK23",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xEUR)			- (w45 * SURx * SURxNON)		,					
			"Base.HK_USP",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xEUR)			- (w45 * SURx * SURxNON)		,					
			"Base.HK_USP_Match",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xEUR)			- (w45 * SURx * SURxNON)		,					
			"Base.PULP_1911",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xUSA)					,					
			"Base.PARA1911",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xUSA)					,					
			"Base.AMT1911",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xUSA)					,					
			"Base.AMT1911_Long",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xUSA)					,					
			"Base.M1911_Carbine",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xUSA)					,					
			"Base.Colt1911",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xUSA)					,					
			"Base.Colt_Kimber",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xUSA)			- (w45 * SURx * SURxNON)	- (w45 * SURx * x90)	,					
			"Base.Colt_Commander",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSEMI)	- (w45 * SURx * xUSA)					,					
			"Base.UMP45_Stock",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSMG)	- (w45 * SURx * xEUR)	- (w45 * SURx * CIVxLEO)		- (w45 * SURx * SURxNON)	- (w45 * SURx * x90)	,					
			"Base.MAC10_Fold",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSMG)	- (w45 * SURx * xUSA)					,					
			"Base.KRISS_Stock",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSMG)	- (w45 * SURx * xUSA)			- (w45 * SURx * SURxNON)	- (w45 * SURx * x90)	,					
			"Base.Commando",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xBOLT)	- (w45 * SURx * xEUR)					,					
			"Base.Thompson",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSMG)	- (w45 * SURx * xUSA)					,					
			"Base.Thompson_1928",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSMG)	- (w45 * SURx * xUSA)					,					
			"Base.M2Hyde",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSMG)	- (w45 * SURx * xUSA)					,					
			"Base.Model55_Fold",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSMG)	- (w45 * SURx * xUSA)					,					
			"Base.Model50",	w45	 * SURx	- (w45 * x45)	- (w45 * SURx * xSMG)	- (w45 * SURx * xUSA)					,					
			"Base.Colt_Navy_1851",	w44	 * SURx	- (w44 * x44)	- (w44 * SURx * xREV)	- (w44 * SURx * xUSA)					,					
			"Base.M29_44",	w44	 * SURx	- (w44 * x44)	- (w44 * SURx * xREV)	- (w44 * SURx * xUSA)					,					
			"Base.M29_44Carbine",	w44	 * SURx	- (w44 * x44)	- (w44 * SURx * xREV)	- (w44 * SURx * xUSA)					,					
			"Base.Automag",	w44	 * SURx	- (w44 * x44)	- (w44 * SURx * xSEMI)	- (w44 * SURx * xUSA)					,					
			"Base.DEagle",	w44	 * SURx	- (w44 * x44)	- (w44 * SURx * xSEMI)	- (w44 * SURx * xISR)					,					
			"Base.DEagle_Long",	w44	 * SURx	- (w44 * x44)	- (w44 * SURx * xSEMI)	- (w44 * SURx * xISR)					,					
			"Base.DEagle_Hawk",	wBMG	 * SURx	- (wBMG * xBMG)	- (wBMG * SURx * xSEMI)	- (wBMG * SURx * xISR)					,					
			"Base.Winchester1866",	w45LC	 * SURx	- (w44 * x44)	- (w45LC * SURx * xLEVER)	- (w45LC * SURx * xUSA)					,					
			"Base.Win_1894",	w44	 * SURx	- (w44 * x44)	- (w44 * SURx * xLEVER)	- (w44 * SURx * xUSA)					,					
			"Base.Colt_Service45",	w45LC	 * SURx	- (w45LC * x45LC)	- (w45LC * SURx * xREV)	- (w45LC * SURx * xUSA)					,					
			"Base.Judge_45LC",	w45LC	 * SURx	- (w45LC * x45LC)	- (w45LC * SURx * xREV)	- (w45LC * SURx * xREST)			- (w45LC * SURx * SURxNON)	- (w45LC * SURx * x90)	,					
			"Base.Judge513_45LC",	w45LC	 * SURx	- (w45LC * x45LC)	- (w45LC * SURx * xREV)	- (w45LC * SURx * xREST)			- (w45LC * SURx * SURxNON)	- (w45LC * SURx * x90)	,					
			"Base.Judge513_Long_45LC",	w45LC	 * SURx	- (w45LC * x45LC)	- (w45LC * SURx * xREV)	- (w45LC * SURx * xREST)			- (w45LC * SURx * SURxNON)	- (w45LC * SURx * x90)	,					
			"Base.TXS_804_45LC",	w45LC	 * SURx	- (w45LC * x45LC)	- (w45LC * SURx * xREV)	- (w45LC * SURx * xREST)					,					
			"Base.Winchester1873",	w45LC	 * SURx	- (w45LC * x45LC)	- (w45LC * SURx * xLEVER)	- (w45LC * SURx * xUSA)					,					
			"Base.Sako85",	w223	 * SURx	- (w223 * x223)	- (w223 * SURx * xBOLT)	- (w223 * SURx * xEUR)			- (w223 * SURx * SURxNON)		,					
			"Base.MINI14",	w223	 * SURx	- (w223 * x223)	- (w223 * SURx * xSEMI)	- (w223 * SURx * xUSA)					,					
			"Base.MINI14_Stock",	w223	 * SURx	- (w223 * x223)	- (w223 * SURx * xSEMI)	- (w223 * SURx * xUSA)					,					
			"Base.MINI14_T",	w223	 * SURx	- (w223 * x223)	- (w223 * SURx * xSEMI)	- (w223 * SURx * xUSA)	- (w223 * SURx * CIVxLEO)		- (w223 * SURx * SURxNON)		,					
			"Base.Viper",	w223	 * SURx	- (w223 * x223)	- (w223 * SURx * xLEVER)	- (w223 * SURx * xREST)			- (w223 * SURx * SURxNON)	- (w223 * SURx * x90)	,					
			"Base.Carbon15_97",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)	- (w556 * SURx * CIVxLEO)				,					
			"Base.CAR15SMG",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)	- (w556 * SURx * CIVxLEO)				,					
			"Base.CAR15_Survival",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)	- (w556 * SURx * CIVxLEO)				,					
			"Base.XM8Compact_Pistol",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)	- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.XM8",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)	- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.SCARSC_Stock",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)	- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.SCARL",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)	- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.SCAR_B",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)	- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.G33",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)			,					
			"Base.G36",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)		- (w556 * SURx * x90)	,					
			"Base.G36C",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)		- (w556 * SURx * x90)	,					
			"Base.G36KV",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)		- (w556 * SURx * x90)	,					
			"Base.G11K3",	w57	 * SURx	- (w57 * x57)	- (w57 * SURx * xAUTO)	- (w57 * SURx * xEUR)		- (w57 * SURx * CIVxMIL)	- (w57 * SURx * SURxNON)	- (w57 * SURx * x90)	,					
			"Base.MK18",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)		- (w556 * SURx * CIVxMIL)		- (w556 * SURx * x90)	,					
			"Base.AK5C",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)			,					
			"Base.M16A1",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)					,					
			"Base.M16A2",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)					,					
			"Base.M16A3",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)					,					
			"Base.M723",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)					,					
			"Base.XM117",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)		- (w556 * SURx * CIVxMIL)		- (w556 * SURx * x90)	,					
			"Base.H416",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)	- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.M4",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)		- (w556 * SURx * CIVxMIL)			,					
			"Base.M4A1",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)		- (w556 * SURx * CIVxMIL)			,					
			"Base.ADAR",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xSOV)			- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.K2C1_PH",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xKOR)		- (w556 * SURx * CIVxMIL)	- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.K2_ADVK2",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xKOR)		- (w556 * SURx * CIVxMIL)	- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.K2_Grunt",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xKOR)		- (w556 * SURx * CIVxMIL)	- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.K1A_DEV",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xKOR)		- (w556 * SURx * CIVxMIL)	- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.K1DEV",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xKOR)		- (w556 * SURx * CIVxMIL)	- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.K2_C1",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xKOR)		- (w556 * SURx * CIVxMIL)	- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.K2_1",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xKOR)		- (w556 * SURx * CIVxMIL)			,					
			"Base.K2_203",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xKOR)		- (w556 * SURx * CIVxMIL)			,					
			"Base.K1_1",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xKOR)		- (w556 * SURx * CIVxMIL)			,					
			"Base.DR_200",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xKOR)	- (w556 * SURx * CIVxLEO)		- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.LVOA_C",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xSEMI)	- (w556 * SURx * xUSA)			- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.AAC_Honey",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)		- (w556 * SURx * CIVxMIL)		- (w556 * SURx * x90)	,					
			"Base.AAC_HoneySD",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)		- (w556 * SURx * CIVxMIL)		- (w556 * SURx * x90)	,					
			"Base.Bush_AR15_MOE",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xSEMI)	- (w556 * SURx * xUSA)					,					
			"Base.Bush_XM15",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xSEMI)	- (w556 * SURx * xUSA)					,					
			"Base.Bush_XM15_Custom",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xSEMI)	- (w556 * SURx * xUSA)					,					
			"Base.MCX_Virtus",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)			- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.MCX_VirtusPatrol",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)			- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.MCX_Socom",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)			- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.MCX_Spear",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xSEMI)	- (w556 * SURx * xEUR)			- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.ColtM16",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)					,					
			"Base.M16Wood",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)					,					
			"Base.M16Tape",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)					,					
			"Base.FAMAS",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)			,					
			"Base.FAMAS_G2",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)			,					
			"Base.FAMAS_Felin",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)			,					
			"Base.AUG",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)			- (w556 * SURx * SURxNON)		,					
			"Base.AUG_A3",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)			- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.M85_Stock",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xSOV)					,					
			"Base.AN94",	w545x39	 * SURx	- (w545x39 * x545x39)	- (w545x39 * SURx * xAUTO)	- (w545x39 * SURx * xSOV)					,					
			"Base.AK74",	w545x39	 * SURx	- (w545x39 * x545x39)	- (w545x39 * SURx * xAUTO)	- (w545x39 * SURx * xSOV)					,					
			"Base.AKS74",	w545x39	 * SURx	- (w545x39 * x545x39)	- (w545x39 * SURx * xAUTO)	- (w545x39 * SURx * xSOV)					,					
			"Base.AKS74U",	w545x39	 * SURx	- (w545x39 * x545x39)	- (w545x39 * SURx * xAUTO)	- (w545x39 * SURx * xSOV)					,					
			"Base.AK74_Alpha",	w545x39	 * SURx	- (w545x39 * x545x39)	- (w545x39 * SURx * xAUTO)	- (w545x39 * SURx * xSOV)		- (w545x39 * SURx * CIVxMIL)	- (w545x39 * SURx * SURxNON)	- (w545x39 * SURx * x90)	,					
			"Base.AK12",	w545x39	 * SURx	- (w545x39 * x545x39)	- (w545x39 * SURx * xAUTO)	- (w545x39 * SURx * xSOV)		- (w545x39 * SURx * CIVxMIL)	- (w545x39 * SURx * SURxNON)	- (w545x39 * SURx * x90)	,					
			"Base.AK12_New",	w545x39	 * SURx	- (w545x39 * x545x39)	- (w545x39 * SURx * xAUTO)	- (w545x39 * SURx * xSOV)		- (w545x39 * SURx * CIVxMIL)	- (w545x39 * SURx * SURxNON)	- (w545x39 * SURx * x90)	,					
			"Base.RPK74",	w545x39	 * SURx	- (w545x39 * x545x39)	- (w545x39 * SURx * xLMG)	- (w545x39 * SURx * xSOV)					,					
			"Base.RPK16",	w545x39	 * SURx	- (w545x39 * x545x39)	- (w545x39 * SURx * xLMG)	- (w545x39 * SURx * xSOV)				- (w545x39 * SURx * x90)	,					
			"Base.L85",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)			,					
			"Base.L85A2",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)		- (w556 * SURx * x90)	,					
			"Base.L86",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)			,					
			"Base.L22",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)		- (w556 * SURx * x90)	,					
			"Base.F2000",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)			- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.Tavor",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xISR)			- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.AR18",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xUSA)					,					
			"Base.Type20",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xPAC)		- (w556 * SURx * CIVxMIL)		- (w556 * SURx * x90)	,					
			"Base.Type89",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xPAC)		- (w556 * SURx * CIVxMIL)			,					
			"Base.QBZ_95",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xPAC)		- (w556 * SURx * CIVxMIL)		- (w556 * SURx * x90)	,					
			"Base.Shrike",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xLMG)	- (w556 * SURx * xUSA)		- (w556 * SURx * CIVxMIL)	- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.XM8LMG",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xLMG)	- (w556 * SURx * xEUR)		- (w556 * SURx * CIVxMIL)	- (w556 * SURx * SURxNON)	- (w556 * SURx * x90)	,					
			"Base.M249",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xLMG)	- (w556 * SURx * xUSA)		- (w556 * SURx * CIVxMIL)			,					
			"Base.M249E3",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xLMG)	- (w556 * SURx * xUSA)		- (w556 * SURx * CIVxMIL)		- (w556 * SURx * x90)	,					
			"Base.K3LMG",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xLMG)	- (w556 * SURx * xKOR)		- (w556 * SURx * CIVxMIL)			,					
			"Base.AK47",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xAUTO)	- (w762x39 * SURx * xSOV)					,					
			"Base.AKM",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xAUTO)	- (w762x39 * SURx * xSOV)					,					
			"Base.AK103",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xAUTO)	- (w762x39 * SURx * xSOV)				- (w762x39 * SURx * x90)	,					
			"Base.MD65_Stock",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xAUTO)	- (w762x39 * SURx * xSOV)					,					
			"Base.AKMS_Stock",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xAUTO)	- (w762x39 * SURx * xSOV)					,					
			"Base.Vz58",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xAUTO)	- (w762x39 * SURx * xCZE)					,					
			"Base.Vz58_Stock",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xAUTO)	- (w762x39 * SURx * xCZE)					,					
			"Base.Vz58_Mini_Stock",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xAUTO)	- (w762x39 * SURx * xCZE)					,					
			"Base.SKS",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xSEMI)	- (w762x39 * SURx * xSOV)					,					
			"Base.SKS_PARA",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xSEMI)	- (w762x39 * SURx * xPAC)					,					
			"Base.SKS30_A26",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xSEMI)	- (w762x39 * SURx * xUSA)					,	-- ONLY IN SURPLIS STORE				
			"Base.MK47",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xSEMI)	- (w762x39 * SURx * xUSA)			- (w762x39 * SURx * SURxNON)	- (w762x39 * SURx * x90)	,					
			"Base.AKM_Custom",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xAUTO)	- (w762x39 * SURx * xUSA)			- (w762x39 * SURx * SURxNON)	- (w762x39 * SURx * x90)	,					
			"Base.AK74_Custom",	w545x39	 * SURx	- (w545x39 * x545x39)	- (w545x39 * SURx * xAUTO)	- (w545x39 * SURx * xUSA)			- (w545x39 * SURx * SURxNON)	- (w545x39 * SURx * x90)	,					
			"Base.Ots14_1A_01",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xAUTO)	- (w762x39 * SURx * xSOV)					,					
			"Base.Ots14_1A_02",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xAUTO)	- (w762x39 * SURx * xSOV)					,					
			"Base.Ots14_4A",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xAUTO)	- (w762x39 * SURx * xSOV)					,					
			"Base.Ots14_4A_01",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xAUTO)	- (w762x39 * SURx * xSOV)					,					
			"Base.Ots14_4A_03",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xAUTO)	- (w762x39 * SURx * xSOV)					,					
			"Base.Ots14_4A_GL",	wGREN	 * SURx	- (wGREN * xGREN)	- (wGREN * SURx * xAUTO)	- (wGREN * SURx * xSOV)					,					
			"Base.AK308",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xAUTO)	- (w308 * SURx * xSOV)			- (w308 * SURx * SURxNON)	- (w308 * SURx * x90)	,					
			"Base.SCARH",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xAUTO)	- (w308 * SURx * xEUR)		- (w308 * SURx * CIVxMIL)	- (w308 * SURx * SURxNON)	- (w308 * SURx * x90)	,					
			"Base.SCAR20",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xAUTO)	- (w308 * SURx * xEUR)		- (w308 * SURx * CIVxMIL)	- (w308 * SURx * SURxNON)	- (w308 * SURx * x90)	,					
			"Base.G28",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xAUTO)	- (w308 * SURx * xEUR)		- (w308 * SURx * CIVxMIL)		- (w308 * SURx * x90)	,					
			"Base.G3",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xAUTO)	- (w308 * SURx * xEUR)		- (w308 * SURx * CIVxMIL)			,					
			"Base.PSG1",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xSEMI)	- (w308 * SURx * xEUR)		- (w308 * SURx * CIVxMIL)			,					
			"Base.MSG90",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xSEMI)	- (w308 * SURx * xEUR)		- (w308 * SURx * CIVxMIL)			,					
			"Base.Type64",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xAUTO)	- (w308 * SURx * xPAC)					,					
			"Base.FAL",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xAUTO)	- (w308 * SURx * xEUR)					,					
			"Base.FAL_PARA_Stock",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xAUTO)	- (w308 * SURx * xEUR)					,					
			"Base.FN_FNC",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xAUTO)	- (w556 * SURx * xEUR)					,					
			"Base.WA2000",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xBOLT)	- (w308 * SURx * xEUR)			- (w308 * SURx * SURxNON)		,					
			"Base.SVD",	w762x54r	 * SURx	- (w762x54r * x762x54r)	- (w762x54r * SURx * xSEMI)	- (w762x54r * SURx * xSOV)					,					
			"Base.SVDK",	w762x54r	 * SURx	- (w762x54r * x762x54r)	- (w762x54r * SURx * xSEMI)	- (w762x54r * SURx * xSOV)					,					
			"Base.SV_98",	w762x54r	 * SURx	- (w762x54r * x762x54r)	- (w762x54r * SURx * xBOLT)	- (w762x54r * SURx * xSOV)					,					
			"Base.OTS_03_SVU",	w762x54r	 * SURx	- (w762x54r * x762x54r)	- (w762x54r * SURx * xBOLT)	- (w762x54r * SURx * xSOV)			- (w762x54r * SURx * SURxNON)	- (w762x54r * SURx * x90)	,					
			"Base.M14EBR",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xAUTO)	- (w308 * SURx * xUSA)	- (w308 * SURx * CIVxLEO)		- (w308 * SURx * SURxNON)	- (w308 * SURx * x90)	,					
			"Base.M14",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xAUTO)	- (w308 * SURx * xUSA)					,					
			"Base.K14",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xBOLT)	- (w308 * SURx * xKOR)		- (w308 * SURx * CIVxMIL)		- (w308 * SURx * x90)	,					
			"Base.Savage12",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xBOLT)	- (w308 * SURx * xUSA)			- (w308 * SURx * SURxNON)		,					
			"Base.Ruger_No1_3006",	w3006	 * SURx	- (w3006 * x3006)	- (w3006 * SURx * xBREAK)	- (w3006 * SURx * xUSA)					,					
			"Base.M40",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xBOLT)	- (w308 * SURx * xUSA)			- (w308 * SURx * SURxNON)		,					
			"Base.M40A1",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xBOLT)	- (w308 * SURx * xUSA)			- (w308 * SURx * SURxNON)		,					
			"Base.M40A2",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xBOLT)	- (w308 * SURx * xUSA)		- (w308 * SURx * CIVxMIL)	- (w308 * SURx * SURxNON)		,					
			"Base.M40A3",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xBOLT)	- (w308 * SURx * xUSA)	- (w308 * SURx * CIVxLEO)		- (w308 * SURx * SURxNON)		,					
			"Base.M46_Mauser",	w762x54r	 * SURx	- (w762x54r * x762x54r)	- (w762x54r * SURx * xBOLT)	- (w762x54r * SURx * xPAC)					,					
			"Base.Mosin",	w762x54r	 * SURx	- (w762x54r * x762x54r)	- (w762x54r * SURx * xBOLT)	- (w762x54r * SURx * xSOV)					,					
			"Base.MosinObrez_Pistol",	w762x54r	 * SURx	- (w762x54r * x762x54r)	- (w762x54r * SURx * xBOLT)	- (w762x54r * SURx * xSOV)					,					
			"Base.M1",	w3006	 * SURx	- (w3006 * x3006)	- (w3006 * SURx * xSEMI)	- (w3006 * SURx * xUSA)					,					
			"Base.M1903",	w3006	 * SURx	- (w3006 * x3006)	- (w3006 * SURx * xBOLT)	- (w3006 * SURx * xUSA)					,					
			"Base.BAR",	w3006	 * SURx	- (w3006 * x3006)	- (w3006 * SURx * xAUTO)	- (w3006 * SURx * xUSA)					,					
			"Base.BAR_Monitor",	w3006	 * SURx	- (w3006 * x3006)	- (w3006 * SURx * xAUTO)	- (w3006 * SURx * xUSA)					,					
			"Base.MAS36",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xAUTO)	- (w308 * SURx * xEUR)					,					
			"Base.MAS44",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xAUTO)	- (w308 * SURx * xEUR)					,					
			"Base.MAS49",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xAUTO)	- (w308 * SURx * xEUR)					,					
			"Base.Win_1895",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xLEVER)	- (w308 * SURx * xUSA)					,					
			"Base.Galil",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xAUTO)	- (w308 * SURx * xISR)					,					
			"Base.Galil_Sniper",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xAUTO)	- (w308 * SURx * xISR)					,					
			"Base.Thompson_Center_3006",	w3006	 * SURx	- (w3006 * x3006)	- (w3006 * SURx * xBREAK)	- (w3006 * SURx * xUSA)					,					
			"Base.Type38",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xBOLT)	- (w308 * SURx * xPAC)					,					
			"Base.Type99",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xBOLT)	- (w308 * SURx * xPAC)					,					
			"Base.L96",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xBOLT)	- (w308 * SURx * xEUR)			- (w308 * SURx * SURxNON)		,					
			"Base.M240",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xLMG)	- (w308 * SURx * xUSA)		- (w308 * SURx * CIVxMIL)			,					
			"Base.G21LMG",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xLMG)	- (w308 * SURx * xEUR)		- (w308 * SURx * CIVxMIL)	- (w308 * SURx * SURxNON)	- (w308 * SURx * x90)	,					
			"Base.K12",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xLMG)	- (w308 * SURx * xKOR)		- (w308 * SURx * CIVxMIL)		- (w308 * SURx * x90)	,					
			"Base.PKM",	w762x54r	 * SURx	- (w762x54r * x762x54r)	- (w762x54r * SURx * xLMG)	- (w762x54r * SURx * xSOV)					,					
			"Base.MG42",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xLMG)	- (w308 * SURx * xEUR)					,					
			"Base.M60",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xLMG)	- (w308 * SURx * xUSA)		- (w308 * SURx * CIVxMIL)			,					
			"Base.MK43",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xLMG)	- (w308 * SURx * xUSA)		- (w308 * SURx * CIVxMIL)		- (w308 * SURx * x90)	,					
			"Base.RPD",	w762x39	 * SURx	- (w762x39 * x762x39)	- (w762x39 * SURx * xLMG)	- (w762x39 * SURx * xSOV)					,					
			"Base.DSHK_Fold",	wBMG	 * SURx	- (wBMG * xBMG)	- (wBMG * SURx * xMINI)	- (wBMG * SURx * xSOV)					,					
			"Base.BOAR",	wBMG	 * SURx	- (wBMG * xBMG)	- (wBMG * SURx * xBREAK)	- (wBMG * SURx * xUSA)					,					
			"Base.EDM96",	wBMG	 * SURx	- (wBMG * xBMG)	- (wBMG * SURx * xBOLT)	- (wBMG * SURx * xUSA)	- (wBMG * SURx * CIVxLEO)		- (wBMG * SURx * SURxNON)	- (wBMG * SURx * x90)	,					
			"Base.M82",	wBMG	 * SURx	- (wBMG * xBMG)	- (wBMG * SURx * xSEMI)	- (wBMG * SURx * xUSA)		- (wBMG * SURx * CIVxMIL)			,					
			"Base.BFG50",	wBMG	 * SURx	- (wBMG * xBMG)	- (wBMG * SURx * xBREAK)	- (wBMG * SURx * xUSA)				- (wBMG * SURx * x90)	,					
			"Base.Harris50",	wBMG	 * SURx	- (wBMG * xBMG)	- (wBMG * SURx * xBOLT)	- (wBMG * SURx * xUSA)			- (wBMG * SURx * SURxNON)		,					
			"Base.TAC50",	wBMG	 * SURx	- (wBMG * xBMG)	- (wBMG * SURx * xBOLT)	- (wBMG * SURx * xUSA)		- (wBMG * SURx * CIVxMIL)			,					
			"Base.CheyTac50",	wBMG	 * SURx	- (wBMG * xBMG)	- (wBMG * SURx * xBOLT)	- (wBMG * SURx * xUSA)	- (wBMG * SURx * CIVxLEO)		- (wBMG * SURx * SURxNON)	- (wBMG * SURx * x90)	,					
			"Base.Gepard_M6",	wBMG	 * SURx	- (wBMG * xBMG)	- (wBMG * SURx * xBOLT)	- (wBMG * SURx * xEUR)					,					
			"Base.OSV_96",	wBMG	 * SURx	- (wBMG * xBMG)	- (wBMG * SURx * xBOLT)	- (wBMG * SURx * xSOV)	- (wBMG * SURx * CIVxLEO)		- (wBMG * SURx * SURxNON)	- (wBMG * SURx * x90)	,					
			"Base.Ash",	wBMG	 * SURx	- (wBMG * xBMG)	- (wBMG * SURx * xAUTO)	- (wBMG * SURx * xSOV)		- (wBMG * SURx * CIVxMIL)	- (wBMG * SURx * SURxNON)	- (wBMG * SURx * x90)	,					
			"Base.VSSK",	wBMG	 * SURx	- (wBMG * xBMG)	- (wBMG * SURx * xBOLT)	- (wBMG * SURx * xSOV)		- (wBMG * SURx * CIVxMIL)	- (wBMG * SURx * SURxNON)	- (wBMG * SURx * x90)	,					
			"Base.SW_M500",	wBMG	 * SURx	- (wBMG * xBMG)	- (wBMG * SURx * xREV)	- (wBMG * SURx * xUSA)				- (wBMG * SURx * x90)	,					
			"Base.SPAS12_Fixed",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xSEMI)	- (w12g * SURx * xEUR)	- (w12g * SURx * CIVxLEO)				,					
			"Base.SPAS12_Fold",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xSEMI)	- (w12g * SURx * xEUR)	- (w12g * SURx * CIVxLEO)				,					
			"Base.Origin",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xSEMI)	- (w12g * SURx * xUSA)		- (w12g * SURx * CIVxMIL)	- (w12g * SURx * SURxNON)	- (w12g * SURx * x90)	,					
			"Base.SPAS_15",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xSEMI)	- (w12g * SURx * xEUR)		- (w12g * SURx * CIVxMIL)			,					
			"Base.USAS_12",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xAUTO)	- (w12g * SURx * xKOR)		- (w12g * SURx * CIVxMIL)			,					
			"Base.Shorty_Pistol",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xUSA)	- (w12g * SURx * CIVxLEO)			- (w12g * SURx * x90)	,					
			"Base.R11_87",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xSEMI)	- (w12g * SURx * xUSA)			- (w12g * SURx * SURxNON)		,					
			"Base.M870",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xUSA)			- (w12g * SURx * SURxNON)		,					
			"Base.M1897",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xUSA)					,					
			"Base.DT11",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xBREAK)	- (w12g * SURx * xEUR)					,					
			"Base.Coachgun",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xBREAK)	- (w12g * SURx * xUSA)					,					
			"Base.Terminator",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xBREAK)	- (w12g * SURx * xUSA)					,					
			"Base.SIX12",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xREV)	- (w12g * SURx * xUSA)	- (w12g * SURx * CIVxLEO)		- (w12g * SURx * SURxNON)	- (w12g * SURx * x90)	,					
			"Base.SIX12SD",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xREV)	- (w12g * SURx * xUSA)		- (w12g * SURx * CIVxMIL)	- (w12g * SURx * SURxNON)	- (w12g * SURx * x90)	,					
			"Base.M870_Wingmaster",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xUSA)			- (w12g * SURx * SURxNON)		,					
			"Base.M870_Police",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xUSA)	- (w12g * SURx * CIVxLEO)				,					
			"Base.M870_MCS",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xUSA)	- (w12g * SURx * CIVxLEO)				,					
			"Base.M870_CQB",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xUSA)	- (w12g * SURx * CIVxLEO)				,					
			"Base.M870_Breaching_Pistol",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xUSA)	- (w12g * SURx * CIVxLEO)				,					
			"Base.M870_Express",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xUSA)	- (w12g * SURx * CIVxLEO)				,					
			"Base.Ithaca_M37",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xUSA)					,					
			"Base.AUTO_5",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xSEMI)	- (w12g * SURx * xUSA)			- (w12g * SURx * SURxNON)		,					
			"Base.A400",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xSEMI)	- (w12g * SURx * xEUR)	- (w12g * SURx * CIVxLEO)			- (w12g * SURx * x90)	,					
			"Base.M1014",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xSEMI)	- (w12g * SURx * xEUR)			- (w12g * SURx * SURxNON)	- (w12g * SURx * x90)	,					
			"Base.M1014_Fold",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xSEMI)	- (w12g * SURx * xEUR)		- (w12g * SURx * CIVxMIL)	- (w12g * SURx * SURxNON)	- (w12g * SURx * x90)	,					
			"Base.M1014_Wick",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xSEMI)	- (w12g * SURx * xEUR)		- (w12g * SURx * CIVxMIL)	- (w12g * SURx * SURxNON)	- (w12g * SURx * x90)	,					
			"Base.DAO12",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xREV)	- (w12g * SURx * xREST)	- (w12g * SURx * CIVxLEO)				,					
			"Base.M1887",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xLEVER)	- (w12g * SURx * xUSA)					,					
			"Base.M1208",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xREV)	- (w12g * SURx * xUSA)			- (w12g * SURx * SURxNON)	- (w12g * SURx * x90)	,					
			"Base.M1212",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xREV)	- (w12g * SURx * xUSA)	- (w12g * SURx * CIVxLEO)		- (w12g * SURx * SURxNON)	- (w12g * SURx * x90)	,					
			"Base.M1216",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xREV)	- (w12g * SURx * xUSA)	- (w12g * SURx * CIVxLEO)		- (w12g * SURx * SURxNON)	- (w12g * SURx * x90)	,					
			"Base.AA12",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xAUTO)	- (w12g * SURx * xUSA)		- (w12g * SURx * CIVxMIL)	- (w12g * SURx * SURxNON)	- (w12g * SURx * x90)	,					
			"Base.CAWS",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xAUTO)	- (w12g * SURx * xEUR)		- (w12g * SURx * CIVxMIL)			,					
			"Base.ROYAL_SXS",	w10g	 * SURx	- (w10g * x10g)	- (w10g * SURx * xBREAK)	- (w10g * SURx * xEUR)					,					
			"Base.KS23",	w4g	 * SURx	- (w4g * x4g)	- (w4g * SURx * xPUMP)	- (w4g * SURx * xSOV)					,					
			"Base.KS23_S_Pistol",	w4g	 * SURx	- (w4g * x4g)	- (w4g * SURx * xPUMP)	- (w4g * SURx * xSOV)					,					
			"Base.Triple_Crown",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xBREAK)	- (w12g * SURx * xEUR)					,					
			"Base.Moss500_20",	w20g	 * SURx	- (w20g * x20g)	- (w20g * SURx * xPUMP)	- (w20g * SURx * xUSA)			- (w20g * SURx * SURxNON)		,					
			"Base.10855_Silver",	w20g	 * SURx	- (w20g * x20g)	- (w20g * SURx * xSEMI)	- (w20g * SURx * xEUR)			- (w20g * SURx * SURxNON)		,					
			"Base.Colt1855",	w20g	 * SURx	- (w20g * x20g)	- (w20g * SURx * xREV)	- (w20g * SURx * xUSA)					,					
			"Base.TOZ106",	w20g	 * SURx	- (w20g * x20g)	- (w20g * SURx * xBOLT)	- (w20g * SURx * xSOV)					,					
			"Base.TOZ194_Pistol",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xSOV)					,					
			"Base.Saiga12",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xAUTO)	- (w12g * SURx * xSOV)				- (w12g * SURx * x90)	,					
			"Base.Saiga12_Long",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xAUTO)	- (w12g * SURx * xSOV)				- (w12g * SURx * x90)	,					
			"Base.Saiga12_Tromix",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xAUTO)	- (w12g * SURx * xSOV)		- (w12g * SURx * CIVxMIL)		- (w12g * SURx * x90)	,					
			"Base.MP133",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xSOV)				- (w12g * SURx * x90)	,					
			"Base.MP133S_Pistol",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xSOV)				- (w12g * SURx * x90)	,					
			"Base.KSG",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xUSA)			- (w12g * SURx * SURxNON)	- (w12g * SURx * x90)	,					
			"Base.KSG25",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xUSA)			- (w12g * SURx * SURxNON)	- (w12g * SURx * x90)	,					
			"Base.UTS15",	w12g	 * SURx	- (w12g * x12g)	- (w12g * SURx * xPUMP)	- (w12g * SURx * xREST)			- (w12g * SURx * SURxNON)	- (w12g * SURx * x90)	,					
			"Base.EX41_HE",	wGREN	 * SURx		- (wGREN * SURx * xGREN)	- (wGREN * SURx * xUSA)					,					
			"Base.Federal_HE",	wGREN	 * SURx		- (wGREN * SURx * xGREN)	- (wGREN * SURx * xUSA)					,					
			"Base.M32_HE",	wGREN	 * SURx		- (wGREN * SURx * xGREN)	- (wGREN * SURx * xUSA)					,					
			"Base.GM94_HE",	wGREN	 * SURx		- (wGREN * SURx * xGREN)	- (wGREN * SURx * xSOV)		- (wGREN * SURx * CIVxMIL)		- (wGREN * SURx * x90)	,					
			"Base.K11",	wGREN	 * SURx	- (wGREN * SURx * xAUTO)	- (wGREN * SURx * xGREN)	- (wGREN * SURx * xKOR)		- (wGREN * SURx * CIVxMIL)		- (wGREN * SURx * x90)	,					
			"Base.M72_LAW",	wGREN	 * SURx		- (wGREN * SURx * xGREN)	- (wGREN * SURx * xUSA)					,					
			"Base.RPG_7",	wGREN	 * SURx		- (wGREN * SURx * xGREN)	- (wGREN * SURx * xSOV)					,					
			"Base.XM214",	w556	 * SURx	- (w556 * x556)	- (w556 * SURx * xMINI)	- (w556 * SURx * xUSA)		- (w556 * SURx * CIVxMIL)			,					
			"Base.GAU17",	w308	 * SURx	- (w308 * x308)	- (w308 * SURx * xMINI)	- (w308 * SURx * xUSA)		- (w308 * SURx * CIVxMIL)			,					
			"Base.GAU19",	wBMG	 * SURx	- (wBMG * xBMG)	- (wBMG * SURx * xMINI)	- (wBMG * SURx * xUSA)		- (wBMG * SURx * CIVxMIL)			,					
			"Base.TAC15",	wBOW	 * SURx		- (wBOW * SURx * xBOW)	- (wBOW * SURx * xUSA)					,					
			"Base.HortonScout_125",	wBOW	 * SURx		- (wBOW * SURx * xBOW)	- (wBOW * SURx * xUSA)					,					
			"Base.MissionMXB_400",	wBOW	 * SURx		- (wBOW * SURx * xBOW)	- (wBOW * SURx * xUSA)					,					
			"Base.TenPointTurbo_XLT",	wBOW	 * SURx		- (wBOW * SURx * xBOW)	- (wBOW * SURx * xUSA)					,					
			"Base.HZRedback_RTS",	wBOW	 * SURx		- (wBOW * SURx * xBOW)	- (wBOW * SURx * xUSA)					,					
			"Base.Genesis_X_Bow",	wBOW	 * SURx		- (wBOW * SURx * xBOW)	- (wBOW * SURx * xUSA)					,					
			"Base.Genesis_Bow",	wBOW	 * SURx		- (wBOW * SURx * xBOW)	- (wBOW * SURx * xUSA)					,					
			"Base.Genesis_Mini_Bow",	wBOW	 * SURx		- (wBOW * SURx * xBOW)	- (wBOW * SURx * xUSA)					,					
			"Base.BowTechSR_350",	wBOW	 * SURx		- (wBOW * SURx * xBOW)	- (wBOW * SURx * xUSA)					,					
			"Base.HoytSpectra_1000",	wBOW	 * SURx		- (wBOW * SURx * xBOW)	- (wBOW * SURx * xUSA)					,					
			"Base.SlingShot_Rock",	wBOW	 * SURx		- (wBOW * SURx * xBOW)	- (wBOW * SURx * xUSA)					,					
			"Base.WristRocket_Rock",	wBOW	 * SURx		- (wBOW * SURx * xBOW)	- (wBOW * SURx * xUSA)					,					
			"Base.M2A1",	wFLAME	 * SURx		- (wFLAME * SURx * xFLAME)	- (wFLAME * SURx * xUSA)					,					
			"Base.Musk",	wFLAME	 * SURx		- (wFLAME * SURx * xFLAME)	- (wFLAME * SURx * xUSA)			- (wFLAME * SURx * SURxNON)	- (wFLAME * SURx * x90)	,					
		},																
		dontSpawnAmmo = 		 SURammo	,													
	},																	
																		
	SurplusParts = {																	
		rolls =	SURRollPART	,														
		items = {																
			"Base.Launcher",	Part		- (wGREN * xGREN)		- (Part * xUSA)		- (Part * CIVxMIL)			,					
			"Base.Launcher2",	Part		- (wGREN * xGREN)		- (Part * xSOV)		- (Part * CIVxMIL)			,					
			"Base.Bipod",	Part		- (Part * xPart)							,					
			"Base.Ammobelt",	Part		- (Part * xPart)							,					
			"Base.Sling_1",	Part		- (Part * xPart)							,					
			"Base.Sling_2",	Part		- (Part * xPart)							,					
			"Base.Sling_3",	Part		- (Part * xPart)							,					
			"Base.ForeGrip",	Part		- (Part * xPart)							,					
			"Base.Grip_Magpul",	Part		- (Part * xPart)						- (Part * x90)	,					
			"Base.Grip_MLOK",	Part		- (Part * xPart)						- (Part * x90)	,					
			"Base.Grip_TG",	Part		- (Part * xPart)						- (Part * x90)	,					
			"Base.Grip_BCM",	Part		- (Part * xPart)						- (Part * x90)	,					
			"Base.Grip_Fold",	Part		- (Part * xPart)							,					
			"Base.Light_Small",	Light		- (Light * xLight)							,					
			"Base.Light_Large",	Light		- (Light * xLight)							,					
			"Base.Light_Medium_M952V",	Light		- (Light * xLight)							,					
			"Base.Laser_Green",	Light		- (Light * xLight)							,					
			"Base.Laser_Red",	Light		- (Light * xLight)							,					
			"Base.Laser_DVAL",	Light		- (Light * xLight)			- (Light * CIVxLEO)				,					
			"Base.Laser_PEQ15",	Light		- (Light * xLight)				- (Light * CIVxMIL)			,					
			"Base.Light_Small_Socom",	Light		- (Light * xLight)				- (Light * CIVxMIL)			,					
			"Base.Light_Small_TLR_7AH",	Light		- (Light * xLight)							,					
			"Base.Light_Medium_M900",	Light		- (Light * xLight)							,					
			"Base.Suppressor_Pistol",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)			,					
			"Base.Suppressor_Rifle",	Suppress		- (Suppress * xSuppress)							,					
			"Base.Suppressor_Shotgun",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)			,					
			"Base.Suppressor_BMG",	Suppress		- (Suppress * xSuppress)	- (wBMG * xBMG)						,					
			"Base.Suppressor_Socom_Pistol",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)			,					
			"Base.Suppressor_NorthStar_Pistol",	Suppress		- (Suppress * xSuppress)				- (Suppress * CIVxMIL)			,					
			"Base.Suppressor_PBS1_Rifle",	Suppress		- (Suppress * xSuppress)							,					
			"Base.Suppressor_PBS4_Rifle",	Suppress		- (Suppress * xSuppress)							,					
			"Base.Suppressor_ROME_BMG",	Suppress		- (Suppress * xSuppress)	- (wBMG * xBMG)						,					
			"Base.Bayonet_M4",	Part		- (Part * xPart)							,					
			"Base.Bayonet_AK",	Part		- (Part * xPart)		- (Part * xSOV)					,					
			"Base.Bayonet_M1917",	Part		- (Part * xPart)							,					
			"Base.Bayonet_Type30",	Part		- (Part * xPart)							,					
			"Base.Choke_Full",	Part		- (Part * xPart)							,					
			"Base.Choke_Full_Dbl",	Part		- (Part * xPart)							,					
			"Base.Compensator",	Part		- (Part * xPart)							,					
			"Base.LinearComp_Noveske",	Part		- (Part * xPart)							,					
			"Base.MuzzleBrake",	Part		- (Part * xPart)							,					
			"Base.MuzzleBrake_DK1",	Part		- (Part * xPart)							,					
			"Base.MuzzleBrake_DK2",	Part		- (Part * xPart)							,					
			"Base.Pad",	Part		- (Part * xPart)							,					
			"Base.Carrier_12g",	Part		- (Part * xPart)							,					
			"Base.GhostRing",	Optic		- (Optic * xOptic)							,					
			"Base.Sight_MicroDot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * SURxNON)	- (Optic * x90)	,					
			"Base.Sight_RaceDot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * SURxNON)		,					
			"Base.Sight_Phantom_XL",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * SURxNON)	- (Optic * x90)	,					
			"Base.Sight_OKP7_Reflex",	Optic		- (Optic * xOptic)		- (Optic * xSOV)			- (Optic * SURxNON)	- (Optic * x90)	,					
			"Base.Sight_SRS",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * SURxNON)	- (Optic * x90)	,					
			"Base.Sight_EOTech",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * SURxNON)		,					
			"Base.Sight_3xEOTech",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * SURxNON)		,					
			"Base.Sight_4xACOG",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_4xACOG_ECO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_6xELCAN",	Optic		- (Optic * xOptic)		- (Optic * xEUR)			- (Optic * SURxNON)		,					
			"Base.Sight_6xHensoldt",	Optic		- (Optic * xOptic)		- (Optic * xEUR)			- (Optic * SURxNON)		,					
			"Base.Sight_KOBRA",	Optic		- (Optic * xOptic)		- (Optic * xSOV)					,					
			"Base.Scope_4xPSO",	Optic		- (Optic * xOptic)		- (Optic * xSOV)					,					
			"Base.Scope_12xPSO",	Optic		- (Optic * xOptic)		- (Optic * xSOV)					,					
			"Base.Scope_1-4x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Scope_Trijicon_1-6x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Scope_TANGO6T_1-6x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Scope_20x",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_Thermal",	Optic		- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * CIVxMIL)			,					
			"Base.Sight_Thermal_AK",	Optic		- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * CIVxMIL)			,					
			"Base.Sight_Aimpoint",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_Aimpoint_Dot",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_Fiber_Shotgun",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_Mepro_M21",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * SURxNON)	- (Optic * x90)	,					
			"Base.Sight_Mepro_MOR",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * SURxNON)	- (Optic * x90)	,					
			"Base.Sight_UH1",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				- (Optic * x90)	,					
			"Base.Sight_C79",	Optic		- (Optic * xOptic)		- (Optic * xEUR)					,					
			"Base.Sight_SUSAT",	Optic		- (Optic * xOptic)		- (Optic * xEUR)					,					
			"Base.Sight_Raven",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_G28_Scope",	Optic		- (Optic * xOptic)		- (Optic * xEUR)					,					
			"Base.Scope_ATACR7_F1",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Scope_ATACR7_F1r",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_ACRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				- (Optic * x90)	,					
			"Base.Sight_MRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * SURxNON)	- (Optic * x90)	,					
			"Base.Sight_SRO",	Optic		- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * SURxNON)	- (Optic * x90)	,					
			"Base.Sight_Nikon",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_M8",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_VX3",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_1P87",	Optic		- (Optic * xOptic)		- (Optic * xSOV)					,					
			"Base.Sight_1P63",	Optic		- (Optic * xOptic)		- (Optic * xSOV)					,					
			"Base.Sight_Brownells",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_L2",	Optic		- (Optic * xOptic)		- (Optic * xEUR)					,					
			"Base.Sight_Malcom",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_LUX",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_NO32",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_PKAS",	Optic		- (Optic * xOptic)		- (Optic * xSOV)					,					
			"Base.Sight_PU",	Optic		- (Optic * xOptic)		- (Optic * xSOV)					,					
			"Base.Sight_XPS",	Optic		- (Optic * xOptic)		- (Optic * xUSA)				- (Optic * x90)	,					
			"Base.Sight_PVS4",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_Burris_NV",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Sight_Armasight_NV",	Optic		- (Optic * xOptic)		- (Optic * xUSA)					,					
			"Base.Barrel_308",	w308		- (w308 * xPart)	- (w308 * xBREAK)	- (w308 * xUSA)					,					
			"Base.Barrel_3006",	w3006		- (w3006 * xPart)	- (w3006 * xBREAK)	- (w3006 * xUSA)					,					
			"Base.Barrel_4570",	w4570		- (w4570 * xPart)	- (w4570 * xBREAK)	- (w4570 * xUSA)					,					
			"Base.Barrel_357",	w357		- (w357 * xPart)	- (w357 * xBREAK)	- (w357 * xUSA)					,					
			"Base.Barrel_357_Short",	w357		- (w357 * xPart)	- (w357 * xBREAK)	- (w357 * xUSA)					,					
			"Base.Barrel_45LC",	w45LC		- (w45LC * xPart)	- (w45LC * xBREAK)	- (w45LC * xUSA)					,					
			"Base.Barrel_45LC_Short",	w45LC		- (w45LC * xPart)	- (w45LC * xBREAK)	- (w45LC * xUSA)					,					
			"Base.TriggerGroup_AR",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)					,					
			"Base.TriggerGroup_AK",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xSOV)					,					
			"Base.TriggerGroup_HK",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xEUR)					,					
			"Base.TriggerGroup_FN",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xEUR)					,					
			"Base.Switch_Striker_Black",	Part 		- (Part * xPart)	- (Part  * xAUTO)	- (Part  * xUSA)				- (Part  * x90)	,					
			"Base.Switch_Striker_Red",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)				- (Part * x90)	,					
			"Base.Switch_Striker_Blue",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)				- (Part * x90)	,					
			"Base.Switch_Striker_Green",	Part		- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)				- (Part * x90)	,					
			"Base.Grip_G10_Blue",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * SURxNON)		,					
			"Base.Grip_G10_Brown",	Part		- (Part * xPart)		- (Part * xUSA)					,					
			"Base.Grip_G10_Black",	Part		- (Part * xPart)		- (Part * xUSA)					,					
			"Base.Grip_G10_Red",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * SURxNON)		,					
			"Base.Grip_G10_Green",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * SURxNON)		,					
			"Base.Grip_G10_Pink",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * SURxNON)		,					
			"Base.Grip_Alloy_Black",	Part		- (Part * xPart)		- (Part * xUSA)					,					
			"Base.Grip_Alloy_Silver",	Part		- (Part * xPart)		- (Part * xUSA)					,					
			"Base.Grip_Alloy_Blue",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * SURxNON)		,					
			"Base.Grip_Alloy_Red",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * SURxNON)		,					
			"Base.Grip_Wood",	Part		- (Part * xPart)		- (Part * xUSA)					,					
			"Base.Grip_Punisher",	Part		- (Part * xPart)		- (Part * xUSA)					,					
			"Base.Grip_Spartan",	Part		- (Part * xPart)		- (Part * xUSA)					,					
			"Base.Grip_Ivory",	Part		- (Part * xPart)		- (Part * xUSA)					,					
			"Base.Grip_Carbon",	Part		- (Part * xPart)		- (Part * xUSA)			- (Part * SURxNON)		,					
			"Base.38Speed",	StdMag	* w357 - (StdMag * xStdMag)	- (w357 * x357)	- (StdMag * xREV)						,					
			"Base.44Speed",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)	- (StdMag * xREV)						,					
			"Base.SRM1208_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * SURxNON)	- (StdMag * x90)	,					
			"Base.SRM1212_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * SURxNON)	- (StdMag * x90)	,					
			"Base.SRM1216_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * SURxNON)	- (StdMag * x90)	,					
			"Base.SIX12_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * SURxNON)	- (StdMag * x90)	,					
			"Base.CP33Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)		- (StdMag * xUSA)			- (StdMag * SURxNON)	- (StdMag * x90)	,					
			"Base.CP33_17MagBase",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)		- (ExtMag * xUSA)			- (ExtMag * SURxNON)	- (ExtMag * x90)	,					
			"Base.22Clip",	StdMag	* w22 - (StdMag * xStdMag)	- (w22 * x22)							,					
			"Base.22ExtClip",	ExtMag	* w22 - (ExtMag * xExtMag)	- (w22 * x22)							,					
			"Base.380Clip",	StdMag	* w380 - (StdMag * xStdMag)	- (w380 * x380)							,					
			"Base.380StdClip",	StdMag	* w380 - (StdMag * xStdMag)	- (w380 * x380)							,					
			"Base.380ExtClip",	ExtMag	* w380 - (ExtMag * xExtMag)	- (w380 * x380)							,					
			"Base.9mmSSClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)							,					
			"Base.9mmSSExtClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)							,					
			"Base.9mmClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)							,					
			"Base.9mmExtClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)							,					
			"Base.45DSClip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)							,					
			"Base.45DSExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)							,					
			"Base.45Clip",	StdMag	* w45 - (StdMag * xStdMag)	- (w45 * x45)							,					
			"Base.45ExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	- (w45 * x45)							,					
			"Base.44Clip",	StdMag	* w44 - (StdMag * xStdMag)	- (w44 * x44)							,					
			"Base.50Clip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)							,					
			"Base.223StdClip",	StdMag	* w223 - (StdMag * xStdMag)	- (w223 * x223)							,					
			"Base.223ExtClip",	ExtMag	* w223 - (ExtMag * xExtMag)	- (w223 * x223)							,					
			"Base.556Clip",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)							,					
			"Base.308StdClip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)							,					
			"Base.308ExtClip",	ExtMag	* w308 - (ExtMag * xExtMag)	- (w308 * x308)							,					
			"Base.3006ExtClip",	ExtMag	* w3006 - (ExtMag * xExtMag)	- (w3006 * x3006)		- (ExtMag * xUSA)					,					
			"Base.SVDClip",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)		- (StdMag * xSOV)					,					
			"Base.ASHClip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xSOV)				- (StdMag * x90)	,					
			"Base.M82Clip",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)		- (StdMag * xUSA)			- (StdMag * SURxNON)		,					
			"Base.M1Clip",	StdMag	* w3006 - (StdMag * xStdMag)	- (w3006 * x3006)		- (StdMag * xUSA)					,					
			"Base.SKSClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)		- (StdMag * xSOV)					,					
			"Base.1903Clip",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)							,					
			"Base.545StdClip",	StdMag	* w545x39 - (StdMag * xStdMag)	- (w545x39 * x545x39)		- (StdMag * xSOV)					,					
			"Base.AKClip",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)							,					
			"Base.ASVALClip",	ExtMag	* w9 - (ExtMag * xExtMag)	- (w9 * x9)		- (ExtMag * xSOV)					,					
			"Base.VSSClip",	StdMag	* w9 - (StdMag * xStdMag)	- (w9 * x9)		- (StdMag * xSOV)					,					
			"Base.57Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)			- (StdMag * SURxNON)	- (StdMag * x90)	,					
			"Base.P90Clip",	StdMag	* w57 - (StdMag * xStdMag)	- (w57 * x57)		- (StdMag * xEUR)			- (StdMag * SURxNON)	- (StdMag * x90)	,					
			"Base.22Drum",	DrumMag	* w22 - (DrumMag * xDrumMag)	- (w22 * x22)							,					
			"Base.9mmDrum",	DrumMag	* w9 - (DrumMag * xDrumMag)	- (w9 * x9)							,					
			"Base.45Drum",	DrumMag	* w45 - (DrumMag * xDrumMag)	- (w45 * x45)							,					
			"Base.556Drum",	DrumMag	* w556 - (DrumMag * xDrumMag)	- (w556 * x556)							,					
			"Base.545Drum",	DrumMag	* w545x39 - (DrumMag * xDrumMag)	- (w545x39 * x545x39)		- (DrumMag * xSOV)					,					
			"Base.762Drum",	DrumMag	* w762x39 - (DrumMag * xDrumMag)	- (w762x39 * x762x39)							,					
			"Base.12gDrum",	DrumMag	* w12g - (DrumMag * xDrumMag)	- (w12g * x12g)							,					
			"Base.308Belt",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wLMG * xLMG)			- (StdMag * CIVxMIL)			,					
			"Base.556Belt",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wLMG * xLMG)			- (StdMag * CIVxMIL)			,					
			"Base.762x39Belt",	StdMag	* w762x39 - (StdMag * xStdMag)	- (w762x39 * x762x39)	- (wLMG * xLMG)			- (StdMag * CIVxMIL)			,					
			"Base.762x54rBelt",	StdMag	* w762x54r - (StdMag * xStdMag)	- (w762x54r * x762x54r)	- (wLMG * xLMG)	- (StdMag * xSOV)		- (StdMag * CIVxMIL)			,					
			"Base.556MiniCan",	StdMag	* w556 - (StdMag * xStdMag)	- (w556 * x556)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * CIVxMIL)			,					
			"Base.308MiniCan",	StdMag	* w308 - (StdMag * xStdMag)	- (w308 * x308)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * CIVxMIL)			,					
			"Base.50MiniCan",	StdMag	* wBMG - (StdMag * xStdMag)	- (wBMG * xBMG)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * CIVxMIL)			,					
			"Base.M2A1_Tank",	ExtMag	* wFLAME - (ExtMag * xExtMag)	- (wFLAME * xFLAME)		- (ExtMag * xUSA)					,					
			"Base.M2A1_Can",	StdMag	* wFLAME - (StdMag * xStdMag)	- (wFLAME * xFLAME)		- (StdMag * xUSA)					,					
			"Base.M2A1_Can",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)					,					
			"Base.Standard_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)					,					
			"Base.Large_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	- (wBB * xBB)		- (StdMag * xUSA)					,					
			"Base.RussianMachete",	LgKnife	 * SURx	- (LgKnife * xLgKnife)		- (LgKnife * xSOV)					,					
			"Base.BGMachete",	LgKnife	 * SURx	- (LgKnife * xLgKnife)		- (LgKnife * xUSA)					,					
			"Base.RamboKnife",	LgKnife	 * SURx	- (LgKnife * xLgKnife)		- (LgKnife * xUSA)					,					
			"Base.Butterfly",	SmKnife	 * SURx	- (SmKnife * xSmKnife)		- (SmKnife * xPAC)					,					
			"Base.PushDagger",	SmKnife	 * SURx	- (SmKnife * xSmKnife)		- (SmKnife * xUSA)					,					
			"Base.Karambit",	SmKnife	 * SURx	- (SmKnife * xSmKnife)		- (SmKnife * xPAC)					,					
			"Base.ThrowingKnife",	SmKnife	 * SURx	- (SmKnife * xSmKnife)		- (SmKnife * xUSA)					,					
			"Base.NinjaStar",	SmKnife	 * SURx	- (SmKnife * xSmKnife)		- (SmKnife * xPAC)					,					
			"Base.Tactical_Axe",	Axe	 * SURx	- (Axe * xAxe)		- (Axe * xUSA)					,					
			"Base.Tactical_Sickle",	Axe	 * SURx	- (Axe * xAxe)		- (Axe * xUSA)					,					
			"Base.Trench_Axe",	Axe	 * SURx	- (Axe * xAxe)		- (Axe * xEUR)					,					
			"Base.Broad_Axe",	Axe	 * SURx	- (Axe * xAxe)		- (Axe * xEUR)					,					
			"Base.DingDong",	Blunt	 * SURx	- (Blunt * xBlunt)		- (Blunt * xUSA)			- (Blunt * SURx * SURxNON)		,					
			"Base.MilitaryBaton",	Blunt	 * SURx	- (Blunt * xBlunt)		- (Blunt * xUSA)					,					
			"Base.ASP_B",	Blunt	 * SURx	- (Blunt * xBlunt)		- (Blunt * xUSA)					,					
			"Base.KillBill",	Sword	 * SURx	- (Sword * xSword)		- (Sword * xPAC)			- (Sword * SURx * SURxNON)		,					
			"Base.CH_WarSword",	Sword	 * SURx	- (Sword * xSword)		- (Sword * xPAC)			- (Sword * SURx * SURxNON)		,					
			"Base.Conan_Sword",	Sword	 * SURx	- (Sword * xSword)		- (Sword * xUSA)			- (Sword * SURx * SURxNON)		,					
		}																
	},																	
																		
	SurplusAmmo = {																	
		rolls =	SURRollAMMO	,														
		items = {																
			"Base.AmmoCan30_22",	AmmoCan		* w22	- (AmmoCan * x22)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_380",	AmmoCan		* w380	- (AmmoCan * x380)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_57",	AmmoCan		* w57	- (AmmoCan * x57)	- (AmmoCan * xAmmoCan)			- (AmmoCan * SURxNON)	- (AmmoCan * x90)	,					
			"Base.AmmoCan30_9",	AmmoCan		* w9	- (AmmoCan * x9)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_38",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_357",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_45",	AmmoCan		* w45	- (AmmoCan * x45)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_44",	AmmoCan		* w44	- (AmmoCan * x44)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_45LC",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan30_4570",	AmmoCan		* w4570	- (AmmoCan * x4570)	- (AmmoCan * xAmmoCan)			- (AmmoCan * SURxNON)		,					
			"Base.AmmoCan30_50MAG",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)				- (AmmoCan * x90)	,					
			"Base.AmmoCan50_223",	AmmoCan		* w223	- (AmmoCan * x223)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_556",	AmmoCan		* w556	- (AmmoCan * x556)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_762x39",	AmmoCan		* w762x39	- (AmmoCan * x762x39)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_545x39",	AmmoCan		* w545x39	- (AmmoCan * x545x39)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_762x54r",	AmmoCan		* w762x54r	- (AmmoCan * x762x54r)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_308",	AmmoCan		* w308	- (AmmoCan * x308)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_3006",	AmmoCan		* w3006	- (AmmoCan * x3006)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_410",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)			- (AmmoCan * SURxNON)		,					
			"Base.AmmoCan50_20",	AmmoCan		* w20g	- (AmmoCan * x20g)	- (AmmoCan * xAmmoCan)			- (AmmoCan * SURxNON)		,					
			"Base.AmmoCan50_12",	AmmoCan		* w12g	- (AmmoCan * x12g)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_10",	AmmoCan		* w10g	- (AmmoCan * x10g)	- (AmmoCan * xAmmoCan)			- (AmmoCan * SURxNON)		,					
			"Base.AmmoCan50_4",	AmmoCan		* w4g	- (AmmoCan * x4g)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_50",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)					,					
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * CIVxMIL)	- (AmmoCan * SURxNON)		,					
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * CIVxMIL)	- (AmmoCan * SURxNON)		,					
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * CIVxMIL)	- (AmmoCan * SURxNON)		,					
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * CIVxMIL)	- (AmmoCan * SURxNON)		,					
			"Base.AmmoCan50_ROCKET",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * CIVxMIL)	- (AmmoCan * SURxNON)		,					
			"Base.BB177Box",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)					,					
			"Base.CO2_Cartridge_Box",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)					,					
			"Base.PB68Bag",	AmmoBox		* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets22Box",	AmmoBox		* w22	- (AmmoBox * x22)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets380Box",	AmmoBox		* w380	- (AmmoBox * x380)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets57Box",	AmmoBox		* w57	- (AmmoBox * x57)	- (AmmoBox * xAmmoBox)			- (AmmoBox * SURxNON)	- (AmmoBox * x90)	,					
			"Base.Bullets9mmBox",	AmmoBox		* w9	- (AmmoBox * x9)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets38Box",	AmmoBox		* w357	- (AmmoBox * x357)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets357Box",	AmmoBox		* w357	- (AmmoBox * x357)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets45Box",	AmmoBox		* w45	- (AmmoBox * x45)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets44Box",	AmmoBox		* w44	- (AmmoBox * x44)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets45LCBox",	AmmoBox		* w45LC	- (AmmoBox * x45LC)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bullets4570Box",	AmmoBox		* w4570	- (AmmoBox * x4570)	- (AmmoBox * xAmmoBox)			- (AmmoBox * SURxNON)		,					
			"Base.Bullets50MAGBox",	AmmoBox		* wBMG	- (AmmoBox * xBMG)	- (AmmoBox * xAmmoBox)				- (AmmoBox * x90)	,					
			"Base.223Box",	AmmoBox		* w223	- (AmmoBox * x223)	- (AmmoBox * xAmmoBox)					,					
			"Base.556Box",	AmmoBox		* w556	- (AmmoBox * x556)	- (AmmoBox * xAmmoBox)					,					
			"Base.762x39Box",	AmmoBox		* w762x39	- (AmmoBox * x762x39)	- (AmmoBox * xAmmoBox)					,					
			"Base.545x39Box",	AmmoBox		* w545x39	- (AmmoBox * x545x39)	- (AmmoBox * xAmmoBox)					,					
			"Base.762x54rBox",	AmmoBox		* w762x54r	- (AmmoBox * x762x54r)	- (AmmoBox * xAmmoBox)					,					
			"Base.308Box",	AmmoBox		* w308	- (AmmoBox * x308)	- (AmmoBox * xAmmoBox)					,					
			"Base.3006Box",	AmmoBox		* w3006	- (AmmoBox * x3006)	- (AmmoBox * xAmmoBox)					,					
			"Base.410gShotgunShellsBox",	AmmoBox		* w45LC	- (AmmoBox * x45LC)	- (AmmoBox * xAmmoBox)			- (AmmoBox * SURxNON)		,					
			"Base.20gShotgunShellsBox",	AmmoBox		* w20g	- (AmmoBox * x20g)	- (AmmoBox * xAmmoBox)			- (AmmoBox * SURxNON)		,					
			"Base.ShotgunShellsBox",	AmmoBox		* w12g	- (AmmoBox * x12g)	- (AmmoBox * xAmmoBox)					,					
			"Base.10gShotgunShellsBox",	AmmoBox		* w10g	- (AmmoBox * x10g)	- (AmmoBox * xAmmoBox)			- (AmmoBox * SURxNON)		,					
			"Base.4gShotgunShellsBox",	AmmoBox		* w4g	- (AmmoBox * x4g)	- (AmmoBox * xAmmoBox)					,					
			"Base.50BMGBox",	AmmoBox		* wBMG	- (AmmoBox * xBMG)	- (AmmoBox * xAmmoBox)					,					
			"Base.Bolt_Bear",	AmmoBox		* wBOW	- (AmmoBox * xBOW)						,					
			"Base.Bolt_Bear_Pack",	AmmoBox		* wBOW	- (AmmoBox * xBOW)	- (AmmoBox * xAmmoBox)					,					
			"Base.Arrow_Fiberglass",	AmmoBox		* wBOW	- (AmmoBox * xBOW)						,					
			"Base.Arrow_Fiberglass_Pack",	AmmoBox		* wBOW	- (AmmoBox * xBOW)	- (AmmoBox * xAmmoBox)					,					
			"Base.40HERound",	AmmoBox		* wGREN	- (AmmoBox * xGREN)			- (AmmoBox * CIVxMIL)	- (AmmoBox * SURxNON)		,					
			"Base.40INCRound",	AmmoBox		* wGREN	- (AmmoBox * xGREN)			- (AmmoBox * CIVxMIL)	- (AmmoBox * SURxNON)		,					
			"Base.HERocket",	AmmoBox		* wGREN	- (AmmoBox * xGREN)			- (AmmoBox * CIVxMIL)	- (AmmoBox * SURxNON)		,					
			"Base.Flare",	AmmoBox		* wFLAME	- (AmmoBox * xFLAME)						,					
			"Base.Grenade_Fragmentation",	AmmoBox	* SURx	* wGREN	- (AmmoBox * xGREN)						,					
			"Base.Grenade_Stick",	AmmoBox	* SURx	* wGREN	- (AmmoBox * xGREN)						,					
			"Base.Explosive_Landmine",	AmmoBox	* SURx	* wGREN	- (AmmoBox * xGREN)						,					
			"Base.Explosive_Claymore_P",	AmmoBox	* SURx	* wGREN	- (AmmoBox * xGREN)						,					
			"Base.PolyCan_Red_SPASClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w12g	- (w12g * x12g)						,					
			"Base.PolyCan_Red_12gDrum",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w12g	- (w12g * x12g)						,					
			"Base.PolyCan_Red_38Speed",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w357	- (w357 * x357)	- (PolyCan * xREV)					,					
			"Base.PolyCan_Red_44Speed",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w44	- (w44 * x44)	- (PolyCan * xREV)					,					
			"Base.PolyCan_Blue_9mmSSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)						,					
			"Base.PolyCan_Blue_9mmSSExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)						,					
			"Base.PolyCan_Blue_9mmClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)						,					
			"Base.PolyCan_Blue_9mmExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)						,					
			"Base.PolyCan_Blue_9mmDrum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w9	- (w9 * x9)						,					
			"Base.PolyCan_Blue_45DSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)						,					
			"Base.PolyCan_Blue_45DSExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)						,					
			"Base.PolyCan_Blue_45Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)						,					
			"Base.PolyCan_Blue_45Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)						,					
			"Base.PolyCan_Blue_45ExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w45	- (w45 * x45)						,					
			"Base.PolyCan_Brown_556Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w556	- (w556 * x556)						,					
			"Base.PolyCan_Brown_556Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w556	- (w556 * x556)						,					
			"Base.PolyCan_Brown_AKClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)						,					
			"Base.PolyCan_Brown_762Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)						,					
			"Base.PolyCan_Brown_545StdClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w545x39	- (w545x39 * x545x39)						,					
			"Base.PolyCan_Brown_545Drum",	PolyCan	* DrumMag - (PolyCan * xPolyCan)	* w545x39	- (w545x39 * x545x39)						,					
			"Base.PolyCan_Beige_308StdClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)						,					
			"Base.PolyCan_Beige_308ExtClip",	PolyCan	* ExtMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)						,					
			"Base.PolyCan_Beige_BMG",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* wBMG	- (wBMG * xBMG)			- (PolyCan * CIVxMIL)			,					
			"Base.PolyCan_Beige_K11",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* wGREN	- (wGREN * xGREN)	- (PolyCan * xKOR)		- (PolyCan * CIVxMIL)		- (PolyCan * x90)	,					
			"Base.PolyCan_Beige_SVDClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x54r	- (w762x54r * x762x54r)	- (PolyCan * xSOV)					,					
			"Base.PolyCan_Beige_SKSClip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w762x39	- (w762x39 * x762x39)	- (PolyCan * xSOV)					,					
			"Base.PolyCan_Beige_M1Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w3006	- (w3006 * x3006)	- (PolyCan * xUSA)					,					
			"Base.PolyCan_Beige_1903Clip",	PolyCan	* StdMag - (PolyCan * xPolyCan)	* w308	- (w308 * x308)						,					
		}																
	},																	
																		
	PawnShopGuns = {																	
		rolls =	GUNRollGUN	,														
		items = {																
			"Base.UmarexSS",	wBB	 * CIVx	- (wBB * xBB)		- (wBB * CIVx * xUSA)			- (wBB * CIVx * x90)	,						
			"Base.Benjamin_M397",	wBB	 * CIVx	- (wBB * xBB)		- (wBB * CIVx * xUSA)				,						
			"Base.RWS_M34",	wBB	 * CIVx	- (wBB * xBB)		- (wBB * CIVx * xUSA)			- (wBB * CIVx * x90)	,						
			"Base.VM_68",	wBB	 * CIVx	- (wBB * xBB)		- (wBB * CIVx * xUSA)				,						
			"Base.Auto_Cocker",	wBB	 * CIVx	- (wBB * xBB)		- (wBB * CIVx * xUSA)				,						
			"Base.Tippmann_SL68",	wBB	 * CIVx	- (wBB * xBB)		- (wBB * CIVx * xUSA)				,						
			"Base.Sheridan_PGP",	wBB	 * CIVx	- (wBB * xBB)		- (wBB * CIVx * xUSA)				,						
			"Base.CP33",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)			- (w22 * CIVx * x90)	,						
			"Base.Ruger_MK4",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)			- (w22 * CIVx * x90)	,						
			"Base.Ruger_MK4_2245",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)			- (w22 * CIVx * x90)	,						
			"Base.Buckmark",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)				,						
			"Base.Buckmark_Long",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)				,						
			"Base.Buckmark_Carbine",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)				,						
			"Base.HK4_22",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xEUR)				,						
			"Base.ZIP22",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)			- (w22 * CIVx * x90)	,						
			"Base.Ruger_1022",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)				,						
			"Base.Marlin_M70",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)				,						
			"Base.Cricket_22",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xBOLT)	- (w22 * CIVx * xUSA)				,						
			"Base.AR7",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)				,						
			"Base.Calico_22LR",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSMG)	- (w22 * CIVx * xUSA)				,						
			"Base.American180",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSMG)	- (w22 * CIVx * xUSA)				,						
			"Base.Winchester1903",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xLEVER)	- (w22 * CIVx * xUSA)				,						
			"Base.KRISS22_MK11_Stock",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSMG)	- (w22 * CIVx * xUSA)			- (w22 * CIVx * x90)	,						
			"Base.KRISS22_CRB_Stock",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSMG)	- (w22 * CIVx * xUSA)			- (w22 * CIVx * x90)	,						
			"Base.CMR_30",	w22	 * CIVx	- (w22 * x22)	- (w22 * CIVx * xSEMI)	- (w22 * CIVx * xUSA)			- (w22 * CIVx * x90)	,						
			"Base.G42",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xEUR)			- (w380 * CIVx * x90)	,						
			"Base.LCP380",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xUSA)			- (w380 * CIVx * x90)	,						
			"Base.BodyGuard380",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xUSA)			- (w380 * CIVx * x90)	,						
			"Base.Bersa85F",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xREST)				,						
			"Base.Colt1903",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xUSA)				,						
			"Base.Makarov380",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xSOV)				,						
			"Base.PPK",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xEUR)				,						
			"Base.HK4_380",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xEUR)				,						
			"Base.VP70",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSMG)	- (w380 * CIVx * xEUR)		- (w380 * CIVx * CIVxMIL)		,						
			"Base.VP70_Stock",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSMG)	- (w380 * CIVx * xEUR)		- (w380 * CIVx * CIVxMIL)		,						
			"Base.Vz61_Fixed",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSMG)	- (w380 * CIVx * xCZE)		- (w380 * CIVx * CIVxMIL)		,						
			"Base.Vz61_Fold",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSMG)	- (w380 * CIVx * xCZE)		- (w380 * CIVx * CIVxMIL)		,						
			"Base.BT380_Stock",	w380	 * CIVx	- (w380 * x380)	- (w380 * CIVx * xSEMI)	- (w380 * CIVx * xEUR)			- (w380 * CIVx * x90)	,						
			"Base.FN_57", 	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSEMI)	- (w57 * CIVx * xEUR)			- (w57 * CIVx * x90)	,						
			"Base.FN_57_MK2", 	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSEMI)	- (w57 * CIVx * xEUR)			- (w57 * CIVx * x90)	,						
			"Base.FN_P90",	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSMG)	- (w57 * CIVx * xEUR)	- (w57 * CIVx * CIVxLEO)		- (w57 * CIVx * x90)	,						
			"Base.FN_PS90",	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSMG)	- (w57 * CIVx * xEUR)			- (w57 * CIVx * x90)	,						
			"Base.MPA57DMG",	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSMG)	- (w57 * CIVx * xUSA)			- (w57 * CIVx * x90)	,						
			"Base.MPA57DMG_Carbine",	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSMG)	- (w57 * CIVx * xUSA)			- (w57 * CIVx * x90)	,						
			"Base.AR57_PDW",	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSMG)	- (w57 * CIVx * xUSA)			- (w57 * CIVx * x90)	,						
			"Base.AR57_PDW_Long",	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xSMG)	- (w57 * CIVx * xUSA)			- (w57 * CIVx * x90)	,						
			"Base.Ruger_PCC",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.Ruger_PCC_R",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.Ruger_PCC_M",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.HiPoint",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)				,						
			"Base.HiPoint_Carbine",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)				,						
			"Base.STAR_BM", 	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xREST)				,						
			"Base.M39",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)				,						
			"Base.MK22",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)				,						
			"Base.G43",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)			- (w9 * CIVx * x90)	,						
			"Base.CZ75",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)				,						
			"Base.CZ_75b",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)				,						
			"Base.CZ_75_SP01_SS",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)				,						
			"Base.CZ_75_SP01",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)				,						
			"Base.CZ_75_Compact",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)				,						
			"Base.CZ_75_P01",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)				,						
			"Base.CZ_2075",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)			- (w9 * CIVx * x90)	,						
			"Base.CZ_75_Shadow",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)			- (w9 * CIVx * x90)	,						
			"Base.CZ_75_Czechmate",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xCZE)			- (w9 * CIVx * x90)	,						
			"Base.EAA_Witness_9",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)				,						
			"Base.EAA_Witness_Long_9",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)				,						
			"Base.G17",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)				,						
			"Base.G18",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.G34", 	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.K5",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xKOR)				,						
			"Base.RPD_92FS",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)	- (w9 * CIVx * CIVxLEO)			,						
			"Base.M9",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)				,						
			"Base.M9A3",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)			- (w9 * CIVx * x90)	,						
			"Base.B93R",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.M5906",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)				,						
			"Base.XD9",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.MP9",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.P226",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)				,						
			"Base.APS",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xSOV)				,						
			"Base.Makarov",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xSOV)				,						
			"Base.PB",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xSOV)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.Luger",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.Luger_WW1",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.Luger_Carbine",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.UZI", 	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xREST)				,						
			"Base.UZI_Wood",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xREST)				,						
			"Base.UZI_Micro",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xREST)				,						
			"Base.BT9_Fold",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)			- (w9 * CIVx * x90)	,						
			"Base.UMP9_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)	- (w9 * CIVx * CIVxLEO)		- (w9 * CIVx * x90)	,						
			"Base.SUB2000",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.MP5_Fixed",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)	- (w9 * CIVx * CIVxLEO)			,						
			"Base.MP5_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)	- (w9 * CIVx * CIVxLEO)			,						
			"Base.MP5SD6_Fixed",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.MP5SD6_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.EVO_Fold",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xCZE)			- (w9 * CIVx * x90)	,						
			"Base.K7_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xKOR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.AUG9",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.KG9",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)				,						
			"Base.Calico_M900_Fold",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)				,						
			"Base.Calico_M950_Pistol",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)				,						
			"Base.Bizon2_01_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xSOV)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.VSS",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xSOV)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.ASVAL",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xSOV)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.M1Carbine",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSEMI)	- (w9 * CIVx * xUSA)				,						
			"Base.M2Carbine",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.M635",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)	- (w9 * CIVx * CIVxLEO)			,						
			"Base.M635S",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)	- (w9 * CIVx * CIVxLEO)			,						
			"Base.M635SD",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.MP7",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)	- (w9 * CIVx * CIVxLEO)		- (w9 * CIVx * x90)	,						
			"Base.Jatimatic",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.Sten",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.Sten_MK2",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.Sten_MK2SD",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.STAR_Z45_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.STAR_Z45_Fixed",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xEUR)		- (w9 * CIVx * CIVxMIL)		,						
			"Base.KRISS9_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.KRISS9_MLOK_Stock",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.JW3_TTI_MPX",	w9	 * CIVx	- (w9 * x9)	- (w9 * CIVx * xSMG)	- (w9 * CIVx * xUSA)			- (w9 * CIVx * x90)	,						
			"Base.M5238",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xSEMI)	- (w357 * CIVx * xUSA)				,						
			"Base.Taurus856",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xREST)			- (w357 * CIVx * x90)	,						
			"Base.Colt_Service38",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xUSA)				,						
			"Base.GP100_2",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xUSA)				,						
			"Base.GP100_4",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xUSA)				,						
			"Base.GP100_6",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xUSA)				,						
			"Base.K6S",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xUSA)			- (w357 * CIVx * x90)	,						
			"Base.Rhino_200DS",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xEUR)			- (w357 * CIVx * x90)	,						
			"Base.Rhino_40DS",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xEUR)			- (w357 * CIVx * x90)	,						
			"Base.Rhino_60DS",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xEUR)			- (w357 * CIVx * x90)	,						
			"Base.SW_327",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xUSA)			- (w357 * CIVx * x90)	,						
			"Base.M1936",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xREV)	- (w357 * CIVx * xUSA)				,						
			"Base.NEF_Handi_38",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xBREAK)	- (w357 * CIVx * xUSA)				,						
			"Base.Marlin_1894",	w357	 * CIVx	- (w357 * x357)	- (w357 * CIVx * xLEVER)	- (w357 * CIVx * xUSA)				,						
			"Base.CZ97B",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xCZE)			- (w45 * CIVx * x90)	,						
			"Base.EAA_Witness_45",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xEUR)				,						
			"Base.EAA_Witness_Long_45",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xEUR)				,						
			"Base.G21",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xEUR)				,						
			"Base.XD4",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)			- (w45 * CIVx * x90)	,						
			"Base.MP45",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)			- (w45 * CIVx * x90)	,						
			"Base.P220",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xEUR)				,						
			"Base.M4506",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.HK_MK23",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xEUR)		- (w45 * CIVx * CIVxMIL)		,						
			"Base.HK_USP",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xEUR)				,						
			"Base.HK_USP_Match",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xEUR)				,						
			"Base.PULP_1911",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.PARA1911",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.AMT1911",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.AMT1911_Long",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.M1911_Carbine",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.Colt1911",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.Colt_Kimber",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)			- (w45 * CIVx * x90)	,						
			"Base.Colt_Commander",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSEMI)	- (w45 * CIVx * xUSA)				,						
			"Base.UMP45_Stock",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xEUR)	- (w45 * CIVx * CIVxLEO)		- (w45 * CIVx * x90)	,						
			"Base.MAC10_Fold",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xUSA)				,						
			"Base.KRISS_Stock",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xUSA)			- (w45 * CIVx * x90)	,						
			"Base.Commando",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xBOLT)	- (w45 * CIVx * xEUR)		- (w45 * CIVx * CIVxMIL)		,						
			"Base.Thompson",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xUSA)				,						
			"Base.Thompson_1928",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xUSA)				,						
			"Base.M2Hyde",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xUSA)		- (w45 * CIVx * CIVxMIL)		,						
			"Base.Model55_Fold",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xUSA)		- (w45 * CIVx * CIVxMIL)		,						
			"Base.Model50",	w45	 * CIVx	- (w45 * x45)	- (w45 * CIVx * xSMG)	- (w45 * CIVx * xUSA)		- (w45 * CIVx * CIVxMIL)		,						
			"Base.Colt_Navy_1851",	w44	 * CIVx	- (w44 * x44)	- (w44 * CIVx * xREV)	- (w44 * CIVx * xUSA)				,						
			"Base.M29_44",	w44	 * CIVx	- (w44 * x44)	- (w44 * CIVx * xREV)	- (w44 * CIVx * xUSA)				,						
			"Base.M29_44Carbine",	w44	 * CIVx	- (w44 * x44)	- (w44 * CIVx * xREV)	- (w44 * CIVx * xUSA)				,						
			"Base.Automag",	w44	 * CIVx	- (w44 * x44)	- (w44 * CIVx * xSEMI)	- (w44 * CIVx * xUSA)				,						
			"Base.DEagle",	w44	 * CIVx	- (w44 * x44)	- (w44 * CIVx * xSEMI)	- (w44 * CIVx * xISR)				,						
			"Base.DEagle_Long",	w44	 * CIVx	- (w44 * x44)	- (w44 * CIVx * xSEMI)	- (w44 * CIVx * xISR)				,						
			"Base.DEagle_Hawk",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xSEMI)	- (wBMG * CIVx * xISR)				,						
			"Base.Winchester1866",	w45LC	 * CIVx	- (w44 * x44)	- (w45LC * CIVx * xLEVER)	- (w45LC * CIVx * xUSA)				,						
			"Base.Win_1894",	w44	 * CIVx	- (w44 * x44)	- (w44 * CIVx * xLEVER)	- (w44 * CIVx * xUSA)				,						
			"Base.Colt_Service45",	w45LC	 * CIVx	- (w45LC * x45LC)	- (w45LC * CIVx * xREV)	- (w45LC * CIVx * xUSA)				,						
			"Base.Judge_45LC",	w45LC	 * CIVx	- (w45LC * x45LC)	- (w45LC * CIVx * xREV)	- (w45LC * CIVx * xREST)			- (w45LC * CIVx * x90)	,						
			"Base.Judge513_45LC",	w45LC	 * CIVx	- (w45LC * x45LC)	- (w45LC * CIVx * xREV)	- (w45LC * CIVx * xREST)			- (w45LC * CIVx * x90)	,						
			"Base.Judge513_Long_45LC",	w45LC	 * CIVx	- (w45LC * x45LC)	- (w45LC * CIVx * xREV)	- (w45LC * CIVx * xREST)			- (w45LC * CIVx * x90)	,						
			"Base.TXS_804_45LC",	w45LC	 * CIVx	- (w45LC * x45LC)	- (w45LC * CIVx * xREV)	- (w45LC * CIVx * xREST)				,						
			"Base.Winchester1873",	w45LC	 * CIVx	- (w45LC * x45LC)	- (w45LC * CIVx * xLEVER)	- (w45LC * CIVx * xUSA)				,						
			"Base.Sako85",	w223	 * CIVx	- (w223 * x223)	- (w223 * CIVx * xBOLT)	- (w223 * CIVx * xEUR)				,						
			"Base.MINI14",	w223	 * CIVx	- (w223 * x223)	- (w223 * CIVx * xSEMI)	- (w223 * CIVx * xUSA)				,						
			"Base.MINI14_Stock",	w223	 * CIVx	- (w223 * x223)	- (w223 * CIVx * xSEMI)	- (w223 * CIVx * xUSA)				,						
			"Base.MINI14_T",	w223	 * CIVx	- (w223 * x223)	- (w223 * CIVx * xSEMI)	- (w223 * CIVx * xUSA)	- (w223 * CIVx * CIVxLEO)			,						
			"Base.Viper",	w223	 * CIVx	- (w223 * x223)	- (w223 * CIVx * xLEVER)	- (w223 * CIVx * xREST)			- (w223 * CIVx * x90)	,						
			"Base.Carbon15_97",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.CAR15SMG",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)	- (w556 * CIVx * CIVxLEO)			,						
			"Base.CAR15_Survival",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)	- (w556 * CIVx * CIVxLEO)			,						
			"Base.XM8Compact_Pistol",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.XM8",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.SCARSC_Stock",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.SCARL",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.SCAR_B",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.G33",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.G36",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.G36C",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.G36KV",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.G11K3",	w57	 * CIVx	- (w57 * x57)	- (w57 * CIVx * xAUTO)	- (w57 * CIVx * xEUR)		- (w57 * CIVx * CIVxMIL)	- (w57 * CIVx * x90)	,						
			"Base.MK18",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.AK5C",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.M16A1",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.M16A2",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)				,						
			"Base.M16A3",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.M723",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.XM117",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.H416",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.M4",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.M4A1",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.ADAR",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xSOV)			- (w556 * CIVx * x90)	,						
			"Base.K2C1_PH",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)	- (w556 * CIVx * CIVxLEO)		- (w556 * CIVx * x90)	,						
			"Base.K2_ADVK2",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.K2_Grunt",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.K1A_DEV",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.K1DEV",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.K2_C1",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.K2_1",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.K2_203",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.K1_1",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.DR_200",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xKOR)	- (w556 * CIVx * CIVxLEO)		- (w556 * CIVx * x90)	,						
			"Base.LVOA_C",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xSEMI)	- (w556 * CIVx * xUSA)			- (w556 * CIVx * x90)	,						
			"Base.AAC_Honey",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.AAC_HoneySD",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.Bush_AR15_MOE",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xSEMI)	- (w556 * CIVx * xUSA)				,						
			"Base.Bush_XM15",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xSEMI)	- (w556 * CIVx * xUSA)				,						
			"Base.Bush_XM15_Custom",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xSEMI)	- (w556 * CIVx * xUSA)				,						
			"Base.MCX_Virtus",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)			- (w556 * CIVx * x90)	,						
			"Base.MCX_VirtusPatrol",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)			- (w556 * CIVx * x90)	,						
			"Base.MCX_Socom",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.MCX_Spear",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xSEMI)	- (w556 * CIVx * xEUR)			- (w556 * CIVx * x90)	,						
			"Base.ColtM16",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.M16Wood",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)				,						
			"Base.M16Tape",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.FAMAS",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.FAMAS_G2",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.FAMAS_Felin",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.AUG",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)				,						
			"Base.AUG_A3",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)			- (w556 * CIVx * x90)	,						
			"Base.M85_Stock",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xSOV)				,						
			"Base.AN94",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xAUTO)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)		,						
			"Base.AK74",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xAUTO)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)		,						
			"Base.AKS74",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xAUTO)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)		,						
			"Base.AKS74U",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xAUTO)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)		,						
			"Base.AK74_Alpha",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xAUTO)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)	- (w545x39 * CIVx * x90)	,						
			"Base.AK12",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xAUTO)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)	- (w545x39 * CIVx * x90)	,						
			"Base.AK12_New",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xAUTO)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)	- (w545x39 * CIVx * x90)	,						
			"Base.RPK74",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xLMG)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)		,						
			"Base.RPK16",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xLMG)	- (w545x39 * CIVx * xSOV)		- (w545x39 * CIVx * CIVxMIL)	- (w545x39 * CIVx * x90)	,						
			"Base.L85",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.L85A2",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.L86",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.L22",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.F2000",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.Tavor",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xISR)			- (w556 * CIVx * x90)	,						
			"Base.AR18",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xUSA)				,						
			"Base.Type20",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xPAC)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.Type89",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xPAC)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.QBZ_95",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xPAC)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.Shrike",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xLMG)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.XM8LMG",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xLMG)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.M249",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xLMG)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.M249E3",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xLMG)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)	- (w556 * CIVx * x90)	,						
			"Base.K3LMG",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xLMG)	- (w556 * CIVx * xKOR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.AK47",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.AKM",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.AK103",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)		- (w762x39 * CIVx * CIVxMIL)	- (w762x39 * CIVx * x90)	,						
			"Base.MD65_Stock",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.AKMS_Stock",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.Vz58",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xCZE)				,						
			"Base.Vz58_Stock",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xCZE)				,						
			"Base.Vz58_Mini_Stock",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xCZE)				,						
			"Base.SKS",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xSEMI)	- (w762x39 * CIVx * xSOV)				,						
			"Base.SKS_PARA",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xSEMI)	- (w762x39 * CIVx * xPAC)				,						
	-- SURPLUS STORE ONLY		"Base.SKS30_A26",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xSEMI)	- (w762x39 * CIVx * xUSA)				,						
			"Base.MK47",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xSEMI)	- (w762x39 * CIVx * xUSA)			- (w762x39 * CIVx * x90)	,						
			"Base.AKM_Custom",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xUSA)			- (w762x39 * CIVx * x90)	,						
			"Base.AK74_Custom",	w545x39	 * CIVx	- (w545x39 * x545x39)	- (w545x39 * CIVx * xLMG)	- (w545x39 * CIVx * xSOV)			- (w545x39 * CIVx * x90)	,						
			"Base.Ots14_1A_01",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.Ots14_1A_02",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.Ots14_4A",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.Ots14_4A_01",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.Ots14_4A_03",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xAUTO)	- (w762x39 * CIVx * xSOV)				,						
			"Base.Ots14_4A_GL",	wGREN	 * CIVx	- (wGREN * xGREN)	- (wGREN * CIVx * xAUTO)	- (wGREN * CIVx * xSOV)		- (wGREN * CIVx * CIVxMIL)		,						
			"Base.AK308",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xSOV)			- (w308 * CIVx * x90)	,						
			"Base.SCARH",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)	- (w308 * CIVx * x90)	,						
			"Base.SCAR20",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)	- (w308 * CIVx * x90)	,						
			"Base.G28",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)	- (w308 * CIVx * x90)	,						
			"Base.G3",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.PSG1",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xSEMI)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.MSG90",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xSEMI)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.Type64",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xPAC)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.FAL",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.FAL_PARA_Stock",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.FN_FNC",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xAUTO)	- (w556 * CIVx * xEUR)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.WA2000",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xEUR)				,						
			"Base.SVD",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xSEMI)	- (w762x54r * CIVx * xSOV)		- (w762x54r * CIVx * CIVxMIL)		,						
			"Base.SVDK",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xSEMI)	- (w762x54r * CIVx * xSOV)		- (w762x54r * CIVx * CIVxMIL)		,						
			"Base.SV_98",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xBOLT)	- (w762x54r * CIVx * xSOV)		- (w762x54r * CIVx * CIVxMIL)		,						
			"Base.OTS_03_SVU",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xBOLT)	- (w762x54r * CIVx * xSOV)		- (w762x54r * CIVx * CIVxMIL)	- (w762x54r * CIVx * x90)	,						
			"Base.M14EBR",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xUSA)	- (w308 * CIVx * CIVxLEO)		- (w308 * CIVx * x90)	,						
			"Base.M14",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xUSA)				,						
			"Base.K14",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xKOR)		- (w308 * CIVx * CIVxMIL)	- (w308 * CIVx * x90)	,						
			"Base.Savage12",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xUSA)				,						
			"Base.Ruger_No1_3006",	w3006	 * CIVx	- (w3006 * x3006)	- (w3006 * CIVx * xBREAK)	- (w3006 * CIVx * xUSA)				,						
			"Base.M40",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xUSA)				,						
			"Base.M40A1",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xUSA)				,						
			"Base.M40A2",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xUSA)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.M40A3",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xUSA)	- (w308 * CIVx * CIVxLEO)			,						
			"Base.M46_Mauser",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xBOLT)	- (w762x54r * CIVx * xPAC)				,						
			"Base.Mosin",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xBOLT)	- (w762x54r * CIVx * xSOV)				,						
			"Base.MosinObrez_Pistol",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xBOLT)	- (w762x54r * CIVx * xSOV)				,						
			"Base.M1",	w3006	 * CIVx	- (w3006 * x3006)	- (w3006 * CIVx * xSEMI)	- (w3006 * CIVx * xUSA)				,						
			"Base.M1903",	w3006	 * CIVx	- (w3006 * x3006)	- (w3006 * CIVx * xBOLT)	- (w3006 * CIVx * xUSA)				,						
			"Base.BAR",	w3006	 * CIVx	- (w3006 * x3006)	- (w3006 * CIVx * xAUTO)	- (w3006 * CIVx * xUSA)		- (w3006 * CIVx * CIVxMIL)		,						
			"Base.BAR_Monitor",	w3006	 * CIVx	- (w3006 * x3006)	- (w3006 * CIVx * xAUTO)	- (w3006 * CIVx * xUSA)		- (w3006 * CIVx * CIVxMIL)		,						
			"Base.MAS36",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.MAS44",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.MAS49",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.Win_1895",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xLEVER)	- (w308 * CIVx * xUSA)				,						
			"Base.Galil",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xISR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.Galil_Sniper",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xAUTO)	- (w308 * CIVx * xISR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.Thompson_Center_3006",	w3006	 * CIVx	- (w3006 * x3006)	- (w3006 * CIVx * xBREAK)	- (w3006 * CIVx * xUSA)				,						
			"Base.Type38",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xPAC)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.Type99",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xPAC)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.L96",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xBOLT)	- (w308 * CIVx * xEUR)				,						
			"Base.M240",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xLMG)	- (w308 * CIVx * xUSA)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.G21LMG",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xLMG)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)	- (w308 * CIVx * x90)	,						
			"Base.K12",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xLMG)	- (w308 * CIVx * xKOR)		- (w308 * CIVx * CIVxMIL)	- (w308 * CIVx * x90)	,						
			"Base.PKM",	w762x54r	 * CIVx	- (w762x54r * x762x54r)	- (w762x54r * CIVx * xLMG)	- (w762x54r * CIVx * xSOV)		- (w762x54r * CIVx * CIVxMIL)		,						
			"Base.MG42",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xLMG)	- (w308 * CIVx * xEUR)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.M60",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xLMG)	- (w308 * CIVx * xUSA)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.MK43",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xLMG)	- (w308 * CIVx * xUSA)		- (w308 * CIVx * CIVxMIL)	- (w308 * CIVx * x90)	,						
			"Base.RPD",	w762x39	 * CIVx	- (w762x39 * x762x39)	- (w762x39 * CIVx * xLMG)	- (w762x39 * CIVx * xSOV)		- (w762x39 * CIVx * CIVxMIL)		,						
			"Base.DSHK_Fold",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xMINI)	- (wBMG * CIVx * xSOV)		- (wBMG * CIVx * CIVxMIL)		,						
			"Base.BOAR",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBREAK)	- (wBMG * CIVx * xUSA)				,						
			"Base.EDM96",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBOLT)	- (wBMG * CIVx * xUSA)	- (wBMG * CIVx * CIVxLEO)		- (wBMG * CIVx * x90)	,						
			"Base.M82",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xSEMI)	- (wBMG * CIVx * xUSA)		- (wBMG * CIVx * CIVxMIL)		,						
			"Base.BFG50",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBREAK)	- (wBMG * CIVx * xUSA)			- (wBMG * CIVx * x90)	,						
			"Base.Harris50",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBOLT)	- (wBMG * CIVx * xUSA)				,						
			"Base.TAC50",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBOLT)	- (wBMG * CIVx * xUSA)		- (wBMG * CIVx * CIVxMIL)		,						
			"Base.CheyTac50",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBOLT)	- (wBMG * CIVx * xUSA)		- (wBMG * CIVx * CIVxMIL)	- (wBMG * CIVx * x90)	,						
			"Base.Gepard_M6",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBOLT)	- (wBMG * CIVx * xEUR)		- (wBMG * CIVx * CIVxMIL)		,						
			"Base.OSV_96",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBOLT)	- (wBMG * CIVx * xSOV)		- (wBMG * CIVx * CIVxMIL)	- (wBMG * CIVx * x90)	,						
			"Base.Ash",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xAUTO)	- (wBMG * CIVx * xSOV)		- (wBMG * CIVx * CIVxMIL)	- (wBMG * CIVx * x90)	,						
			"Base.VSSK",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xBOLT)	- (wBMG * CIVx * xSOV)		- (wBMG * CIVx * CIVxMIL)	- (wBMG * CIVx * x90)	,						
			"Base.SW_M500",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xREV)	- (wBMG * CIVx * xUSA)			- (wBMG * CIVx * x90)	,						
			"Base.SPAS12_Fixed",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xEUR)	- (w12g * CIVx * CIVxLEO)			,						
			"Base.SPAS12_Fold",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xEUR)	- (w12g * CIVx * CIVxLEO)			,						
			"Base.Origin",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xUSA)			- (w12g * CIVx * x90)	,						
			"Base.SPAS_15",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xEUR)				,						
			"Base.USAS_12",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xAUTO)	- (w12g * CIVx * xKOR)		- (w12g * CIVx * CIVxMIL)		,						
			"Base.Shorty_Pistol",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)		- (w12g * CIVx * x90)	,						
			"Base.R11_87",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xUSA)				,						
			"Base.M870",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)				,						
			"Base.M1897",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)				,						
			"Base.DT11",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xBREAK)	- (w12g * CIVx * xEUR)				,						
			"Base.Coachgun",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xBREAK)	- (w12g * CIVx * xUSA)				,						
			"Base.Terminator",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xBREAK)	- (w12g * CIVx * xUSA)				,						
			"Base.SIX12",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xREV)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)		- (w12g * CIVx * x90)	,						
			"Base.SIX12SD",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xREV)	- (w12g * CIVx * xUSA)		- (w12g * CIVx * CIVxMIL)	- (w12g * CIVx * x90)	,						
			"Base.M870_Wingmaster",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)				,						
			"Base.M870_Police",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)			,						
			"Base.M870_MCS",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)			,						
			"Base.M870_CQB",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)			,						
			"Base.M870_Breaching_Pistol",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)			,						
			"Base.M870_Express",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)				,						
			"Base.Ithaca_M37",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)				,						
			"Base.AUTO_5",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xUSA)				,						
			"Base.A400",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xEUR)			- (w12g * CIVx * x90)	,						
			"Base.M1014",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xEUR)			- (w12g * CIVx * x90)	,						
			"Base.M1014_Fold",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xEUR)			- (w12g * CIVx * x90)	,						
			"Base.M1014_Wick",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xSEMI)	- (w12g * CIVx * xEUR)			- (w12g * CIVx * x90)	,						
			"Base.DAO12",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xREV)	- (w12g * CIVx * xREST)	- (w12g * CIVx * CIVxLEO)			,						
			"Base.M1887",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xLEVER)	- (w12g * CIVx * xUSA)				,						
			"Base.M1208",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xREV)	- (w12g * CIVx * xUSA)			- (w12g * CIVx * x90)	,						
			"Base.M1212",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xREV)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)		- (w12g * CIVx * x90)	,						
			"Base.M1216",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xREV)	- (w12g * CIVx * xUSA)	- (w12g * CIVx * CIVxLEO)		- (w12g * CIVx * x90)	,						
			"Base.AA12",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xAUTO)	- (w12g * CIVx * xUSA)		- (w12g * CIVx * CIVxMIL)	- (w12g * CIVx * x90)	,						
			"Base.CAWS",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xAUTO)	- (w12g * CIVx * xEUR)		- (w12g * CIVx * CIVxMIL)		,						
			"Base.ROYAL_SXS",	w10g	 * CIVx	- (w10g * x10g)	- (w10g * CIVx * xBREAK)	- (w10g * CIVx * xEUR)				,						
			"Base.KS23",	w4g	 * CIVx	- (w4g * x4g)	- (w4g * CIVx * xPUMP)	- (w4g * CIVx * xSOV)				,						
			"Base.KS23_S_Pistol",	w4g	 * CIVx	- (w4g * x4g)	- (w4g * CIVx * xPUMP)	- (w4g * CIVx * xSOV)				,						
			"Base.Triple_Crown",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xBREAK)	- (w12g * CIVx * xEUR)				,						
			"Base.Moss500_20",	w20g	 * CIVx	- (w20g * x20g)	- (w20g * CIVx * xPUMP)	- (w20g * CIVx * xUSA)				,						
			"Base.10855_Silver",	w20g	 * CIVx	- (w20g * x20g)	- (w20g * CIVx * xSEMI)	- (w20g * CIVx * xEUR)				,						
			"Base.Colt1855",	w20g	 * CIVx	- (w20g * x20g)	- (w20g * CIVx * xREV)	- (w20g * CIVx * xUSA)				,						
			"Base.TOZ106",	w20g	 * CIVx	- (w20g * x20g)	- (w20g * CIVx * xBOLT)	- (w20g * CIVx * xSOV)				,						
			"Base.TOZ194_Pistol",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xSOV)				,						
			"Base.Saiga12",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xAUTO)	- (w12g * CIVx * xSOV)			- (w12g * CIVx * x90)	,						
			"Base.Saiga12_Long",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xAUTO)	- (w12g * CIVx * xSOV)			- (w12g * CIVx * x90)	,						
			"Base.Saiga12_Tromix",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xAUTO)	- (w12g * CIVx * xSOV)		- (w12g * CIVx * CIVxMIL)	- (w12g * CIVx * x90)	,						
			"Base.MP133",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xSOV)			- (w12g * CIVx * x90)	,						
			"Base.MP133S_Pistol",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xSOV)			- (w12g * CIVx * x90)	,						
			"Base.KSG",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)			- (w12g * CIVx * x90)	,						
			"Base.KSG25",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xUSA)			- (w12g * CIVx * x90)	,						
			"Base.UTS15",	w12g	 * CIVx	- (w12g * x12g)	- (w12g * CIVx * xPUMP)	- (w12g * CIVx * xREST)			- (w12g * CIVx * x90)	,						
			"Base.EX41_HE",	wGREN	 * CIVx		- (wGREN * CIVx * xGREN)	- (wGREN * CIVx * xUSA)		- (wGREN * CIVx * CIVxMIL)		,						
			"Base.Federal_HE",	wGREN	 * CIVx		- (wGREN * CIVx * xGREN)	- (wGREN * CIVx * xUSA)		- (wGREN * CIVx * CIVxMIL)		,						
			"Base.M32_HE",	wGREN	 * CIVx		- (wGREN * CIVx * xGREN)	- (wGREN * CIVx * xUSA)		- (wGREN * CIVx * CIVxMIL)		,						
			"Base.GM94_HE",	wGREN	 * CIVx		- (wGREN * CIVx * xGREN)	- (wGREN * CIVx * xSOV)		- (wGREN * CIVx * CIVxMIL)	- (wGREN * CIVx * x90)	,						
			"Base.K11",	wGREN	 * CIVx	- (wGREN * CIVx * xAUTO)	- (wGREN * CIVx * xGREN)	- (wGREN * CIVx * xKOR)		- (wGREN * CIVx * CIVxMIL)	- (wGREN * CIVx * x90)	,						
			"Base.M72_LAW",	wGREN	 * CIVx		- (wGREN * CIVx * xGREN)	- (wGREN * CIVx * xUSA)		- (wGREN * CIVx * CIVxMIL)		,						
			"Base.RPG_7",	wGREN	 * CIVx		- (wGREN * CIVx * xGREN)	- (wGREN * CIVx * xSOV)		- (wGREN * CIVx * CIVxMIL)		,						
			"Base.XM214",	w556	 * CIVx	- (w556 * x556)	- (w556 * CIVx * xMINI)	- (w556 * CIVx * xUSA)		- (w556 * CIVx * CIVxMIL)		,						
			"Base.GAU17",	w308	 * CIVx	- (w308 * x308)	- (w308 * CIVx * xMINI)	- (w308 * CIVx * xUSA)		- (w308 * CIVx * CIVxMIL)		,						
			"Base.GAU19",	wBMG	 * CIVx	- (wBMG * xBMG)	- (wBMG * CIVx * xMINI)	- (wBMG * CIVx * xUSA)		- (wBMG * CIVx * CIVxMIL)		,						
			"Base.TAC15",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.HortonScout_125",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.MissionMXB_400",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.TenPointTurbo_XLT",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.HZRedback_RTS",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.Genesis_X_Bow",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.Genesis_Bow",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.Genesis_Mini_Bow",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.BowTechSR_350",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.HoytSpectra_1000",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.SlingShot_Rock",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.WristRocket_Rock",	wBOW	 * CIVx		- (wBOW * CIVx * xBOW)	- (wBOW * CIVx * xUSA)				,						
			"Base.M2A1",	wFLAME	 * CIVx		- (wFLAME * CIVx * xFLAME)	- (wFLAME * CIVx * xUSA)		- (wFLAME * CIVx * CIVxMIL)		,						
			"Base.Musk",	wFLAME	 * CIVx		- (wFLAME * CIVx * xFLAME)	- (wFLAME * CIVx * xUSA)			- (wFLAME * CIVx * x90)	,						
		},																
		dontSpawnAmmo = 		 CIVammo	,													
	},																	
																		
	GunSupplies = {																	
		rolls =	3	,														
		items = {																
			"Base.CO2_Cartridge_Box",	4							,							
			"Base.CO2_Cartridge_Box",	2							,							
			"Radio.WalkieTalkie4",	2							,							
			"Radio.WalkieTalkie5",	1							,							
			"Radio.HamRadio1",	2							,							
			"Radio.HamRadio2",	1							,							
			"Base.Cleaning",	10							,							
			"Base.Cleaning",	8							,							
			"Base.Cleaning",	6							,							
			"Base.Cleaning",	4							,							
			"Base.WD",	10							,							
			"Base.WD",	8							,							
			"Base.WD",	6							,							
			"Base.WD",	4							,							
			"Base.SolventTrap_Adapter",	8							,							
			"Base.Case_Small8",	10	 * wFLAME	- (1 * xFLAME)												
		}																
	},																	
																		
	ReloadSupplies = {																	
		rolls =	3	,														
		items = {																
			"Base.Lyman_TMag",	2			* Reload	- (1 * xReload)			,							
			"Base.Lee_LoadMaster",	2			* Reload	- (1 * xReload)			,							
			"Base.GunPowder",	8			* Reload	- (1 * xReload)			,							
			"Base.GunPowder",	6			* Reload	- (1 * xReload)			,							
			"Base.GunPowder",	4			* Reload	- (1 * xReload)			,							
			"Base.GunPowder",	2			* Reload	- (1 * xReload)			,							
			"Base.Lead57_Pack",	2	 * w57	- (1 * x57)	* Reload	- (1 * xReload)			,							
			"Base.Lead57_Pack",	1	 * w57	- (1 * x57)	* Reload	- (1 * xReload)			,							
			"Base.Lead9_Pack",	2	 * w9	- (1 * x9)	* Reload	- (1 * xReload)			,							
			"Base.Lead9_Pack",	1	 * w9	- (1 * x9)	* Reload	- (1 * xReload)			,							
			"Base.Lead38_Pack",	2	 * w357	- (1 * x357)	* Reload	- (1 * xReload)			,							
			"Base.Lead38_Pack",	1	 * w357	- (1 * x357)	* Reload	- (1 * xReload)			,							
			"Base.Lead45_Pack",	2	 * w45	- (1 * x45)	* Reload	- (1 * xReload)			,							
			"Base.Lead45_Pack",	1	 * w45	- (1 * x45)	* Reload	- (1 * xReload)			,							
			"Base.Lead44_Pack",	2	 * w44	- (1 * x44)	* Reload	- (1 * xReload)			,							
			"Base.Lead44_Pack",	1	 * w44	- (1 * x44)	* Reload	- (1 * xReload)			,							
			"Base.Lead50_Pack",	2	 * wBMG	- (1 * xBMG)	* Reload	- (1 * xReload)			,							
			"Base.Lead50_Pack",	1	 * wBMG	- (1 * xBMG)	* Reload	- (1 * xReload)			,							
			"Base.Lead556_Pack",	2	 * w556	- (1 * x556)	* Reload	- (1 * xReload)			,							
			"Base.Lead556_Pack",	1	 * w556	- (1 * x556)	* Reload	- (1 * xReload)			,							
			"Base.Lead545_Pack",	2	 * w545x39	- (1 * x545x39)	* Reload	- (1 * xReload)			,							
			"Base.Lead545_Pack",	1	 * w545x39	- (1 * x545x39)	* Reload	- (1 * xReload)			,							
			"Base.Lead30_Pack",	2			* Reload	- (1 * xReload)			,							
			"Base.Lead30_Pack",	1			* Reload	- (1 * xReload)			,							
			"Base.Lead00Buck_Pack",	2	 * w12g	- (1 * x12g)	* Reload	- (1 * xReload)			,							
			"Base.Lead00Buck_Pack",	1	 * w12g	- (1 * x12g)	* Reload	- (1 * xReload)			,							
			"Base.PrimerSM_Pack",	4			* Reload	- (1 * xReload)			,							
			"Base.PrimerSM_Pack",	2			* Reload	- (1 * xReload)			,							
			"Base.PrimerLG_Pack",	4			* Reload	- (1 * xReload)			,							
			"Base.PrimerLG_Pack",	2			* Reload	- (1 * xReload)			,							
			"Base.PrimerSG_Pack",	4	 * w12g	- (1 * x12g)	* Reload	- (1 * xReload)			,							
			"Base.PrimerSG_Pack",	2	 * w12g	- (1 * x12g)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Hull4g",	1	 * w4g	- (1 * x4g)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Hull10g",	1	 * w10g	- (1 * x10g)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Hull12g",	1	 * w12g	- (1 * x12g)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Hull20g",	1	 * w20g	- (1 * x20g)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Hull410g",	1	 * w45LC	- (1 * x45LC)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass50BMG",	1	 * wBMG	- (1 * xBMG)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass3006",	1	 * w3006	- (1 * x3006)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass762x54r",	1	 * w762x54r	- (1 * x762x54r)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass308",	1	 * w308	- (1 * x308)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass762x39",	1	 * w762x39	- (1 * x762x39)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass545x39",	1	 * w545x39	- (1 * x545x39)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass556",	1	 * w556	- (1 * x556)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass223",	1	 * w223	- (1 * x223)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass50MAG",	1	 * wBMG	- (1 * xBMG)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass4570",	1	 * w4570	- (1 * x4570)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass44",	1	 * w44	- (1 * x44)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass45LC",	1	 * w45LC	- (1 * x45LC)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass45",	1	 * w45	- (1 * x45)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass357",	1	 * w357	- (1 * x357)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass38",	1	 * w357	- (1 * x357)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass9",	1	 * w9	- (1 * x9)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass380",	1	 * w380	- (1 * x380)	* Reload	- (1 * xReload)			,							
			"Base.Bag_Brass57",	1	 * w57	- (1 * x57)	* Reload	- (1 * xReload)			,							
		}																
	},																	
																		
	MILItems = {																	
		rolls =	1	,														
		items = {																
			"Base.HolsterSimple",	1							,							
			"Base.HolsterDouble",	0.5							,							
			"Base.Glasses_Aviators",	0.2							,							
			"Base.Bag_ALICEpack_Army",	0.3					- (Armor * CIVxMIL)	- (Armor * x90)	,							
			"Base.HuntingKnife",	0.2							,							
																		
		}																
	},																	
																		
	DelinquentItems = {								-- <<=== WAITING FOR PROC, NOT USED									
		rolls =	1	,														
		items = {																
			"Base.Butterfly",	0.01	- (LgKnife * xLgKnife)	,												
			"Base.PushDagger",	0.01	- (LgKnife * xLgKnife)	,												
			"Base.Karambit",	0.01	- (SmKnife * xSmKnife)	,												
			"Base.UmarexSS",	0.01	- (wBB * xBB)	,												
			"Base.BB177Box",	0.01	- (wBB * xBB)	,												
		}																
	},																	
																		
	RandomCaseAndCan = {																	
		rolls =	1	,														
		items = {																
			"Base.Case_Cute",	Case	 * 40				- (Case * xCase)	,	-- TIMES 10 TO ALLOW GLOVEBOX RATE TO REMAIN LOW							
			"Base.Case_Small8",	Case	 * 40	* wFLAME			- (Case * xCase)	,								
			"Base.Case_Small1",	Case	 * 40	* w22			- (Case * xCase)	,								
			"Base.Case_Small2",	Case	 * 40	* w380			- (Case * xCase)	,								
			"Base.Case_Small3",	Case	 * 40	* w9			- (Case * xCase)	,								
			"Base.Case_Small4",	Case	 * 40	* w357			- (Case * xCase)	,								
			"Base.Case_Small5",	Case	 * 40	* w45			- (Case * xCase)	,								
			"Base.Case_Small6",	Case	 * 40	* w45			- (Case * xCase)	,								
			"Base.Case_Small7",	Case	 * 40	* w44			- (Case * xCase)	,								
			"Base.Case_Medium1",	Case	 * 40	* w380			- (Case * xCase)	,								
			"Base.Case_Medium2",	Case	 * 40	* w9			- (Case * xCase)	,								
			"Base.Case_Medium3",	Case	 * 40	* w45			- (Case * xCase)	,								
			"Base.Case_Medium4",	Case	 * 40	* w556			- (Case * xCase)	,								
			"Base.Case_Medium5",	Case	 * 40	* w762x39			- (Case * xCase)	,								
			"Base.Case_Medium6",	Case	 * 40	* w12g			- (Case * xCase)	,								
			"Base.Case_Large1",	Case	 * 40				- (Case * xCase)	,								
			"Base.Case_Large2",	Case	 * 40	* w545x39			- (Case * xCase)	,								
			"Base.Case_Large3",	Case	 * 40	* w556			- (Case * xCase)	,								
			"Base.Case_Large4",	Case	 * 40	* w762x39			- (Case * xCase)	,								
			"Base.Case_Large5",	Case	 * 40	* w308			- (Case * xCase)	,								
			"Base.Case_Large6",	Case	 * 40	* w12g			- (Case * xCase)	,								
			"Base.Case_Large7",	Case	 * 40	* w12g			- (Case * xCase)	,								
			"Base.Case_Heavy1",	Case	 * 40	* wGREN			- (Case * xCase)	,								
			"Base.Case_Heavy2",	Case	 * 40	* w556			- (Case * xCase)	,								
			"Base.Case_Heavy3",	Case	 * 40	* w308			- (Case * xCase)	,								
			"Base.Case_Heavy4",	Case	 * 40	* wBMG			- (Case * xCase)	,								
			"Base.AmmoCan30_MIX",	Case	 * 40					,								
			"Base.AmmoCan50_MIX",	Case	 * 40					,								
			"Base.AmmoCan50_SHOT",	Case	 * 40					,								
		}																
	},																	
																		
	FirearmWeapons = {																	
		rolls =	1	,					-- <<=== 2 iIS WAY TOO HIGH FOR BIG LIST									
		items = {																
			"Base.UmarexSS",	wBB	- (wBB * CIVx * x90)	- (wBB * xBB)		- (wBB * SECx * xUSA)	,									
			"Base.Benjamin_M397",	wBB		- (wBB * xBB)		- (wBB * SECx * xUSA)	,									
			"Base.RWS_M34",	wBB	- (wBB * CIVx * x90)	- (wBB * xBB)		- (wBB * SECx * xUSA)	,									
			"Base.VM_68",	wBB		- (wBB * xBB)		- (wBB * SECx * xUSA)	,									
			"Base.Auto_Cocker",	wBB		- (wBB * xBB)		- (wBB * SECx * xUSA)	,									
			"Base.Tippmann_SL68",	wBB		- (wBB * xBB)		- (wBB * SECx * xUSA)	,									
			"Base.Sheridan_PGP",	wBB		- (wBB * xBB)		- (wBB * SECx * xUSA)	,									
			"Base.CP33",	w22	- (w22 * CIVx * x90)	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)	,									
			"Base.Ruger_MK4",	w22	- (w22 * CIVx * x90)	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)	,									
			"Base.Ruger_MK4_2245",	w22	- (w22 * CIVx * x90)	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)	,									
			"Base.Buckmark",	w22		- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)	,									
			"Base.Buckmark_Long",	w22		- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)	,									
			"Base.Buckmark_Carbine",	w22		- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)	,									
			"Base.HK4_22",	w22		- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xEUR)	,									
			"Base.ZIP22",	w22	- (w22 * CIVx * x90)	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)	,									
			"Base.Ruger_1022",	w22		- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)	,									
			"Base.Marlin_M70",	w22		- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)	,									
			"Base.Cricket_22",	w22		- (w22 * x22)	- (w22 * SECx * xBOLT)	- (w22 * SECx * xUSA)	,									
			"Base.AR7",	w22		- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)	,									
			"Base.Calico_22LR",	w22		- (w22 * x22)	- (w22 * SECx * xSMG)	- (w22 * SECx * xUSA)	,									
			"Base.American180",	w22		- (w22 * x22)	- (w22 * SECx * xSMG)	- (w22 * SECx * xUSA)	,									
			"Base.Winchester1903",	w22		- (w22 * x22)	- (w22 * SECx * xLEVER)	- (w22 * SECx * xUSA)	,									
			"Base.KRISS22_MK11_Stock",	w22	- (w22 * CIVx * x90)	- (w22 * x22)	- (w22 * SECx * xSMG)	- (w22 * SECx * xUSA)	,									
			"Base.KRISS22_CRB_Stock",	w22	- (w22 * CIVx * x90)	- (w22 * x22)	- (w22 * SECx * xSMG)	- (w22 * SECx * xUSA)	,									
			"Base.CMR_30",	w22	- (w22 * CIVx * x90)	- (w22 * x22)	- (w22 * SECx * xSEMI)	- (w22 * SECx * xUSA)	,									
			"Base.G42",	w380	- (w380 * CIVx * x90)	- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xEUR)	,									
			"Base.LCP380",	w380	- (w380 * CIVx * x90)	- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xUSA)	,									
			"Base.BodyGuard380",	w380	- (w380 * CIVx * x90)	- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xUSA)	,									
			"Base.Bersa85F",	w380		- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xREST)	,									
			"Base.Colt1903",	w380		- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xUSA)	,									
			"Base.Makarov380",	w380		- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xSOV)	,									
			"Base.PPK",	w380		- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xEUR)	,									
			"Base.HK4_380",	w380		- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xEUR)	,									
			"Base.VP70",	w380		- (w380 * x380)	- (w380 * SECx * xSMG)	- (w380 * SECx * xEUR)	,									
			"Base.VP70_Stock",	w380		- (w380 * x380)	- (w380 * SECx * xSMG)	- (w380 * SECx * xEUR)	,									
			"Base.Vz61_Fixed",	w380		- (w380 * x380)	- (w380 * SECx * xSMG)	- (w380 * SECx * xCZE)	,									
			"Base.Vz61_Fold",	w380		- (w380 * x380)	- (w380 * SECx * xSMG)	- (w380 * SECx * xCZE)	,									
			"Base.BT380_Stock",	w380	- (w380 * CIVx * x90)	- (w380 * x380)	- (w380 * SECx * xSEMI)	- (w380 * SECx * xEUR)	,									
			"Base.FN_57", 	w57	- (w57 * CIVx * x90)	- (w57 * x57)	- (w57 * SECx * xSEMI)	- (w57 * SECx * xEUR)	,									
			"Base.FN_57_MK2", 	w57	- (w57 * CIVx * x90)	- (w57 * x57)	- (w57 * SECx * xSEMI)	- (w57 * SECx * xEUR)	,									
			"Base.FN_P90",	w57	- (w57 * CIVx * x90)	- (w57 * x57)	- (w57 * SECx * xSMG)	- (w57 * SECx * xEUR)	,									
			"Base.FN_PS90",	w57	- (w57 * CIVx * x90)	- (w57 * x57)	- (w57 * SECx * xSMG)	- (w57 * SECx * xEUR)	,									
			"Base.MPA57DMG",	w57	- (w57 * CIVx * x90)	- (w57 * x57)	- (w57 * SECx * xSMG)	- (w57 * SECx * xUSA)	,									
			"Base.MPA57DMG_Carbine",	w57	- (w57 * CIVx * x90)	- (w57 * x57)	- (w57 * SECx * xSMG)	- (w57 * SECx * xUSA)	,									
			"Base.AR57_PDW",	w57	- (w57 * CIVx * x90)	- (w57 * x57)	- (w57 * SECx * xSMG)	- (w57 * SECx * xUSA)	,									
			"Base.AR57_PDW_Long",	w57	- (w57 * CIVx * x90)	- (w57 * x57)	- (w57 * SECx * xSMG)	- (w57 * SECx * xUSA)	,									
			"Base.Ruger_PCC",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)	,									
			"Base.Ruger_PCC_R",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)	,									
			"Base.Ruger_PCC_M",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)	,									
			"Base.HiPoint",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)	,									
			"Base.HiPoint_Carbine",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)	,									
			"Base.STAR_BM", 	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xREST)	,									
			"Base.M39",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)	,									
			"Base.MK22",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)	,									
			"Base.G43",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)	,									
			"Base.CZ75",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)	,									
			"Base.CZ_75b",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)	,									
			"Base.CZ_75_SP01_SS",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)	,									
			"Base.CZ_75_SP01",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)	,									
			"Base.CZ_75_Compact",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)	,									
			"Base.CZ_75_P01",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)	,									
			"Base.CZ_2075",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)	,									
			"Base.CZ_75_Shadow",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)	,									
			"Base.CZ_75_Czechmate",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xCZE)	,									
			"Base.EAA_Witness_9",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)	,									
			"Base.EAA_Witness_Long_9",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)	,									
			"Base.G17",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)	,									
			"Base.G18",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.G34", 	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)	,									
			"Base.K5",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xKOR)	,									
			"Base.RPD_92FS",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)	,									
			"Base.M9",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)	,									
			"Base.M9A3",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)	,									
			"Base.B93R",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.M5906",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)	,									
			"Base.XD9",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)	,									
			"Base.MP9",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)	,									
			"Base.P226",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)	,									
			"Base.APS",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xSOV)	,									
			"Base.Makarov",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xSOV)	,									
			"Base.PB",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xSOV)	,									
			"Base.Luger",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)	,									
			"Base.Luger_WW1",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)	,									
			"Base.Luger_Carbine",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xEUR)	,									
			"Base.UZI", 	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xREST)	,									
			"Base.UZI_Wood",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xREST)	,									
			"Base.UZI_Micro",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xREST)	,									
			"Base.BT9_Fold",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.UMP9_Stock",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.SUB2000",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)	,									
			"Base.MP5_Fixed",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.MP5_Stock",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.MP5SD6_Fixed",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.MP5SD6_Stock",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.EVO_Fold",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xCZE)	,									
			"Base.K7_Stock",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xKOR)	,									
			"Base.AUG9",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.KG9",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)	,									
			"Base.Calico_M900_Fold",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)	,									
			"Base.Calico_M950_Pistol",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)	,									
			"Base.Bizon2_01_Stock",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xSOV)	,									
			"Base.VSS",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xSOV)	,									
			"Base.ASVAL",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xSOV)	,									
			"Base.M1Carbine",	w9		- (w9 * x9)	- (w9 * SECx * xSEMI)	- (w9 * SECx * xUSA)	,									
			"Base.M2Carbine",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)	,									
			"Base.M635",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)	,									
			"Base.M635S",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)	,									
			"Base.M635SD",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)	,									
			"Base.MP7",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.Jatimatic",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.Sten",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.Sten_MK2",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.Sten_MK2SD",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.STAR_Z45_Stock",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.STAR_Z45_Fixed",	w9		- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xEUR)	,									
			"Base.KRISS9_Stock",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)	,									
			"Base.KRISS9_MLOK_Stock",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)	,									
			"Base.JW3_TTI_MPX",	w9	- (w9 * CIVx * x90)	- (w9 * x9)	- (w9 * SECx * xSMG)	- (w9 * SECx * xUSA)	,									
			"Base.M5238",	w357		- (w357 * x357)	- (w357 * SECx * xSEMI)	- (w357 * SECx * xUSA)	,									
			"Base.Taurus856",	w357	- (w357 * CIVx * x90)	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xREST)	,									
			"Base.Colt_Service38",	w357		- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xUSA)	,									
			"Base.GP100_2",	w357		- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xUSA)	,									
			"Base.GP100_4",	w357		- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xUSA)	,									
			"Base.GP100_6",	w357		- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xUSA)	,									
			"Base.K6S",	w357	- (w357 * CIVx * x90)	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xUSA)	,									
			"Base.Rhino_200DS",	w357	- (w357 * CIVx * x90)	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xEUR)	,									
			"Base.Rhino_40DS",	w357	- (w357 * CIVx * x90)	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xEUR)	,									
			"Base.Rhino_60DS",	w357	- (w357 * CIVx * x90)	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xEUR)	,									
			"Base.SW_327",	w357	- (w357 * CIVx * x90)	- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xUSA)	,									
			"Base.M1936",	w357		- (w357 * x357)	- (w357 * SECx * xREV)	- (w357 * SECx * xUSA)	,									
			"Base.NEF_Handi_38",	w357		- (w357 * x357)	- (w357 * SECx * xBREAK)	- (w357 * SECx * xUSA)	,									
			"Base.Marlin_1894",	w357		- (w357 * x357)	- (w357 * SECx * xLEVER)	- (w357 * SECx * xUSA)	,									
			"Base.CZ97B",	w45	- (w45 * CIVx * x90)	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xCZE)	,									
			"Base.EAA_Witness_45",	w45		- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xEUR)	,									
			"Base.EAA_Witness_Long_45",	w45		- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xEUR)	,									
			"Base.G21",	w45		- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xEUR)	,									
			"Base.XD4",	w45	- (w45 * CIVx * x90)	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)	,									
			"Base.MP45",	w45	- (w45 * CIVx * x90)	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)	,									
			"Base.P220",	w45		- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xEUR)	,									
			"Base.M4506",	w45		- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)	,									
			"Base.HK_MK23",	w45		- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xEUR)	,									
			"Base.HK_USP",	w45		- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xEUR)	,									
			"Base.HK_USP_Match",	w45		- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xEUR)	,									
			"Base.PULP_1911",	w45		- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)	,									
			"Base.PARA1911",	w45		- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)	,									
			"Base.AMT1911",	w45		- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)	,									
			"Base.AMT1911_Long",	w45		- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)	,									
			"Base.M1911_Carbine",	w45		- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)	,									
			"Base.Colt1911",	w45		- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)	,									
			"Base.Colt_Kimber",	w45	- (w45 * CIVx * x90)	- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)	,									
			"Base.Colt_Commander",	w45		- (w45 * x45)	- (w45 * SECx * xSEMI)	- (w45 * SECx * xUSA)	,									
			"Base.UMP45_Stock",	w45	- (w45 * CIVx * x90)	- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xEUR)	,									
			"Base.MAC10_Fold",	w45		- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xUSA)	,									
			"Base.KRISS_Stock",	w45	- (w45 * CIVx * x90)	- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xUSA)	,									
			"Base.Commando",	w45		- (w45 * x45)	- (w45 * SECx * xBOLT)	- (w45 * SECx * xEUR)	,									
			"Base.Thompson",	w45		- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xUSA)	,									
			"Base.Thompson_1928",	w45		- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xUSA)	,									
			"Base.M2Hyde",	w45		- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xUSA)	,									
			"Base.Model55_Fold",	w45		- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xUSA)	,									
			"Base.Model50",	w45		- (w45 * x45)	- (w45 * SECx * xSMG)	- (w45 * SECx * xUSA)	,									
			"Base.Colt_Navy_1851",	w44		- (w44 * x44)	- (w44 * SECx * xREV)	- (w44 * SECx * xUSA)	,									
			"Base.M29_44",	w44		- (w44 * x44)	- (w44 * SECx * xREV)	- (w44 * SECx * xUSA)	,									
			"Base.M29_44Carbine",	w44		- (w44 * x44)	- (w44 * SECx * xREV)	- (w44 * SECx * xUSA)	,									
			"Base.Automag",	w44		- (w44 * x44)	- (w44 * SECx * xSEMI)	- (w44 * SECx * xUSA)	,									
			"Base.DEagle",	w44		- (w44 * x44)	- (w44 * SECx * xSEMI)	- (w44 * SECx * xISR)	,									
			"Base.DEagle_Long",	w44		- (w44 * x44)	- (w44 * SECx * xSEMI)	- (w44 * SECx * xISR)	,									
			"Base.DEagle_Hawk",	wBMG		- (wBMG * xBMG)	- (wBMG * SECx * xSEMI)	- (wBMG * SECx * xISR)	,									
			"Base.Winchester1866",	w45LC		- (w44 * x44)	- (w45LC * SECx * xLEVER)	- (w45LC * SECx * xUSA)	,									
			"Base.Win_1894",	w44		- (w44 * x44)	- (w44 * SECx * xLEVER)	- (w44 * SECx * xUSA)	,									
			"Base.Colt_Service45",	w45LC		- (w45LC * x45LC)	- (w45LC * SECx * xREV)	- (w45LC * SECx * xUSA)	,									
			"Base.Judge_45LC",	w45LC	- (w45LC * CIVx * x90)	- (w45LC * x45LC)	- (w45LC * SECx * xREV)	- (w45LC * SECx * xREST)	,									
			"Base.Judge513_45LC",	w45LC	- (w45LC * CIVx * x90)	- (w45LC * x45LC)	- (w45LC * SECx * xREV)	- (w45LC * SECx * xREST)	,									
			"Base.Judge513_Long_45LC",	w45LC	- (w45LC * CIVx * x90)	- (w45LC * x45LC)	- (w45LC * SECx * xREV)	- (w45LC * SECx * xREST)	,									
			"Base.TXS_804_45LC",	w45LC		- (w45LC * x45LC)	- (w45LC * SECx * xREV)	- (w45LC * SECx * xREST)	,									
			"Base.Winchester1873",	w45LC		- (w45LC * x45LC)	- (w45LC * SECx * xLEVER)	- (w45LC * SECx * xUSA)	,									
			"Base.Sako85",	w223		- (w223 * x223)	- (w223 * SECx * xBOLT)	- (w223 * SECx * xEUR)	,									
			"Base.MINI14",	w223		- (w223 * x223)	- (w223 * SECx * xSEMI)	- (w223 * SECx * xUSA)	,									
			"Base.MINI14_Stock",	w223		- (w223 * x223)	- (w223 * SECx * xSEMI)	- (w223 * SECx * xUSA)	,									
			"Base.MINI14_T",	w223		- (w223 * x223)	- (w223 * SECx * xSEMI)	- (w223 * SECx * xUSA)	,									
			"Base.Viper",	w223	- (w223 * CIVx * x90)	- (w223 * x223)	- (w223 * SECx * xLEVER)	- (w223 * SECx * xREST)	,									
			"Base.Carbon15_97",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.CAR15SMG",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.CAR15_Survival",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.XM8Compact_Pistol",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.XM8",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.SCARSC_Stock",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.SCARL",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.SCAR_B",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.G33",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.G36",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.G36C",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.G36KV",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.G11K3",	w57	- (w57 * CIVx * x90)	- (w57 * x57)	- (w57 * SECx * xAUTO)	- (w57 * SECx * xEUR)	,									
			"Base.MK18",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.AK5C",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.M16A1",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.M16A2",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.M16A3",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.M723",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.XM117",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.H416",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.M4",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.M4A1",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.ADAR",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xSOV)	,									
			"Base.K2C1_PH",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)	,									
			"Base.K2_ADVK2",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)	,									
			"Base.K2_Grunt",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)	,									
			"Base.K1A_DEV",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)	,									
			"Base.K1DEV",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)	,									
			"Base.K2_C1",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)	,									
			"Base.K2_1",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)	,									
			"Base.K2_203",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)	,									
			"Base.K1_1",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)	,									
			"Base.DR_200",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xKOR)	,									
			"Base.LVOA_C",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xSEMI)	- (w556 * SECx * xUSA)	,									
			"Base.AAC_Honey",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.AAC_HoneySD",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.Bush_AR15_MOE",	w556		- (w556 * x556)	- (w556 * SECx * xSEMI)	- (w556 * SECx * xUSA)	,									
			"Base.Bush_XM15",	w556		- (w556 * x556)	- (w556 * SECx * xSEMI)	- (w556 * SECx * xUSA)	,									
			"Base.Bush_XM15_Custom",	w556		- (w556 * x556)	- (w556 * SECx * xSEMI)	- (w556 * SECx * xUSA)	,									
			"Base.MCX_Virtus",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.MCX_VirtusPatrol",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.MCX_Socom",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.MCX_Spear",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xSEMI)	- (w556 * SECx * xEUR)	,									
			"Base.ColtM16",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.M16Wood",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.M16Tape",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.FAMAS",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.FAMAS_G2",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.FAMAS_Felin",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.AUG",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.AUG_A3",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.M85_Stock",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xSOV)	,									
			"Base.AN94",	w545x39		- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xSOV)	,									
			"Base.AK74",	w545x39		- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xSOV)	,									
			"Base.AKS74",	w545x39		- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xSOV)	,									
			"Base.AKS74U",	w545x39		- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xSOV)	,									
			"Base.AK74_Alpha",	w545x39	- (w545x39 * CIVx * x90)	- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xSOV)	,									
			"Base.AK12",	w545x39	- (w545x39 * CIVx * x90)	- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xSOV)	,									
			"Base.AK12_New",	w545x39	- (w545x39 * CIVx * x90)	- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xSOV)	,									
			"Base.RPK74",	w545x39		- (w545x39 * x545x39)	- (w545x39 * SECx * xLMG)	- (w545x39 * SECx * xSOV)	,									
			"Base.RPK16",	w545x39	- (w545x39 * CIVx * x90)	- (w545x39 * x545x39)	- (w545x39 * SECx * xLMG)	- (w545x39 * SECx * xSOV)	,									
			"Base.L85",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.L85A2",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.L86",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.L22",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.F2000",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.Tavor",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xISR)	,									
			"Base.AR18",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xUSA)	,									
			"Base.Type20",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xPAC)	,									
			"Base.Type89",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xPAC)	,									
			"Base.QBZ_95",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xPAC)	,									
			"Base.Shrike",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xLMG)	- (w556 * SECx * xUSA)	,									
			"Base.XM8LMG",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xLMG)	- (w556 * SECx * xEUR)	,									
			"Base.M249",	w556		- (w556 * x556)	- (w556 * SECx * xLMG)	- (w556 * SECx * xUSA)	,									
			"Base.M249E3",	w556	- (w556 * CIVx * x90)	- (w556 * x556)	- (w556 * SECx * xLMG)	- (w556 * SECx * xUSA)	,									
			"Base.K3LMG",	w556		- (w556 * x556)	- (w556 * SECx * xLMG)	- (w556 * SECx * xKOR)	,									
			"Base.AK47",	w762x39		- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)	,									
			"Base.AKM",	w762x39		- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)	,									
			"Base.AK103",	w762x39	- (w762x39 * CIVx * x90)	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)	,									
			"Base.MD65_Stock",	w762x39		- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)	,									
			"Base.AKMS_Stock",	w762x39		- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)	,									
			"Base.Vz58",	w762x39		- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xCZE)	,									
			"Base.Vz58_Stock",	w762x39		- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xCZE)	,									
			"Base.Vz58_Mini_Stock",	w762x39		- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xCZE)	,									
			"Base.SKS",	w762x39		- (w762x39 * x762x39)	- (w762x39 * SECx * xSEMI)	- (w762x39 * SECx * xSOV)	,									
			"Base.SKS_PARA",	w762x39		- (w762x39 * x762x39)	- (w762x39 * SECx * xSEMI)	- (w762x39 * SECx * xPAC)	,									
			"Base.MK47",	w762x39	- (w762x39 * CIVx * x90)	- (w762x39 * x762x39)	- (w762x39 * SECx * xSEMI)	- (w762x39 * SECx * xUSA)	,									
			"Base.AKM_Custom",	w762x39	- (w762x39 * CIVx * x90)	- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xUSA)	,									
			"Base.AK74_Custom",	w545x39	- (w545x39 * CIVx * x90)	- (w545x39 * x545x39)	- (w545x39 * SECx * xAUTO)	- (w545x39 * SECx * xUSA)	,									
			"Base.Ots14_1A_01",	w762x39		- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)	,									
			"Base.Ots14_1A_02",	w762x39		- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)	,									
			"Base.Ots14_4A",	w762x39		- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)	,									
			"Base.Ots14_4A_01",	w762x39		- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)	,									
			"Base.Ots14_4A_03",	w762x39		- (w762x39 * x762x39)	- (w762x39 * SECx * xAUTO)	- (w762x39 * SECx * xSOV)	,									
			"Base.Ots14_4A_GL",	wGREN		- (wGREN * xGREN)	- (wGREN * SECx * xAUTO)	- (wGREN * SECx * xSOV)	,									
			"Base.AK308",	w308	- (w308 * CIVx * x90)	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xSOV)	,									
			"Base.SCARH",	w308	- (w308 * CIVx * x90)	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)	,									
			"Base.SCAR20",	w308	- (w308 * CIVx * x90)	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)	,									
			"Base.G28",	w308	- (w308 * CIVx * x90)	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)	,									
			"Base.G3",	w308		- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)	,									
			"Base.PSG1",	w308		- (w308 * x308)	- (w308 * SECx * xSEMI)	- (w308 * SECx * xEUR)	,									
			"Base.MSG90",	w308		- (w308 * x308)	- (w308 * SECx * xSEMI)	- (w308 * SECx * xEUR)	,									
			"Base.Type64",	w308		- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xPAC)	,									
			"Base.FAL",	w308		- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)	,									
			"Base.FAL_PARA_Stock",	w308		- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)	,									
			"Base.FN_FNC",	w556		- (w556 * x556)	- (w556 * SECx * xAUTO)	- (w556 * SECx * xEUR)	,									
			"Base.WA2000",	w308		- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xEUR)	,									
			"Base.SVD",	w762x54r		- (w762x54r * x762x54r)	- (w762x54r * SECx * xSEMI)	- (w762x54r * SECx * xSOV)	,									
			"Base.SVDK",	w762x54r		- (w762x54r * x762x54r)	- (w762x54r * SECx * xSEMI)	- (w762x54r * SECx * xSOV)	,									
			"Base.SV_98",	w762x54r		- (w762x54r * x762x54r)	- (w762x54r * SECx * xBOLT)	- (w762x54r * SECx * xSOV)	,									
			"Base.OTS_03_SVU",	w762x54r	- (w762x54r * CIVx * x90)	- (w762x54r * x762x54r)	- (w762x54r * SECx * xBOLT)	- (w762x54r * SECx * xSOV)	,									
			"Base.M14EBR",	w308	- (w308 * CIVx * x90)	- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xUSA)	,									
			"Base.M14",	w308		- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xUSA)	,									
			"Base.K14",	w308	- (w308 * CIVx * x90)	- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xKOR)	,									
			"Base.Savage12",	w308		- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xUSA)	,									
			"Base.Ruger_No1_3006",	w3006		- (w3006 * x3006)	- (w3006 * SECx * xBREAK)	- (w3006 * SECx * xUSA)	,									
			"Base.M40",	w308		- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xUSA)	,									
			"Base.M40A1",	w308		- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xUSA)	,									
			"Base.M40A2",	w308		- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xUSA)	,									
			"Base.M40A3",	w308		- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xUSA)	,									
			"Base.Mosin",	w762x54r		- (w762x54r * x762x54r)	- (w762x54r * SECx * xBOLT)	- (w762x54r * SECx * xSOV)	,									
			"Base.MosinObrez_Pistol",	w762x54r		- (w762x54r * x762x54r)	- (w762x54r * SECx * xBOLT)	- (w762x54r * SECx * xSOV)	,									
			"Base.M1",	w3006		- (w3006 * x3006)	- (w3006 * SECx * xSEMI)	- (w3006 * SECx * xUSA)	,									
			"Base.M1903",	w3006		- (w3006 * x3006)	- (w3006 * SECx * xBOLT)	- (w3006 * SECx * xUSA)	,									
			"Base.BAR",	w3006		- (w3006 * x3006)	- (w3006 * SECx * xAUTO)	- (w3006 * SECx * xUSA)	,									
			"Base.BAR_Monitor",	w3006		- (w3006 * x3006)	- (w3006 * SECx * xAUTO)	- (w3006 * SECx * xUSA)	,									
			"Base.MAS36",	w308		- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)	,									
			"Base.MAS44",	w308		- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)	,									
			"Base.MAS49",	w308		- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xEUR)	,									
			"Base.Win_1895",	w308		- (w308 * x308)	- (w308 * SECx * xLEVER)	- (w308 * SECx * xUSA)	,									
			"Base.Galil",	w308		- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xISR)	,									
			"Base.Galil_Sniper",	w308		- (w308 * x308)	- (w308 * SECx * xAUTO)	- (w308 * SECx * xISR)	,									
			"Base.Thompson_Center_3006",	w3006		- (w3006 * x3006)	- (w3006 * SECx * xBREAK)	- (w3006 * SECx * xUSA)	,									
			"Base.Type38",	w308		- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xPAC)	,									
			"Base.Type99",	w308		- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xPAC)	,									
			"Base.L96",	w308		- (w308 * x308)	- (w308 * SECx * xBOLT)	- (w308 * SECx * xEUR)	,									
			"Base.M240",	w308		- (w308 * x308)	- (w308 * SECx * xLMG)	- (w308 * SECx * xUSA)	,									
			"Base.G21LMG",	w308	- (w308 * CIVx * x90)	- (w308 * x308)	- (w308 * SECx * xLMG)	- (w308 * SECx * xEUR)	,									
			"Base.K12",	w308	- (w308 * CIVx * x90)	- (w308 * x308)	- (w308 * SECx * xLMG)	- (w308 * SECx * xKOR)	,									
			"Base.PKM",	w762x54r		- (w762x54r * x762x54r)	- (w762x54r * SECx * xLMG)	- (w762x54r * SECx * xSOV)	,									
			"Base.MG42",	w308		- (w308 * x308)	- (w308 * SECx * xLMG)	- (w308 * SECx * xEUR)	,									
			"Base.M60",	w308		- (w308 * x308)	- (w308 * SECx * xLMG)	- (w308 * SECx * xUSA)	,									
			"Base.MK43",	w308	- (w308 * CIVx * x90)	- (w308 * x308)	- (w308 * SECx * xLMG)	- (w308 * SECx * xUSA)	,									
			"Base.RPD",	w762x39		- (w762x39 * x762x39)	- (w762x39 * SECx * xLMG)	- (w762x39 * SECx * xSOV)	,									
			"Base.DSHK_Fold",	wBMG		- (wBMG * xBMG)	- (wBMG * SECx * xMINI)	- (wBMG * SECx * xSOV)	,									
			"Base.BOAR",	wBMG		- (wBMG * xBMG)	- (wBMG * SECx * xBREAK)	- (wBMG * SECx * xUSA)	,									
			"Base.EDM96",	wBMG	- (wBMG * CIVx * x90)	- (wBMG * xBMG)	- (wBMG * SECx * xBOLT)	- (wBMG * SECx * xUSA)	,									
			"Base.M82",	wBMG		- (wBMG * xBMG)	- (wBMG * SECx * xSEMI)	- (wBMG * SECx * xUSA)	,									
			"Base.BFG50",	wBMG	- (wBMG * CIVx * x90)	- (wBMG * xBMG)	- (wBMG * SECx * xBREAK)	- (wBMG * SECx * xUSA)	,									
			"Base.Harris50",	wBMG		- (wBMG * xBMG)	- (wBMG * SECx * xBOLT)	- (wBMG * SECx * xUSA)	,									
			"Base.TAC50",	wBMG		- (wBMG * xBMG)	- (wBMG * SECx * xBOLT)	- (wBMG * SECx * xUSA)	,									
			"Base.CheyTac50",	wBMG	- (wBMG * CIVx * x90)	- (wBMG * xBMG)	- (wBMG * SECx * xBOLT)	- (wBMG * SECx * xUSA)	,									
			"Base.Gepard_M6",	wBMG		- (wBMG * xBMG)	- (wBMG * SECx * xBOLT)	- (wBMG * SECx * xEUR)	,									
			"Base.OSV_96",	wBMG	- (wBMG * CIVx * x90)	- (wBMG * xBMG)	- (wBMG * SECx * xBOLT)	- (wBMG * SECx * xSOV)	,									
			"Base.Ash",	wBMG	- (wBMG * CIVx * x90)	- (wBMG * xBMG)	- (wBMG * SECx * xAUTO)	- (wBMG * SECx * xSOV)	,									
			"Base.VSSK",	wBMG	- (wBMG * CIVx * x90)	- (wBMG * xBMG)	- (wBMG * SECx * xBOLT)	- (wBMG * SECx * xSOV)	,									
			"Base.SW_M500",	wBMG	- (wBMG * CIVx * x90)	- (wBMG * xBMG)	- (wBMG * SECx * xREV)	- (wBMG * SECx * xUSA)	,									
			"Base.SPAS12_Fixed",	w12g		- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xEUR)	,									
			"Base.SPAS12_Fold",	w12g		- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xEUR)	,									
			"Base.Origin",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xUSA)	,									
			"Base.SPAS_15",	w12g		- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xEUR)	,									
			"Base.USAS_12",	w12g		- (w12g * x12g)	- (w12g * SECx * xAUTO)	- (w12g * SECx * xKOR)	,									
			"Base.Shorty_Pistol",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)	,									
			"Base.R11_87",	w12g		- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xUSA)	,									
			"Base.M870",	w12g		- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)	,									
			"Base.M1897",	w12g		- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)	,									
			"Base.DT11",	w12g		- (w12g * x12g)	- (w12g * SECx * xBREAK)	- (w12g * SECx * xEUR)	,									
			"Base.Coachgun",	w12g		- (w12g * x12g)	- (w12g * SECx * xBREAK)	- (w12g * SECx * xUSA)	,									
			"Base.Terminator",	w12g		- (w12g * x12g)	- (w12g * SECx * xBREAK)	- (w12g * SECx * xUSA)	,									
			"Base.SIX12",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xREV)	- (w12g * SECx * xUSA)	,									
			"Base.SIX12SD",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xREV)	- (w12g * SECx * xUSA)	,									
			"Base.M870_Wingmaster",	w12g		- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)	,									
			"Base.M870_Police",	w12g		- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)	,									
			"Base.M870_MCS",	w12g		- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)	,									
			"Base.M870_CQB",	w12g		- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)	,									
			"Base.M870_Breaching_Pistol",	w12g		- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)	,									
			"Base.M870_Express",	w12g		- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)	,									
			"Base.Ithaca_M37",	w12g		- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)	,									
			"Base.AUTO_5",	w12g		- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xUSA)	,									
			"Base.A400",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xEUR)	,									
			"Base.M1014",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xEUR)	,									
			"Base.M1014_Fold",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xEUR)	,									
			"Base.M1014_Wick",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xSEMI)	- (w12g * SECx * xEUR)	,									
			"Base.DAO12",	w12g		- (w12g * x12g)	- (w12g * SECx * xREV)	- (w12g * SECx * xREST)	,									
			"Base.M1887",	w12g		- (w12g * x12g)	- (w12g * SECx * xLEVER)	- (w12g * SECx * xUSA)	,									
			"Base.M1208",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xREV)	- (w12g * SECx * xUSA)	,									
			"Base.M1212",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xREV)	- (w12g * SECx * xUSA)	,									
			"Base.M1216",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xREV)	- (w12g * SECx * xUSA)	,									
			"Base.AA12",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xAUTO)	- (w12g * SECx * xUSA)	,									
			"Base.CAWS",	w12g		- (w12g * x12g)	- (w12g * SECx * xAUTO)	- (w12g * SECx * xEUR)	,									
			"Base.ROYAL_SXS",	w10g		- (w10g * x10g)	- (w10g * SECx * xBREAK)	- (w10g * SECx * xEUR)	,									
			"Base.KS23",	w4g		- (w4g * x4g)	- (w4g * SECx * xPUMP)	- (w4g * SECx * xSOV)	,									
			"Base.KS23_S_Pistol",	w4g		- (w4g * x4g)	- (w4g * SECx * xPUMP)	- (w4g * SECx * xSOV)	,									
			"Base.Triple_Crown",	w12g		- (w12g * x12g)	- (w12g * SECx * xBREAK)	- (w12g * SECx * xEUR)	,									
			"Base.Moss500_20",	w20g		- (w20g * x20g)	- (w20g * SECx * xPUMP)	- (w20g * SECx * xUSA)	,									
			"Base.10855_Silver",	w20g		- (w20g * x20g)	- (w20g * SECx * xSEMI)	- (w20g * SECx * xEUR)	,									
			"Base.Colt1855",	w20g		- (w20g * x20g)	- (w20g * SECx * xREV)	- (w20g * SECx * xUSA)	,									
			"Base.TOZ106",	w20g		- (w20g * x20g)	- (w20g * SECx * xBOLT)	- (w20g * SECx * xSOV)	,									
			"Base.TOZ194_Pistol",	w12g		- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xSOV)	,									
			"Base.Saiga12",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xAUTO)	- (w12g * SECx * xSOV)	,									
			"Base.Saiga12_Long",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xAUTO)	- (w12g * SECx * xSOV)	,									
			"Base.Saiga12_Tromix",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xAUTO)	- (w12g * SECx * xSOV)	,									
			"Base.MP133",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xSOV)	,									
			"Base.MP133S_Pistol",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xSOV)	,									
			"Base.KSG",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)	,									
			"Base.KSG25",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xUSA)	,									
			"Base.UTS15",	w12g	- (w12g * CIVx * x90)	- (w12g * x12g)	- (w12g * SECx * xPUMP)	- (w12g * SECx * xREST)	,									
			"Base.EX41_HE",	wGREN			- (wGREN * SECx * xGREN)	- (wGREN * SECx * xUSA)	,									
			"Base.Federal_HE",	wGREN			- (wGREN * SECx * xGREN)	- (wGREN * SECx * xUSA)	,									
			"Base.M32_HE",	wGREN			- (wGREN * SECx * xGREN)	- (wGREN * SECx * xUSA)	,									
			"Base.GM94_HE",	wGREN	- (wGREN * CIVx * x90)		- (wGREN * SECx * xGREN)	- (wGREN * SECx * xSOV)	,									
			"Base.K11",	wGREN	- (wGREN * CIVx * x90)	- (wGREN * SECx * xAUTO)	- (wGREN * SECx * xGREN)	- (wGREN * SECx * xKOR)	,									
			"Base.M72_LAW",	wGREN			- (wGREN * SECx * xGREN)	- (wGREN * SECx * xUSA)	,									
			"Base.RPG_7",	wGREN			- (wGREN * SECx * xGREN)	- (wGREN * SECx * xSOV)	,									
			"Base.XM214",	w556		- (w556 * x556)	- (w556 * SECx * xMINI)	- (w556 * SECx * xUSA)	,									
			"Base.GAU17",	w308		- (w308 * x308)	- (w308 * SECx * xMINI)	- (w308 * SECx * xUSA)	,									
			"Base.GAU19",	wBMG		- (wBMG * xBMG)	- (wBMG * SECx * xMINI)	- (wBMG * SECx * xUSA)	,									
			"Base.TAC15",	wBOW			- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)	,									
			"Base.HortonScout_125",	wBOW			- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)	,									
			"Base.MissionMXB_400",	wBOW			- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)	,									
			"Base.TenPointTurbo_XLT",	wBOW			- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)	,									
			"Base.HZRedback_RTS",	wBOW			- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)	,									
			"Base.Genesis_X_Bow",	wBOW			- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)	,									
			"Base.Genesis_Bow",	wBOW			- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)	,									
			"Base.Genesis_Mini_Bow",	wBOW			- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)	,									
			"Base.BowTechSR_350",	wBOW			- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)	,									
			"Base.HoytSpectra_1000",	wBOW			- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)	,									
			"Base.SlingShot_Rock",	wBOW			- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)	,									
			"Base.WristRocket_Rock",	wBOW			- (wBOW * SECx * xBOW)	- (wBOW * SECx * xUSA)	,									
			"Base.M2A1",	wFLAME			- (wFLAME * SECx * xFLAME)	- (wFLAME * SECx * xUSA)	,									
			"Base.Musk",	wFLAME	- (wFLAME * CIVx * x90)		- (wFLAME * SECx * xFLAME)	- (wFLAME * SECx * xUSA)	,									
																		
			"Base.AmmoCan30_22",	AmmoCan		* w22	- (AmmoCan * x22)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan30_380",	AmmoCan		* w380	- (AmmoCan * x380)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan30_57",	AmmoCan	 - (AmmoCan * x90)	* w57	- (AmmoCan * x57)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan30_9",	AmmoCan		* w9	- (AmmoCan * x9)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan30_38",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan30_357",	AmmoCan		* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan30_45",	AmmoCan		* w45	- (AmmoCan * x45)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan30_44",	AmmoCan		* w44	- (AmmoCan * x44)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan30_45LC",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan30_4570",	AmmoCan		* w4570	- (AmmoCan * x4570)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan30_50MAG",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_223",	AmmoCan		* w223	- (AmmoCan * x223)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_556",	AmmoCan		* w556	- (AmmoCan * x556)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_762x39",	AmmoCan		* w762x39	- (AmmoCan * x762x39)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_545x39",	AmmoCan		* w545x39	- (AmmoCan * x545x39)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_762x54r",	AmmoCan		* w762x54r	- (AmmoCan * x762x54r)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_308",	AmmoCan		* w308	- (AmmoCan * x308)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_3006",	AmmoCan		* w3006	- (AmmoCan * x3006)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_410",	AmmoCan		* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_20",	AmmoCan		* w20g	- (AmmoCan * x20g)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_12",	AmmoCan		* w12g	- (AmmoCan * x12g)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_10",	AmmoCan		* w10g	- (AmmoCan * x10g)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_4",	AmmoCan		* w4g	- (AmmoCan * x4g)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_50",	AmmoCan		* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_HE",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_INC",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)	,									
			"Base.AmmoCan50_ROCKET",	AmmoCan		* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)	,									
		},																
		dontSpawnAmmo = false,																
	},																	
																		
	ELMariachiWeapons = {								-- <<== GUITAR CASE NOT PROCEDURAL YET									
		rolls =	1	,														
		items = {																
			"Base.AR7_Fold",	10	 - (10 * x90)	- (w22 * x22)			,									
			"Base.EDM96_Fold",	20	 - (20 * x90)	- (wBMG * xBMG)			,									
			"Base.SUB2000_Fold",	10	 - (10 * x90)	- (w9 * x9)			,									
			"Base.Coachgun_Pistol",	40	 - (40 * x90)	* w4g			,									
			"Base.DT11_Pistol",	30	 - (30 * x90)	* wBMG			,									
			"Base.Commando",	20		* w45			,									
			"Base.MAC10_Fold",	20		- (w45 * x45)			,									
		},																
		dontSpawnAmmo = false,																
	},																	
}																		
MergeDistributionRecursive(ProceduralDistributions, A26ProcDistro)																		
																		
																		
if (xArmor == 0) then																		
print("ARMOR DISTRO OVERRIDE OPTION ENABLED")																		
if getActivatedMods():contains("Brita_2") or getActivatedMods():contains("Brita_2_WIP") then																		
print("Brita_2 MOD DETECTED")																		
Brita_2_ProcDistro = {};																		
Brita_2_ProcDistro.list = {																		
	GunStoreShelf = {		--GunStoreArmor = {															
		rolls =	GUNRollARMOR	,														
		items = {																
			"Base.Leather_Jacket_Bennett",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Field_Jacket",	Armor	- (Armor * xArmor)							,						
			"Base.Wolf_Jacket",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Tactical_Hood",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.BARS_Hoodie",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Gorka6_Hoodie",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.M65_Jacket",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Suit_Army",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Military_Coat_Long",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Jacket_Bomber",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Jacket_Polizei",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.ELA_Bomber",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.ANA_Shirts",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.ANA_Hood",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.ANA_Classic",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Officer_Overcoat",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.USCM_Jacket",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Winter_Jacket_Heavy",	Armor	- (Armor * xArmor)							,						
			"Base.Winter_Jacket_Camo_Heavy",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Coast_Jacket",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.Paramedic_Jacket",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Police_Waterproof_Jacket",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.Gunsmith_Jacket",	Armor	- (Armor * xArmor)							,						
			"Base.Viking_Fire_Jacket",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Shirts_Bennett",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Ela_Pants",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Anorak_Pants",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.M42_Pants",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.GEN2_Pants",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.USCM_Pants",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Chempak_Blauer",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Chempak_BRN",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Chempak_Tychem",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Chempak_Level",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.Tac_Boots",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Boots_Trackstar",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.USCM_Boots",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Military_Gaiter",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.OZK_Gaiter",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.SET_Boots",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Bag_Sniper_Pack",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Bag_ARVN_Rucksack",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Bag_ST53_Set",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.Bag_ZIP",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_SSO",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_Savotta",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_Bush",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_Hunting",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_Radio_Pack",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Bag_SCBA",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Bag_Tactical_Alice",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Bag_M2A1_Pack",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Bag_Hazard_Cross",	Armor	- (Armor * xArmor)							,						
			"Base.ELA_Bag",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.OMNI_Bag",	Armor	- (Armor * xArmor)							,						
			"Base.KIP5",	Armor	- (Armor * xArmor)							,						
			"Base.AP3",	Armor	- (Armor * xArmor)							,						
			"Base.IP46",	Armor	- (Armor * xArmor)							,						
			"Base.Sheriff_Bag",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Trauma_Bag",	Armor	- (Armor * xArmor)							,						
			"Base.Bushcraft_Bag",	Armor	- (Armor * xArmor)							,						
			"Base.Army_Duffle_Bag",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Bag_Tactical_Belt_Front",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Bag_D3M",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Bag_Duty_Belt_Front",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Bag_Blackhawk",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Bag_X_Vest",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Bag_SKS_Vest",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Bag_AK_Vest",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Bottle_Bag",	Armor	- (Armor * xArmor)							,						
			"Base.Rig_Smersh",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Rig_Smersh_A",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Rig_Smersh_B",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Rig_Smersh_C",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Rig_ELA",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.K1_Bag",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Radio_Rig",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.C420_PAPR",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.Shotgun_Rig",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Belt_Pack_AR",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Belt_Pack_Gas",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.Belt_Pack_Pouch",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.Belt_Pack_Duty",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Belt_Pack_War",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.D3CR",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Hat_Tactical_Boonie",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Hat_Tactical_Boonie_Fold",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Hat_Tactical_Cap",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.Hat_Tactical_Cap_Camo",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.Hat_Patrol_Cap",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_Tactical_Beret",	Armor	- (Armor * xArmor)							,						
			"Base.Officer_Hat",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Police_Officer_Hat",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Bear_Mask",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Hat_FAST_Opscore",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Hat_Gentex_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Hat_HGU56",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Hat_PSGT_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Hat_PSGT_Helmet_Camo",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Wolf_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.USCM_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Viper_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Maska_1_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.6B6_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Fire_Helmet",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Hat_HGU56_Shield",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Hat_HGU56_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Hat_PSGT_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Hat_Riot_Visor",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Hat_PSGT_Neck",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Maska_1_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.6B6_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Vityaz_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.ZSH_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Fire_Visor",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Fire_Visor_UP",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Viper_Helmet_Shield",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Armor_Defender",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Armor_Defender_Set",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Bag_Plate_Carrier",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Armor_6B13",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Sheriff_Vest",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.Sheriff_Vest_Full",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.Wolf_Plate_Carrier",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Wolf_Plate_Carrier_B",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.EXO_Suit",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.SET_Armor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.SET_Armor_FULL",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.USCM_Armor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Wolf_Knee_Pad",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Wolf_Holster",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Dozer_Leg",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Dozer_Arm",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Dozer_Pouch",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.SET_Leg_Pouch",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Shell_Chest_Bandolier",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Shell_Arm_Bandolier",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Shell_Thigh_Bandolier",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Shell_Arm_Bandolier_B",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Shell_Thigh_Bandolier_B",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Glasses_X1000",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Glasses_Napier",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.Glasses_Crewman_Goggles",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.SET_Goggles",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Hat_Sordin",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_Astrocom",	Armor	- (Armor * xArmor)							,						
			"Base.SET_Headset",	Armor	- (Armor * xArmor)							,						
			"Base.Aviation_Headsets",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Comtac_Headsets",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.Comtac4_Headsets",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Bowman_Headsets",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Hat_Sam_NV",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.NV_PVS5",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.NV_PNV_57",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.NV_PVS7",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.NV_PVS21",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Bag_Sniper_Hood",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * x90)	,						
			"Base.Bag_Sniper_Suit",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Military_Cloak",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Balaclava_Mask_1",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Balaclava_Mask_2",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Balaclava_Mask_3",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Balaclava_Mask_4",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Balaclava_Mask_5",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Balaclava_Mask_6",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.Hat_MSA_Gas_Mask",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.Hat_MSA_Gas_Mask_AMP",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * x90)	,						
			"Base.K1_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.K1_Hood",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.K1_Half",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.PMK1_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.PMK1_Half",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.PMK2_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.PMK2_Half",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.S10_Gasmask",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.S10_Gasmask_Set",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			,						
			"Base.GP4U_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.MM1_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.SHMS_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.SHMS_Gasmask_Set",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.GP5M_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.PMG_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		,						
			"Base.AmmoStraps",	Armor	- (Armor * xArmor)							,						
			"Base.AmmoStrap_Bullets",	Armor	- (Armor * xArmor)							,						
			"Base.AmmoStrap_Shells",	Armor	- (Armor * xArmor)							,						
			"Base.HolsterSimple",	Armor	- (Armor * xArmor)							,						
			"Base.HolsterDouble",	Armor	- (Armor * xArmor)							,						
		}																
	},																	
																		
	PoliceStorageOutfit = {		--PoliceArmor = {															
		rolls =	LEORollARMOR	,														
		items = {																
			"Base.Leather_Jacket_Bennett",	Armor	- (Armor * xArmor)							,						
			"Base.Field_Jacket",	Armor	- (Armor * xArmor)				- (Armor * LEOxCIV)			,						
			"Base.Wolf_Jacket",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Tactical_Hood",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.BARS_Hoodie",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Gorka6_Hoodie",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.M65_Jacket",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Suit_Army",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Military_Coat_Long",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Jacket_Bomber",	Armor	- (Armor * xArmor)							,						
			"Base.Jacket_Polizei",	Armor	- (Armor * xArmor)							,						
			"Base.ELA_Bomber",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.ANA_Shirts",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.ANA_Hood",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.ANA_Classic",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Officer_Overcoat",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.USCM_Jacket",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Winter_Jacket_Heavy",	Armor	- (Armor * xArmor)				- (Armor * LEOxCIV)			,						
			"Base.Winter_Jacket_Camo_Heavy",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Coast_Jacket",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Paramedic_Jacket",	Armor	- (Armor * xArmor)				- (Armor * LEOxCIV)			,						
			"Base.Police_Waterproof_Jacket",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Gunsmith_Jacket",	Armor	- (Armor * xArmor)				- (Armor * LEOxCIV)			,						
			"Base.Viking_Fire_Jacket",	Armor	- (Armor * xArmor)				- (Armor * LEOxCIV)			,						
			"Base.Shirts_Bennett",	Armor	- (Armor * xArmor)							,						
			"Base.Ela_Pants",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Anorak_Pants",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.M42_Pants",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.GEN2_Pants",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.USCM_Pants",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Chempak_Blauer",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Chempak_BRN",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Chempak_Tychem",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Chempak_Level",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Tac_Boots",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Boots_Trackstar",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.USCM_Boots",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Military_Gaiter",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.OZK_Gaiter",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.SET_Boots",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Bag_Sniper_Pack",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Bag_ARVN_Rucksack",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Bag_ST53_Set",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_ZIP",	Armor	- (Armor * xArmor)				- (Armor * LEOxCIV)			,						
			"Base.Bag_SSO",	Armor	- (Armor * xArmor)				- (Armor * LEOxCIV)			,						
			"Base.Bag_Savotta",	Armor	- (Armor * xArmor)				- (Armor * LEOxCIV)			,						
			"Base.Bag_Bush",	Armor	- (Armor * xArmor)				- (Armor * LEOxCIV)			,						
			"Base.Bag_Hunting",	Armor	- (Armor * xArmor)				- (Armor * LEOxCIV)			,						
			"Base.Bag_Radio_Pack",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Bag_SCBA",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_Tactical_Alice",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Bag_M2A1_Pack",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Bag_Hazard_Cross",	Armor	- (Armor * xArmor)							,						
			"Base.ELA_Bag",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.OMNI_Bag",	Armor	- (Armor * xArmor)							,						
			"Base.KIP5",	Armor	- (Armor * xArmor)							,						
			"Base.AP3",	Armor	- (Armor * xArmor)							,						
			"Base.IP46",	Armor	- (Armor * xArmor)							,						
			"Base.Sheriff_Bag",	Armor	- (Armor * xArmor)							,						
			"Base.Trauma_Bag",	Armor	- (Armor * xArmor)							,						
			"Base.Bushcraft_Bag",	Armor	- (Armor * xArmor)				- (Armor * LEOxCIV)			,						
			"Base.Army_Duffle_Bag",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Bag_Tactical_Belt_Front",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Bag_D3M",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Bag_Duty_Belt_Front",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_Blackhawk",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Bag_X_Vest",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Bag_SKS_Vest",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Bag_AK_Vest",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Bottle_Bag",	Armor	- (Armor * xArmor)							,						
			"Base.Rig_Smersh",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Rig_Smersh_A",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Rig_Smersh_B",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Rig_Smersh_C",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Rig_ELA",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.K1_Bag",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Radio_Rig",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.C420_PAPR",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Shotgun_Rig",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Belt_Pack_AR",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Belt_Pack_Gas",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Belt_Pack_Pouch",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Belt_Pack_Duty",	Armor	- (Armor * xArmor)							,						
			"Base.Belt_Pack_War",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.D3CR",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Hat_Tactical_Boonie",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Hat_Tactical_Boonie_Fold",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Hat_Tactical_Cap",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Hat_Tactical_Cap_Camo",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Hat_Patrol_Cap",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_Tactical_Beret",	Armor	- (Armor * xArmor)							,						
			"Base.Officer_Hat",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Police_Officer_Hat",	Armor	- (Armor * xArmor)							,						
			"Base.Bear_Mask",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_FAST_Opscore",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Hat_Gentex_Helmet",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Hat_HGU56",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Hat_PSGT_Helmet",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Hat_PSGT_Helmet_Camo",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Wolf_Helmet",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.USCM_Helmet",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Viper_Helmet",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Maska_1_Helmet",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.6B6_Helmet",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Fire_Helmet",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_HGU56_Shield",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Hat_HGU56_Visor",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Hat_PSGT_Visor",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Hat_Riot_Visor",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_PSGT_Neck",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Maska_1_Visor",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.6B6_Visor",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Vityaz_Visor",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.ZSH_Visor",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Fire_Visor",	Armor	- (Armor * xArmor)							,						
			"Base.Fire_Visor_UP",	Armor	- (Armor * xArmor)							,						
			"Base.Viper_Helmet_Shield",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Armor_Defender",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Armor_Defender_Set",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Bag_Plate_Carrier",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Armor_6B13",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Sheriff_Vest",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Sheriff_Vest_Full",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Wolf_Plate_Carrier",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Wolf_Plate_Carrier_B",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.EXO_Suit",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.SET_Armor",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.SET_Armor_FULL",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.USCM_Armor",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Wolf_Knee_Pad",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Wolf_Holster",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Dozer_Leg",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Dozer_Arm",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Dozer_Pouch",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.SET_Leg_Pouch",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Shell_Chest_Bandolier",	Armor	- (Armor * xArmor)							,						
			"Base.Shell_Arm_Bandolier",	Armor	- (Armor * xArmor)							,						
			"Base.Shell_Thigh_Bandolier",	Armor	- (Armor * xArmor)							,						
			"Base.Shell_Arm_Bandolier_B",	Armor	- (Armor * xArmor)							,						
			"Base.Shell_Thigh_Bandolier_B",	Armor	- (Armor * xArmor)							,						
			"Base.Glasses_X1000",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Glasses_Napier",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Glasses_Crewman_Goggles",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.SET_Goggles",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Hat_Sordin",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_Astrocom",	Armor	- (Armor * xArmor)							,						
			"Base.SET_Headset",	Armor	- (Armor * xArmor)							,						
			"Base.Aviation_Headsets",	Armor	- (Armor * xArmor)							,						
			"Base.Comtac_Headsets",	Armor	- (Armor * xArmor)							,						
			"Base.Comtac4_Headsets",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Bowman_Headsets",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Hat_Sam_NV",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.NV_PVS5",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.NV_PNV_57",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.NV_PVS7",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.NV_PVS21",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Bag_Sniper_Hood",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)	- (Armor * x90)	,						
			"Base.Bag_Sniper_Suit",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Military_Cloak",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Balaclava_Mask_1",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Balaclava_Mask_2",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Balaclava_Mask_3",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Balaclava_Mask_4",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Balaclava_Mask_5",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Balaclava_Mask_6",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.Hat_MSA_Gas_Mask",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Hat_MSA_Gas_Mask_AMP",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.K1_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.K1_Hood",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.K1_Half",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.PMK1_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.PMK1_Half",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.PMK2_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.PMK2_Half",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.S10_Gasmask",	Armor	- (Armor * xArmor)							,						
			"Base.S10_Gasmask_Set",	Armor	- (Armor * xArmor)							,						
			"Base.GP4U_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.MM1_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.SHMS_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.SHMS_Gasmask_Set",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.GP5M_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.PMG_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * LEOxMIL)		,						
			"Base.AmmoStraps",	Armor	- (Armor * xArmor)							,						
			"Base.AmmoStrap_Bullets",	Armor	- (Armor * xArmor)							,						
			"Base.AmmoStrap_Shells",	Armor	- (Armor * xArmor)							,						
			"Base.HolsterSimple",	Armor	- (Armor * xArmor)							,						
			"Base.HolsterDouble",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_Police",	5								,						
		}																
	},																	
																		
	ArmyStorageOutfit = {		--ArmyArmor = {															
		rolls =	MILRollArmor	,														
		items = {																
			"Base.Leather_Jacket_Bennett",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Field_Jacket",	Armor	- (Armor * xArmor)							,						
			"Base.Wolf_Jacket",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Tactical_Hood",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.BARS_Hoodie",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Gorka6_Hoodie",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.M65_Jacket",	Armor	- (Armor * xArmor)							,						
			"Base.Suit_Army",	Armor	- (Armor * xArmor)							,						
			"Base.Military_Coat_Long",	Armor	- (Armor * xArmor)							,						
			"Base.Jacket_Bomber",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Jacket_Polizei",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.ELA_Bomber",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.ANA_Shirts",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.ANA_Hood",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.ANA_Classic",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Officer_Overcoat",	Armor	- (Armor * xArmor)							,						
			"Base.USCM_Jacket",	Armor	- (Armor * xArmor)							,						
			"Base.Winter_Jacket_Heavy",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Winter_Jacket_Camo_Heavy",	Armor	- (Armor * xArmor)							,						
			"Base.Coast_Jacket",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.Paramedic_Jacket",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Police_Waterproof_Jacket",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.Gunsmith_Jacket",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Viking_Fire_Jacket",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Shirts_Bennett",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Ela_Pants",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Anorak_Pants",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.M42_Pants",	Armor	- (Armor * xArmor)							,						
			"Base.GEN2_Pants",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.USCM_Pants",	Armor	- (Armor * xArmor)							,						
			"Base.Chempak_Blauer",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Chempak_BRN",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Chempak_Tychem",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Chempak_Level",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.Tac_Boots",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Boots_Trackstar",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.USCM_Boots",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Military_Gaiter",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.OZK_Gaiter",	Armor	- (Armor * xArmor)							,						
			"Base.SET_Boots",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_Sniper_Pack",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_ARVN_Rucksack",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_ST53_Set",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.Bag_ZIP",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Bag_SSO",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Bag_Savotta",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Bag_Bush",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Bag_Hunting",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Bag_Radio_Pack",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_SCBA",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Bag_Tactical_Alice",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_M2A1_Pack",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_Hazard_Cross",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.ELA_Bag",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.OMNI_Bag",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.KIP5",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.AP3",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.IP46",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Sheriff_Bag",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Trauma_Bag",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Bushcraft_Bag",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Army_Duffle_Bag",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_Tactical_Belt_Front",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_D3M",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_Duty_Belt_Front",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Bag_Blackhawk",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_X_Vest",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_SKS_Vest",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_AK_Vest",	Armor	- (Armor * xArmor)							,						
			"Base.Bottle_Bag",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Rig_Smersh",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Rig_Smersh_A",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Rig_Smersh_B",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Rig_Smersh_C",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Rig_ELA",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.K1_Bag",	Armor	- (Armor * xArmor)							,						
			"Base.Radio_Rig",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.C420_PAPR",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.Shotgun_Rig",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Belt_Pack_AR",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Belt_Pack_Gas",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.Belt_Pack_Pouch",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.Belt_Pack_Duty",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Belt_Pack_War",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.D3CR",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Hat_Tactical_Boonie",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_Tactical_Boonie_Fold",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_Tactical_Cap",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.Hat_Tactical_Cap_Camo",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.Hat_Patrol_Cap",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Hat_Tactical_Beret",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Officer_Hat",	Armor	- (Armor * xArmor)							,						
			"Base.Police_Officer_Hat",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Bear_Mask",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Hat_FAST_Opscore",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Hat_Gentex_Helmet",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Hat_HGU56",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Hat_PSGT_Helmet",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_PSGT_Helmet_Camo",	Armor	- (Armor * xArmor)							,						
			"Base.Wolf_Helmet",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.USCM_Helmet",	Armor	- (Armor * xArmor)							,						
			"Base.Viper_Helmet",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Maska_1_Helmet",	Armor	- (Armor * xArmor)							,						
			"Base.6B6_Helmet",	Armor	- (Armor * xArmor)							,						
			"Base.Fire_Helmet",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Hat_HGU56_Shield",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Hat_HGU56_Visor",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Hat_PSGT_Visor",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Hat_Riot_Visor",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Hat_PSGT_Neck",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Maska_1_Visor",	Armor	- (Armor * xArmor)							,						
			"Base.6B6_Visor",	Armor	- (Armor * xArmor)							,						
			"Base.Vityaz_Visor",	Armor	- (Armor * xArmor)							,						
			"Base.ZSH_Visor",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Fire_Visor",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Fire_Visor_UP",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Viper_Helmet_Shield",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Armor_Defender",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Armor_Defender_Set",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_Plate_Carrier",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Armor_6B13",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Sheriff_Vest",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.Sheriff_Vest_Full",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.Wolf_Plate_Carrier",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Wolf_Plate_Carrier_B",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.EXO_Suit",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.SET_Armor",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.SET_Armor_FULL",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.USCM_Armor",	Armor	- (Armor * xArmor)							,						
			"Base.Wolf_Knee_Pad",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Wolf_Holster",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Dozer_Leg",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Dozer_Arm",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Dozer_Pouch",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.SET_Leg_Pouch",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Shell_Chest_Bandolier",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Shell_Arm_Bandolier",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Shell_Thigh_Bandolier",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Shell_Arm_Bandolier_B",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Shell_Thigh_Bandolier_B",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Glasses_X1000",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Glasses_Napier",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.Glasses_Crewman_Goggles",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.SET_Goggles",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Hat_Sordin",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Hat_Astrocom",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.SET_Headset",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Aviation_Headsets",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Comtac_Headsets",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.Comtac4_Headsets",	Armor	- (Armor * xArmor)							,						
			"Base.Bowman_Headsets",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_Sam_NV",	Armor	- (Armor * xArmor)							,						
			"Base.NV_PVS5",	Armor	- (Armor * xArmor)							,						
			"Base.NV_PNV_57",	Armor	- (Armor * xArmor)							,						
			"Base.NV_PVS7",	Armor	- (Armor * xArmor)							,						
			"Base.NV_PVS21",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_Sniper_Hood",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_Sniper_Suit",	Armor	- (Armor * xArmor)							,						
			"Base.Military_Cloak",	Armor	- (Armor * xArmor)							,						
			"Base.Balaclava_Mask_1",	Armor	- (Armor * xArmor)							,						
			"Base.Balaclava_Mask_2",	Armor	- (Armor * xArmor)							,						
			"Base.Balaclava_Mask_3",	Armor	- (Armor * xArmor)							,						
			"Base.Balaclava_Mask_4",	Armor	- (Armor * xArmor)							,						
			"Base.Balaclava_Mask_5",	Armor	- (Armor * xArmor)							,						
			"Base.Balaclava_Mask_6",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_MSA_Gas_Mask",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.Hat_MSA_Gas_Mask_AMP",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)		- (Armor * x90)	,						
			"Base.K1_Gasmask",	Armor	- (Armor * xArmor)							,						
			"Base.K1_Hood",	Armor	- (Armor * xArmor)							,						
			"Base.K1_Half",	Armor	- (Armor * xArmor)							,						
			"Base.PMK1_Gasmask",	Armor	- (Armor * xArmor)							,						
			"Base.PMK1_Half",	Armor	- (Armor * xArmor)							,						
			"Base.PMK2_Gasmask",	Armor	- (Armor * xArmor)							,						
			"Base.PMK2_Half",	Armor	- (Armor * xArmor)							,						
			"Base.S10_Gasmask",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.S10_Gasmask_Set",	Armor	- (Armor * xArmor)				- (Armor * MILxNON)			,						
			"Base.GP4U_Gasmask",	Armor	- (Armor * xArmor)							,						
			"Base.MM1_Gasmask",	Armor	- (Armor * xArmor)							,						
			"Base.SHMS_Gasmask",	Armor	- (Armor * xArmor)							,						
			"Base.SHMS_Gasmask_Set",	Armor	- (Armor * xArmor)							,						
			"Base.GP5M_Gasmask",	Armor	- (Armor * xArmor)							,						
			"Base.PMG_Gasmask",	Armor	- (Armor * xArmor)							,						
		}																
	},																	
																		
	SecurityArmor = {																	
		rolls =	SECRollARMOR	,														
		items = {																
			"Base.Leather_Jacket_Bennett",	Armor	- (Armor * xArmor)							,						
			"Base.Field_Jacket",	Armor	- (Armor * xArmor)							,						
			"Base.Wolf_Jacket",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)	- (Armor * SECxNON)	- (Armor * x90)	,						
			"Base.Tactical_Hood",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.BARS_Hoodie",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Gorka6_Hoodie",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.M65_Jacket",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Suit_Army",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Military_Coat_Long",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Jacket_Bomber",	Armor	- (Armor * xArmor)							,						
			"Base.Jacket_Polizei",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)		,						
			"Base.ELA_Bomber",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.ANA_Shirts",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.ANA_Hood",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.ANA_Classic",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Officer_Overcoat",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.USCM_Jacket",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Winter_Jacket_Heavy",	Armor	- (Armor * xArmor)							,						
			"Base.Winter_Jacket_Camo_Heavy",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Coast_Jacket",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)	- (Armor * x90)	,						
			"Base.Paramedic_Jacket",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)		,						
			"Base.Police_Waterproof_Jacket",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)	- (Armor * x90)	,						
			"Base.Gunsmith_Jacket",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)		,						
			"Base.Viking_Fire_Jacket",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)		,						
			"Base.Shirts_Bennett",	Armor	- (Armor * xArmor)							,						
			"Base.Ela_Pants",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Anorak_Pants",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.M42_Pants",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.GEN2_Pants",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.USCM_Pants",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Chempak_Blauer",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Chempak_BRN",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Chempak_Tychem",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Chempak_Level",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)	- (Armor * x90)	,						
			"Base.Tac_Boots",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Boots_Trackstar",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.USCM_Boots",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Military_Gaiter",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.OZK_Gaiter",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.SET_Boots",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_Sniper_Pack",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Bag_ARVN_Rucksack",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Bag_ST53_Set",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_ZIP",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_SSO",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_Savotta",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_Bush",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)		,						
			"Base.Bag_Hunting",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)		,						
			"Base.Bag_Radio_Pack",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Bag_SCBA",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)		,						
			"Base.Bag_Tactical_Alice",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Bag_M2A1_Pack",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Bag_Hazard_Cross",	Armor	- (Armor * xArmor)							,						
			"Base.ELA_Bag",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.OMNI_Bag",	Armor	- (Armor * xArmor)							,						
			"Base.KIP5",	Armor	- (Armor * xArmor)							,						
			"Base.AP3",	Armor	- (Armor * xArmor)							,						
			"Base.IP46",	Armor	- (Armor * xArmor)							,						
			"Base.Sheriff_Bag",	Armor	- (Armor * xArmor)							,						
			"Base.Trauma_Bag",	Armor	- (Armor * xArmor)							,						
			"Base.Bushcraft_Bag",	Armor	- (Armor * xArmor)							,						
			"Base.Army_Duffle_Bag",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Bag_Tactical_Belt_Front",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_D3M",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_Duty_Belt_Front",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_Blackhawk",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_X_Vest",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_SKS_Vest",	Armor	- (Armor * xArmor)							,						
			"Base.Bag_AK_Vest",	Armor	- (Armor * xArmor)							,						
			"Base.Bottle_Bag",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)		,						
			"Base.Rig_Smersh",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Rig_Smersh_A",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Rig_Smersh_B",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Rig_Smersh_C",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Rig_ELA",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.K1_Bag",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Radio_Rig",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.C420_PAPR",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Shotgun_Rig",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Belt_Pack_AR",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Belt_Pack_Gas",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Belt_Pack_Pouch",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Belt_Pack_Duty",	Armor	- (Armor * xArmor)							,						
			"Base.Belt_Pack_War",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.D3CR",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Hat_Tactical_Boonie",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_Tactical_Boonie_Fold",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_Tactical_Cap",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Hat_Tactical_Cap_Camo",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Hat_Patrol_Cap",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_Tactical_Beret",	Armor	- (Armor * xArmor)							,						
			"Base.Officer_Hat",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Police_Officer_Hat",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)		,						
			"Base.Bear_Mask",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)		,						
			"Base.Hat_FAST_Opscore",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Hat_Gentex_Helmet",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Hat_HGU56",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Hat_PSGT_Helmet",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Hat_PSGT_Helmet_Camo",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Wolf_Helmet",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.USCM_Helmet",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Viper_Helmet",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Maska_1_Helmet",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.6B6_Helmet",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Fire_Helmet",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)		,						
			"Base.Hat_HGU56_Shield",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Hat_HGU56_Visor",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Hat_PSGT_Visor",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Hat_Riot_Visor",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_PSGT_Neck",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Maska_1_Visor",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.6B6_Visor",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Vityaz_Visor",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.ZSH_Visor",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Fire_Visor",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)		,						
			"Base.Fire_Visor_UP",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)		,						
			"Base.Viper_Helmet_Shield",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Armor_Defender",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Armor_Defender_Set",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Bag_Plate_Carrier",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Armor_6B13",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Sheriff_Vest",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)	- (Armor * x90)	,						
			"Base.Sheriff_Vest_Full",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)	- (Armor * x90)	,						
			"Base.Wolf_Plate_Carrier",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Wolf_Plate_Carrier_B",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.EXO_Suit",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.SET_Armor",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.SET_Armor_FULL",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.USCM_Armor",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Wolf_Knee_Pad",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Wolf_Holster",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Dozer_Leg",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Dozer_Arm",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Dozer_Pouch",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.SET_Leg_Pouch",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Shell_Chest_Bandolier",	Armor	- (Armor * xArmor)							,						
			"Base.Shell_Arm_Bandolier",	Armor	- (Armor * xArmor)							,						
			"Base.Shell_Thigh_Bandolier",	Armor	- (Armor * xArmor)							,						
			"Base.Shell_Arm_Bandolier_B",	Armor	- (Armor * xArmor)							,						
			"Base.Shell_Thigh_Bandolier_B",	Armor	- (Armor * xArmor)							,						
			"Base.Glasses_X1000",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Glasses_Napier",	Armor	- (Armor * xArmor)						- (Armor * x90)	,						
			"Base.Glasses_Crewman_Goggles",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.SET_Goggles",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Hat_Sordin",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_Astrocom",	Armor	- (Armor * xArmor)							,						
			"Base.SET_Headset",	Armor	- (Armor * xArmor)							,						
			"Base.Aviation_Headsets",	Armor	- (Armor * xArmor)							,						
			"Base.Comtac_Headsets",	Armor	- (Armor * xArmor)							,						
			"Base.Comtac4_Headsets",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Bowman_Headsets",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Hat_Sam_NV",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.NV_PVS5",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.NV_PNV_57",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.NV_PVS7",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.NV_PVS21",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Bag_Sniper_Hood",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)		- (Armor * x90)	,						
			"Base.Bag_Sniper_Suit",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Military_Cloak",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.Balaclava_Mask_1",	Armor	- (Armor * xArmor)							,						
			"Base.Balaclava_Mask_2",	Armor	- (Armor * xArmor)							,						
			"Base.Balaclava_Mask_3",	Armor	- (Armor * xArmor)							,						
			"Base.Balaclava_Mask_4",	Armor	- (Armor * xArmor)							,						
			"Base.Balaclava_Mask_5",	Armor	- (Armor * xArmor)							,						
			"Base.Balaclava_Mask_6",	Armor	- (Armor * xArmor)							,						
			"Base.Hat_MSA_Gas_Mask",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)	- (Armor * x90)	,						
			"Base.Hat_MSA_Gas_Mask_AMP",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)	- (Armor * x90)	,						
			"Base.K1_Gasmask",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.K1_Hood",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.K1_Half",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.PMK1_Gasmask",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.PMK1_Half",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.PMK2_Gasmask",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.PMK2_Half",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.S10_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)		,						
			"Base.S10_Gasmask_Set",	Armor	- (Armor * xArmor)					- (Armor * SECxNON)		,						
			"Base.GP4U_Gasmask",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.MM1_Gasmask",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.SHMS_Gasmask",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.SHMS_Gasmask_Set",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.GP5M_Gasmask",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.PMG_Gasmask",	Armor	- (Armor * xArmor)				- (Armor * CIVxMIL)			,						
			"Base.AmmoStraps",	Armor	- (Armor * xArmor)							,						
			"Base.AmmoStrap_Bullets",	Armor	- (Armor * xArmor)							,						
			"Base.AmmoStrap_Shells",	Armor	- (Armor * xArmor)							,						
			"Base.HolsterSimple",	Armor	- (Armor * xArmor)							,						
			"Base.HolsterDouble",	Armor	- (Armor * xArmor)							,						
		}																
	},																	
																		
	CampingStoreClothes = {		--HuntArmor = {															
		rolls =	HNTRollARMOR	,														
		items = {																
			"Base.Leather_Jacket_Bennett",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Field_Jacket",	Armor	- (Armor * xArmor)								,					
			"Base.Wolf_Jacket",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Tactical_Hood",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.BARS_Hoodie",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.Gorka6_Hoodie",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.M65_Jacket",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Suit_Army",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Military_Coat_Long",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Jacket_Bomber",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.Jacket_Polizei",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.ELA_Bomber",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.ANA_Shirts",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.ANA_Hood",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.ANA_Classic",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Officer_Overcoat",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.USCM_Jacket",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Winter_Jacket_Heavy",	Armor	- (Armor * xArmor)								,					
			"Base.Winter_Jacket_Camo_Heavy",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Coast_Jacket",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Paramedic_Jacket",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.Police_Waterproof_Jacket",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Gunsmith_Jacket",	Armor	- (Armor * xArmor)								,					
			"Base.Viking_Fire_Jacket",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.Shirts_Bennett",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.Ela_Pants",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Anorak_Pants",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.M42_Pants",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.GEN2_Pants",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.USCM_Pants",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Chempak_Blauer",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Chempak_BRN",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Chempak_Tychem",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Chempak_Level",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Tac_Boots",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Boots_Trackstar",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.USCM_Boots",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.Military_Gaiter",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.OZK_Gaiter",	Armor	- (Armor * xArmor)								,					
			"Base.SET_Boots",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Bag_Sniper_Pack",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Bag_ARVN_Rucksack",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Bag_ST53_Set",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			- (Armor * x90)	,					
			"Base.Bag_ZIP",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_SSO",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_Savotta",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_Bush",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_Hunting",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_Radio_Pack",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Bag_SCBA",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.Bag_Tactical_Alice",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Bag_M2A1_Pack",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Bag_Hazard_Cross",	Armor	- (Armor * xArmor)								,					
			"Base.ELA_Bag",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.OMNI_Bag",	Armor	- (Armor * xArmor)								,					
			"Base.KIP5",	Armor	- (Armor * xArmor)								,					
			"Base.AP3",	Armor	- (Armor * xArmor)								,					
			"Base.IP46",	Armor	- (Armor * xArmor)								,					
			"Base.Sheriff_Bag",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.Trauma_Bag",	Armor	- (Armor * xArmor)								,					
			"Base.Bushcraft_Bag",	Armor	- (Armor * xArmor)								,					
			"Base.Army_Duffle_Bag",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Bag_Tactical_Belt_Front",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Bag_D3M",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Bag_Duty_Belt_Front",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.Bag_Blackhawk",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Bag_X_Vest",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Bag_SKS_Vest",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Bag_AK_Vest",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Bottle_Bag",	Armor	- (Armor * xArmor)								,					
			"Base.Rig_Smersh",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Rig_Smersh_A",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Rig_Smersh_B",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Rig_Smersh_C",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Rig_ELA",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.K1_Bag",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Radio_Rig",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			- (Armor * x90)	,					
			"Base.C420_PAPR",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			- (Armor * x90)	,					
			"Base.Shotgun_Rig",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Belt_Pack_AR",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Belt_Pack_Gas",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Belt_Pack_Pouch",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Belt_Pack_Duty",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.Belt_Pack_War",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.D3CR",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Hat_Tactical_Boonie",	Armor	- (Armor * xArmor)								,					
			"Base.Hat_Tactical_Boonie_Fold",	Armor	- (Armor * xArmor)								,					
			"Base.Hat_Tactical_Cap",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Hat_Tactical_Cap_Camo",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Hat_Patrol_Cap",	Armor	- (Armor * xArmor)						- (Armor * HNTxNON)		,					
			"Base.Hat_Tactical_Beret",	Armor	- (Armor * xArmor)						- (Armor * HNTxNON)		,					
			"Base.Officer_Hat",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Police_Officer_Hat",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.Bear_Mask",	Armor	- (Armor * xArmor)								,					
			"Base.Hat_FAST_Opscore",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Hat_Gentex_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Hat_HGU56",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Hat_PSGT_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Hat_PSGT_Helmet_Camo",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Wolf_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.USCM_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Viper_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Maska_1_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.6B6_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Fire_Helmet",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.Hat_HGU56_Shield",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Hat_HGU56_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Hat_PSGT_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Hat_Riot_Visor",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.Hat_PSGT_Neck",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Maska_1_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.6B6_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Vityaz_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.ZSH_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Fire_Visor",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.Fire_Visor_UP",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.Viper_Helmet_Shield",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Armor_Defender",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Armor_Defender_Set",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Bag_Plate_Carrier",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Armor_6B13",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Sheriff_Vest",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Sheriff_Vest_Full",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Wolf_Plate_Carrier",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Wolf_Plate_Carrier_B",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.EXO_Suit",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.SET_Armor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.SET_Armor_FULL",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.USCM_Armor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Wolf_Knee_Pad",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Wolf_Holster",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Dozer_Leg",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Dozer_Arm",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Dozer_Pouch",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.SET_Leg_Pouch",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Shell_Chest_Bandolier",	Armor	- (Armor * xArmor)								,					
			"Base.Shell_Arm_Bandolier",	Armor	- (Armor * xArmor)								,					
			"Base.Shell_Thigh_Bandolier",	Armor	- (Armor * xArmor)								,					
			"Base.Shell_Arm_Bandolier_B",	Armor	- (Armor * xArmor)								,					
			"Base.Shell_Thigh_Bandolier_B",	Armor	- (Armor * xArmor)								,					
			"Base.Glasses_X1000",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.Glasses_Napier",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			- (Armor * x90)	,					
			"Base.Glasses_Crewman_Goggles",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.SET_Goggles",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Hat_Sordin",	Armor	- (Armor * xArmor)								,					
			"Base.Hat_Astrocom",	Armor	- (Armor * xArmor)								,					
			"Base.SET_Headset",	Armor	- (Armor * xArmor)								,					
			"Base.Aviation_Headsets",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Comtac_Headsets",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Comtac4_Headsets",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Bowman_Headsets",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Hat_Sam_NV",	Armor	- (Armor * xArmor)								,					
			"Base.NV_PVS5",	Armor	- (Armor * xArmor)								,					
			"Base.NV_PNV_57",	Armor	- (Armor * xArmor)								,					
			"Base.NV_PVS7",	Armor	- (Armor * xArmor)								,					
			"Base.NV_PVS21",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Bag_Sniper_Hood",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Bag_Sniper_Suit",	Armor	- (Armor * xArmor)								,					
			"Base.Military_Cloak",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Balaclava_Mask_1",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Balaclava_Mask_2",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Balaclava_Mask_3",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Balaclava_Mask_4",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Balaclava_Mask_5",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Balaclava_Mask_6",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Hat_MSA_Gas_Mask",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Hat_MSA_Gas_Mask_AMP",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.K1_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.K1_Hood",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.K1_Half",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.PMK1_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.PMK1_Half",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.PMK2_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.PMK2_Half",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.S10_Gasmask",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.S10_Gasmask_Set",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.GP4U_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.MM1_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.SHMS_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.SHMS_Gasmask_Set",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.GP5M_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.PMG_Gasmask",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
		}																
	},																	
																		
	CampingStoreBackpacks = {		--HuntArmor = {															
		rolls =	HNTRollARMOR	,														
		items = {																
			"Base.Bag_Sniper_Pack",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Bag_ARVN_Rucksack",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Bag_ST53_Set",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			- (Armor * x90)	,					
			"Base.Bag_ZIP",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_SSO",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_Savotta",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_Bush",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_Hunting",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_Radio_Pack",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Bag_SCBA",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.Bag_Tactical_Alice",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)	- (Armor * x90)	,					
			"Base.Bag_M2A1_Pack",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
			"Base.Bag_Hazard_Cross",	Armor	- (Armor * xArmor)								,					
			"Base.ELA_Bag",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.OMNI_Bag",	Armor	- (Armor * xArmor)								,					
			"Base.KIP5",	Armor	- (Armor * xArmor)								,					
			"Base.AP3",	Armor	- (Armor * xArmor)								,					
			"Base.IP46",	Armor	- (Armor * xArmor)								,					
			"Base.Sheriff_Bag",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * HNTxNON)		,					
			"Base.Trauma_Bag",	Armor	- (Armor * xArmor)								,					
			"Base.Bushcraft_Bag",	Armor	- (Armor * xArmor)								,					
			"Base.Army_Duffle_Bag",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * HNTxNON)		,					
		}																
	},																	
																		
	ArmySurplusOutfit = {		--SurplusArmor = {															
		rolls =	SURRollARMOR	,														
		items = {																
			"Base.Leather_Jacket_Bennett",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * SURxNON)		,					
			"Base.Field_Jacket",	Armor	- (Armor * xArmor)								,					
			"Base.Wolf_Jacket",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Tactical_Hood",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.BARS_Hoodie",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.Gorka6_Hoodie",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.M65_Jacket",	Armor	- (Armor * xArmor)								,					
			"Base.Suit_Army",	Armor	- (Armor * xArmor)								,					
			"Base.Military_Coat_Long",	Armor	- (Armor * xArmor)								,					
			"Base.Jacket_Bomber",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * SURxNON)		,					
			"Base.Jacket_Polizei",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.ELA_Bomber",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.ANA_Shirts",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.ANA_Hood",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.ANA_Classic",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Officer_Overcoat",	Armor	- (Armor * xArmor)								,					
			"Base.USCM_Jacket",	Armor	- (Armor * xArmor)								,					
			"Base.Winter_Jacket_Heavy",	Armor	- (Armor * xArmor)								,					
			"Base.Winter_Jacket_Camo_Heavy",	Armor	- (Armor * xArmor)								,					
			"Base.Coast_Jacket",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Paramedic_Jacket",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Police_Waterproof_Jacket",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Gunsmith_Jacket",	Armor	- (Armor * xArmor)								,					
			"Base.Viking_Fire_Jacket",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Shirts_Bennett",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * SURxNON)		,					
			"Base.Ela_Pants",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Anorak_Pants",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.M42_Pants",	Armor	- (Armor * xArmor)								,					
			"Base.GEN2_Pants",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.USCM_Pants",	Armor	- (Armor * xArmor)								,					
			"Base.Chempak_Blauer",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Chempak_BRN",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Chempak_Tychem",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Chempak_Level",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Tac_Boots",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Boots_Trackstar",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.USCM_Boots",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Military_Gaiter",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.OZK_Gaiter",	Armor	- (Armor * xArmor)								,					
			"Base.SET_Boots",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Bag_Sniper_Pack",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Bag_ARVN_Rucksack",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_ST53_Set",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Bag_ZIP",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_SSO",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_Savotta",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_Bush",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_Hunting",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_Radio_Pack",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_SCBA",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Bag_Tactical_Alice",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Bag_M2A1_Pack",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_Hazard_Cross",	Armor	- (Armor * xArmor)								,					
			"Base.ELA_Bag",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.OMNI_Bag",	Armor	- (Armor * xArmor)								,					
			"Base.KIP5",	Armor	- (Armor * xArmor)								,					
			"Base.AP3",	Armor	- (Armor * xArmor)								,					
			"Base.IP46",	Armor	- (Armor * xArmor)								,					
			"Base.Sheriff_Bag",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * SURxNON)		,					
			"Base.Trauma_Bag",	Armor	- (Armor * xArmor)								,					
			"Base.Bushcraft_Bag",	Armor	- (Armor * xArmor)								,					
			"Base.Army_Duffle_Bag",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_Tactical_Belt_Front",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Bag_D3M",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Bag_Duty_Belt_Front",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_Blackhawk",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Bag_X_Vest",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_SKS_Vest",	Armor	- (Armor * xArmor)								,					
			"Base.Bag_AK_Vest",	Armor	- (Armor * xArmor)								,					
			"Base.Bottle_Bag",	Armor	- (Armor * xArmor)								,					
			"Base.Rig_Smersh",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Rig_Smersh_A",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Rig_Smersh_B",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Rig_Smersh_C",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Rig_ELA",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.K1_Bag",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Radio_Rig",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.C420_PAPR",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			- (Armor * x90)	,					
			"Base.Shotgun_Rig",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.Belt_Pack_AR",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.Belt_Pack_Gas",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			- (Armor * x90)	,					
			"Base.Belt_Pack_Pouch",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			- (Armor * x90)	,					
			"Base.Belt_Pack_Duty",	Armor	- (Armor * xArmor)								,					
			"Base.Belt_Pack_War",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.D3CR",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.Hat_Tactical_Boonie",	Armor	- (Armor * xArmor)								,					
			"Base.Hat_Tactical_Boonie_Fold",	Armor	- (Armor * xArmor)								,					
			"Base.Hat_Tactical_Cap",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			- (Armor * x90)	,					
			"Base.Hat_Tactical_Cap_Camo",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			- (Armor * x90)	,					
			"Base.Hat_Patrol_Cap",	Armor	- (Armor * xArmor)								,					
			"Base.Hat_Tactical_Beret",	Armor	- (Armor * xArmor)								,					
			"Base.Officer_Hat",	Armor	- (Armor * xArmor)								,					
			"Base.Police_Officer_Hat",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Bear_Mask",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * SURxNON)		,					
			"Base.Hat_FAST_Opscore",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Hat_Gentex_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Hat_HGU56",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Hat_PSGT_Helmet",	Armor	- (Armor * xArmor)								,					
			"Base.Hat_PSGT_Helmet_Camo",	Armor	- (Armor * xArmor)								,					
			"Base.Wolf_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.USCM_Helmet",	Armor	- (Armor * xArmor)								,					
			"Base.Viper_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Maska_1_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.6B6_Helmet",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Fire_Helmet",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Hat_HGU56_Shield",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Hat_HGU56_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Hat_PSGT_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Hat_Riot_Visor",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Hat_PSGT_Neck",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Maska_1_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.6B6_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Vityaz_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.ZSH_Visor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Fire_Visor",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Fire_Visor_UP",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Viper_Helmet_Shield",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Armor_Defender",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Armor_Defender_Set",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Bag_Plate_Carrier",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Armor_6B13",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Sheriff_Vest",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Sheriff_Vest_Full",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)		- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Wolf_Plate_Carrier",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Wolf_Plate_Carrier_B",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.EXO_Suit",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.SET_Armor",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.SET_Armor_FULL",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.USCM_Armor",	Armor	- (Armor * xArmor)								,					
			"Base.Wolf_Knee_Pad",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Wolf_Holster",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Dozer_Leg",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Dozer_Arm",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Dozer_Pouch",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.SET_Leg_Pouch",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Shell_Chest_Bandolier",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Shell_Arm_Bandolier",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Shell_Thigh_Bandolier",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Shell_Arm_Bandolier_B",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Shell_Thigh_Bandolier_B",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Glasses_X1000",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.Glasses_Napier",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)			- (Armor * x90)	,					
			"Base.Glasses_Crewman_Goggles",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.SET_Goggles",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)		- (Armor * x90)	,					
			"Base.Hat_Sordin",	Armor	- (Armor * xArmor)								,					
			"Base.Hat_Astrocom",	Armor	- (Armor * xArmor)								,					
			"Base.SET_Headset",	Armor	- (Armor * xArmor)								,					
			"Base.Aviation_Headsets",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Comtac_Headsets",	Armor	- (Armor * xArmor)				- (Armor * CIVxLEO)				,					
			"Base.Comtac4_Headsets",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Bowman_Headsets",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Hat_Sam_NV",	Armor	- (Armor * xArmor)								,					
			"Base.NV_PVS5",	Armor	- (Armor * xArmor)								,					
			"Base.NV_PNV_57",	Armor	- (Armor * xArmor)								,					
			"Base.NV_PVS7",	Armor	- (Armor * xArmor)								,					
			"Base.NV_PVS21",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)	- (Armor * SURxNON)	- (Armor * x90)	,					
			"Base.Bag_Sniper_Hood",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Bag_Sniper_Suit",	Armor	- (Armor * xArmor)								,					
			"Base.Military_Cloak",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Balaclava_Mask_1",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Balaclava_Mask_2",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Balaclava_Mask_3",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Balaclava_Mask_4",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Balaclava_Mask_5",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Balaclava_Mask_6",	Armor	- (Armor * xArmor)					- (Armor * CIVxMIL)			,					
			"Base.Hat_MSA_Gas_Mask",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.Hat_MSA_Gas_Mask_AMP",	Armor	- (Armor * xArmor)							- (Armor * x90)	,					
			"Base.K1_Gasmask",	Armor	- (Armor * xArmor)								,					
			"Base.K1_Hood",	Armor	- (Armor * xArmor)								,					
			"Base.K1_Half",	Armor	- (Armor * xArmor)								,					
			"Base.PMK1_Gasmask",	Armor	- (Armor * xArmor)								,					
			"Base.PMK1_Half",	Armor	- (Armor * xArmor)								,					
			"Base.PMK2_Gasmask",	Armor	- (Armor * xArmor)								,					
			"Base.PMK2_Half",	Armor	- (Armor * xArmor)								,					
			"Base.S10_Gasmask",	Armor	- (Armor * xArmor)								,					
			"Base.S10_Gasmask_Set",	Armor	- (Armor * xArmor)								,					
			"Base.GP4U_Gasmask",	Armor	- (Armor * xArmor)								,					
			"Base.MM1_Gasmask",	Armor	- (Armor * xArmor)								,					
			"Base.SHMS_Gasmask",	Armor	- (Armor * xArmor)								,					
			"Base.SHMS_Gasmask_Set",	Armor	- (Armor * xArmor)								,					
			"Base.GP5M_Gasmask",	Armor	- (Armor * xArmor)								,					
			"Base.PMG_Gasmask",	Armor	- (Armor * xArmor)								,					
			"Base.AmmoStraps",	Armor	- (Armor * xArmor)							,						
			"Base.AmmoStrap_Bullets",	Armor	- (Armor * xArmor)							,						
			"Base.AmmoStrap_Shells",	Armor	- (Armor * xArmor)							,						
			"Base.HolsterSimple",	Armor	- (Armor * xArmor)							,						
			"Base.HolsterDouble",	Armor	- (Armor * xArmor)							,						
		}																
	},																	
}																		
MergeDistributionRecursive(ProceduralDistributions, Brita_2_ProcDistro)																		
print("BRITA'S ARMOR PACK INSERTED IN PROCEDURAL LISTS")																		
end																		
																		
if getActivatedMods():contains("DRK_1") then																		
print("DRK_1 MOD DETECTED")																		
DRK_1_ProcDistro = {};																		
DRK_1_ProcDistro.list = {																		
																		
	ArmyStorageOutfit = {		--ArmyArmor = {															
		rolls =	MILRollArmor	,														
		items = {																
			"Base.Hat_PASGT_Helmet",	Armor	- (Armor * xArmor)		,											
			"Base.Hat_TPASGT_Helmet",	Armor	- (Armor * xArmor)		,											
			"Base.Interceptor_Armor",	Armor	- (Armor * xArmor)		,											
			"Base.Interceptor_Armor_v",	Armor	- (Armor * xArmor)		,											
			"Base.Interceptor_Armor_s",	Armor	- (Armor * xArmor)		,											
			"Base.Marpat_Jacket_w",	Armor	- (Armor * xArmor)		,											
			"Base.Marpat_Pants_w",	Armor	- (Armor * xArmor)		,											
			"Base.Marpat_Jacket_d",	Armor	- (Armor * xArmor)		,											
			"Base.Marpat_Pants_d",	Armor	- (Armor * xArmor)		,											
			"Base.Interceptor_Pouches",	Armor	- (Armor * xArmor)		,											
			"Base.Hat_USMC_Cap_w",	Armor	- (Armor * xArmor)		,											
			"Base.Hat_USMC_Cap_d",	Armor	- (Armor * xArmor)		,											
		}																
	},																	
																		
	SecurityArmor = {																	
		rolls =	SECRollARMOR	,														
		items = {																
			"Base.Hat_PASGT_Helmet",	Armor	- (Armor * xArmor)		,											
			"Base.Hat_TPASGT_Helmet",	Armor	- (Armor * xArmor)		,											
			"Base.Interceptor_Armor",	Armor	- (Armor * xArmor)		,											
			"Base.Interceptor_Armor_v",	Armor	- (Armor * xArmor)		,											
			"Base.Interceptor_Armor_s",	Armor	- (Armor * xArmor)		,											
			"Base.Marpat_Jacket_w",	Armor	- (Armor * xArmor)		,											
			"Base.Marpat_Pants_w",	Armor	- (Armor * xArmor)		,											
			"Base.Marpat_Jacket_d",	Armor	- (Armor * xArmor)		,											
			"Base.Marpat_Pants_d",	Armor	- (Armor * xArmor)		,											
			"Base.Interceptor_Pouches",	Armor	- (Armor * xArmor)		,											
			"Base.Hat_USMC_Cap_w",	Armor	- (Armor * xArmor)		,											
			"Base.Hat_USMC_Cap_d",	Armor	- (Armor * xArmor)		,											
		}																
	},																	
																		
	ArmySurplusOutfit = {		--SurplusArmor = {															
		rolls =	SURRollARMOR	,														
		items = {																
			"Base.Hat_PASGT_Helmet",	Armor	- (Armor * xArmor)		,											
			"Base.Hat_TPASGT_Helmet",	Armor	- (Armor * xArmor)		,											
			"Base.Interceptor_Armor",	Armor	- (Armor * xArmor)		,											
			"Base.Interceptor_Armor_v",	Armor	- (Armor * xArmor)		,											
			"Base.Interceptor_Armor_s",	Armor	- (Armor * xArmor)		,											
			"Base.Marpat_Jacket_w",	Armor	- (Armor * xArmor)		,											
			"Base.Marpat_Pants_w",	Armor	- (Armor * xArmor)		,											
			"Base.Marpat_Jacket_d",	Armor	- (Armor * xArmor)		,											
			"Base.Marpat_Pants_d",	Armor	- (Armor * xArmor)		,											
			"Base.Interceptor_Pouches",	Armor	- (Armor * xArmor)		,											
			"Base.Hat_USMC_Cap_w",	Armor	- (Armor * xArmor)		,											
			"Base.Hat_USMC_Cap_d",	Armor	- (Armor * xArmor)		,											
		}																
	},																	
}																		
MergeDistributionRecursive(ProceduralDistributions, DRK_1_ProcDistro)																		
print("USMC ARMORY MOD INSERTED IN PROCEDURAL LISTS")																		
end																		
else print ("ARMOR DISTRO OVERRIDE OPTION DISABLED")																		
end																		
																		
																		local distributionTable = nil				-- PRIMARY LOOT SYSTEM								
-- local distributionTable2 = nil				-- MIX GUNS IN DISPLAYS & LOCKERS								
-- local distributionTable3 = nil				-- CASE AND CANISTERS								
												
												
distributionTable = {					-- NEW LISTS ONLY							
	------------------------------------------											
	--	GUNSTORE			--							
	------------------------------------------											
	gunstore = {											
		counter = {										
			procedural = true,									
			procList = {									
				{name =	"GunStoreParts"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"GunStoreAmmo"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"ReloadSupplies"	,min =	0	, max =	4	,weightChance = 	40	},
				{name =	"GunSupplies"	,min =	0	, max =	2	,weightChance = 	20	},
				{name =	"GunStoreShelf"	,min =	0	, max =	4	,weightChance = 	40	},
			--	{name =	"GunStoreGuns"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreCounter"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"StoreCounterCleaning"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"StoreCounterBags"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		displaycase = {										
			procedural = true,									
			procList = {									
				{name =	"GunStoreGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunStoreParts"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"GunStoreAmmo"	,min =	0	, max =	6	,weightChance = 	60	},
				{name =	"GunSupplies"	,min =	0	, max =	4	,weightChance = 	40	},
			--	{name =	"GunStoreArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreDisplayCase"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		locker = {										
			procedural = true,									
			procList = {									
				{name =	"GunStoreGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunStoreParts"	,min =	0	, max =	2	,weightChance = 	20	},
				{name =	"GunStoreAmmo"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"GunStoreArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunSupplies"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreShelf"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreAmmunition"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		shelves = {										
			procedural = true,									
			procList = {									
				{name =	"GunSupplies"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunStoreParts"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"GunStoreAmmo"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"ReloadSupplies"	,min =	0	, max =	4	,weightChance = 	40	},
				{name =	"GunStoreShelf"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"GunStoreGuns"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreAmmunition"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		metal_shelves = {										
			procedural = true,									
			procList = {									
				{name =	"GunStoreAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunStoreShelf"	,min =	1	, max =	1	,weightChance = 	100	},
				{name =	"GunStoreParts"	,min =	0	, max =	6	,weightChance = 	60	},
				{name =	"GunSupplies"	,min =	0	, max =	4	,weightChance = 	40	},
			--	{name =	"GunStoreGuns"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreAmmunition"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		crate = {										
			procedural = true,									
			procList = {									
				{name =	"GunStoreAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunStoreParts"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"GunSupplies"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"GunStoreGuns"	,min =	0	, max =	6	,weightChance = 	60	},
				{name =	"ReloadSupplies"	,min =	0	, max =	4	,weightChance = 	40	},
				{name =	"GunStoreShelf"	,min =	0	, max =	4	,weightChance = 	40	},
			--	{name =	"GunStoreArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		militarycrate = {										
			procedural = true,									
			procList = {									
				{name =	"GunStoreGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunStoreAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunStoreParts"	,min =	2	, max =	10	,weightChance = 	100	},
			}									
		},										
		militarylocker = {										
			procedural = true,									
			procList = {									
				{name =	"GunStoreGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunStoreAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
			}									
		}										
	},											
												
	gunstorestorage = {											
		counter = {										
			procedural = true,									
			procList = {									
				{name =	"GunStoreAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	1	, max =	8	,weightChance = 	80	},
			--	{name =	"GunStoreGuns"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreParts"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =		,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =		,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		locker = {										
			procedural = true,									
			procList = {									
				{name =	"GunStoreGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunStoreAmmo"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"ArmyStorageOutfit"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmyGuns"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmyParts"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmyArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunSupplies"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreShelf"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreAmmunition"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		shelves = {										
			procedural = true,									
			procList = {									
				{name =	"GunSupplies"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunStoreAmmo"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"GunStoreGuns"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreParts"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreShelf"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreAmmunition"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		metal_shelves = {										
			procedural = true,									
			procList = {									
				{name =	"GunStoreAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"GunStoreGuns"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"GunStoreParts"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreShelf"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreAmmunition"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreGuns"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmyStorageElectronics"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmyStorageOutfit"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		crate = {										
			procedural = true,									
			procList = {									
				{name =	"GunStoreAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"ReloadSupplies"	,min =	0	, max =	4	,weightChance = 	40	},
				{name =	"GunStoreGuns"	,min =	0	, max =	4	,weightChance = 	40	},
			--	{name =	"GunStoreGuns"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreParts"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreAmmunition"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreDisplayCase"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmyStorageOutfit"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		militarycrate = {										
			procedural = true,									
			procList = {									
				{name =	"GunStoreGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunStoreAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunStoreParts"	,min =	2	, max =	10	,weightChance = 	100	},
			}									
		},										
		militarylocker = {										
			procedural = true,									
			procList = {									
				{name =	"GunStoreGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunStoreAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
			}									
		}										
	},											
												
	------------------------------------------											
	--	POLICE STORAGE			--							
	------------------------------------------											
	policestorage = {											
		counter = {										
			procedural = true,									
			procList = {									
				{name =	"PoliceAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	0	, max =	6	,weightChance = 	60	},
			--	{name =	"PoliceGuns"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"PoliceParts"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"PoliceArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	NONE	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		locker = {										
			procedural = true,									
			procList = {									
				{name =	"PoliceGuns"	,min =	2	, max =	10	,weightChance = 	100	},
			--	{name =	"PoliceParts"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"PoliceAmmo"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"PoliceArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunSupplies"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"PoliceStorageOutfit"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		metal_shelves = {										
			procedural = true,									
			procList = {									
				{name =	"PoliceGuns"	,min =	0	, max =	6	,weightChance = 	100	},
				{name =	"PoliceAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"PoliceStorageOutfit"	,min =	1	, max =	6	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"PoliceParts"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"PoliceArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		filingcabinet = {										
			procedural = true,									
			procList = {									
				{name =	"GunSupplies"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"PoliceAmmo"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"PoliceGuns"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"PoliceParts"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"PoliceArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	NONE	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		crate = {										
			procedural = true,									
			procList = {									
				{name =	"PoliceAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"PoliceStorageOutfit"	,min =	0	, max =	4	,weightChance = 	40	},
			--	{name =	"PoliceGuns"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"PoliceParts"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"PoliceArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	NONE	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		}										
	},											
												
	------------------------------------------											
	--	SECURITY			--							
	------------------------------------------											
	security = {											
		counter = {										
			procedural = true,									
			procList = {									
				{name =	"SecurityAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"SecurityArmor"	,min =	0	, max =	6	,weightChance = 	60	},
				{name =	"SecurityGuns"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"SecurityParts"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		locker = {										
			procedural = true,									
			procList = {									
				{name =	"SecurityGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"SecurityParts"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"SecurityAmmo"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"SecurityArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		metal_shelves = {										
			procedural = true,									
			procList = {									
				{name =	"SecurityAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	0	, max =	4	,weightChance = 	40	},
				{name =	"SecurityGuns"	,min =	0	, max =	2	,weightChance = 	20	},
				{name =	"SecurityArmor"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"SecurityParts"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		crate = {										
			procedural = true,									
			procList = {									
				{name =	"SecurityAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	0	, max =	6	,weightChance = 	60	},
				{name =	"SecurityArmor"	,min =	0	, max =	4	,weightChance = 	40	},
				{name =	"SecurityGuns"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"SecurityParts"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		}										
	},											
												
	------------------------------------------											
	--	MILITARY CONTAINERS (NON-SPECIFIC)			--							
	------------------------------------------											
	all = {											
		militarycrate = {										
			procedural = true,									
			procList = {									
				{name =	"ArmyGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmyAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmyStorageMedical"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmyStorageElectronics"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmyStorageOutfit"	,min =	2	, max =	10	,weightChance = 	100	},
			}									
		},										
		militarylocker = {										
			procedural = true,									
			procList = {									
				{name =	"ArmyGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmyAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmyStorageOutfit"	,min =	2	, max =	10	,weightChance = 	100	},
			}									
		}										
	},											
	------------------------------------------											
	--	ARMY STORAGE			--							
	------------------------------------------											
	armystorage = {											
		counter = {										
			procedural = true,									
			procList = {									
				{name =	"ArmyAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	1	, max =	10	,weightChance = 	80	},
			--	{name =	"ArmyGuns"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmyParts"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmyArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		locker = {										
			procedural = true,									
			procList = {									
				{name =	"ArmyGuns"	,min =	0	, max =	10	,weightChance = 	100	},
				{name =	"ArmyStorageOutfit"	,min =	0	, max =	10	,weightChance = 	40	},
				{name =	"ArmyAmmo"	,min =	0	, max =	10	,weightChance = 	10	},
			--	{name =	"ArmyParts"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmyArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		metal_shelves = {										
			procedural = true,									
			procList = {									
				{name =	"ArmyAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"ArmyStorageElectronics"	,min =	0	, max =	4	,weightChance = 	40	},
				{name =	"ArmyStorageOutfit"	,min =	0	, max =	4	,weightChance = 	40	},
				{name =	"ArmyGuns"	,min =	0	, max =	10	,weightChance = 	20	},
			--	{name =	"ArmyParts"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmyArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		crate = {										
			procedural = true,									
			procList = {									
				{name =	"ArmyAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"ArmyGuns"	,min =	0	, max =	10	,weightChance = 	40	},
				{name =	"ArmyStorageOutfit"	,min =	0	, max =	4	,weightChance = 	40	},
			--	{name =	"ArmyParts"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmyArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		militarycrate = {										
			procedural = true,									
			procList = {									
				{name =	"ArmyGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmyAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmyStorageMedical"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmyStorageElectronics"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmyStorageOutfit"	,min =	2	, max =	10	,weightChance = 	100	},
			}									
		},										
		militarylocker = {										
			procedural = true,									
			procList = {									
				{name =	"ArmyGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmyAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmyStorageOutfit"	,min =	2	, max =	10	,weightChance = 	100	},
			}									
		}										
	},											
												
	------------------------------------------											
	--	HUNTING			--							
	------------------------------------------											
	hunting = {											
		counter = {										
			procedural = true,									
			procList = {									
				{name =	"HuntParts"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"HuntAmmo"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"GunSupplies"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"ReloadSupplies"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"CampingStoreBooks"	,min =	0	, max =	6	,weightChance = 	60	},
				{name =	"CampingStoreBackpacks"	,min =	0	, max =	6	,weightChance = 	60	},
				{name =	"HuntGuns"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"HuntArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"StoreCounterCleaning"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"StoreCounterBags"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"CampingStoreLegwear"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"CampingStoreGear"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"FishingStoreGear"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		displaycase = {										
			procedural = true,									
			procList = {									
				{name =	"HuntGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"HuntParts"	,min =	0	, max =	6	,weightChance = 	60	},
				{name =	"HuntAmmo"	,min =	0	, max =	4	,weightChance = 	40	},
			--	{name =	"HuntArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreDisplayCase"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		locker = {										
			procedural = true,									
			procList = {									
				{name =	"HuntGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"HuntParts"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"HuntAmmo"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"HuntArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunSupplies"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreDisplayCase"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreAmmunition"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		shelves = {										
			procedural = true,									
			procList = {									
				{name =	"GunSupplies"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ReloadSupplies"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"HuntAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"HuntParts"	,min =	0	, max =	6	,weightChance = 	60	},
			--	{name =	"HuntGuns"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"HuntArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		metal_shelves = {										
			procedural = true,									
			procList = {									
				{name =	"GunSupplies"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"HuntAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"HuntParts"	,min =	0	, max =	6	,weightChance = 	60	},
				{name =	"ReloadSupplies"	,min =	0	, max =	4	,weightChance = 	40	},
			--	{name =	"HuntGuns"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"HuntArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreShelf"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunStoreAmmunition"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		crate = {										
			procedural = true,									
			procList = {									
				{name =	"GunSupplies"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"HuntAmmo"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"ReloadSupplies"	,min =	0	, max =	4	,weightChance = 	40	},
				{name =	"HuntParts"	,min =	0	, max =	4	,weightChance = 	40	},
				{name =	"HuntGuns"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"HuntArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		}										
	},											
												
	------------------------------------------											
	--	SURPLUS			--							
	------------------------------------------											
	armysurplus = {											
		counter = {										
			procedural = true,									
			procList = {									
				{name =	"GunSupplies"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"SurplusParts"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"SurplusAmmo"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"ReloadSupplies"	,min =	0	, max =	2	,weightChance = 	20	},
				{name =	"SurplusGuns"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"SurplusArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmySurplusHeadwear"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"StoreCounterCleaning"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"StoreCounterBags"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		displaycase = {										
			procedural = true,									
			procList = {									
				{name =	"SurplusGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"SurplusParts"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"SurplusAmmo"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"SurplusArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunSupplies"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmySurplusOutfit"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	NONE	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		locker = {										
			procedural = true,									
			procList = {									
				{name =	"SurplusGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"SurplusParts"	,min =	0	, max =	2	,weightChance = 	20	},
				{name =	"SurplusAmmo"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"SurplusArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"GunSupplies"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		shelves = {										
			procedural = true,									
			procList = {									
				{name =	"SurplusAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"SurplusParts"	,min =	0	, max =	6	,weightChance = 	60	},
				{name =	"ReloadSupplies"	,min =	0	, max =	4	,weightChance = 	40	},
				{name =	"ArmySurplusOutfit"	,min =	0	, max =	4	,weightChance = 	40	},
			--	{name =	"SurplusGuns"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"SurplusArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmySurplusBackpacks"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"CampingStoreGear"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmyStorageElectronics"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		metal_shelves = {										
			procedural = true,									
			procList = {									
				{name =	"SurplusAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	0	, max =	6	,weightChance = 	60	},
				{name =	"SurplusParts"	,min =	0	, max =	4	,weightChance = 	40	},
				{name =	"ArmySurplusOutfit"	,min =	0	, max =	2	,weightChance = 	20	},
				{name =	"SurplusGuns"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =	"SurplusArmor"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmySurplusBackpacks"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"CampingStoreGear"	,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =	"ArmyStorageElectronics"	,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		crate = {										
			procedural = true,									
			procList = {									
				{name =	"SurplusAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	1	, max =	8	,weightChance = 	80	},
				{name =	"SurplusParts"	,min =	0	, max =	6	,weightChance = 	60	},
				{name =	"ReloadSupplies"	,min =	0	, max =	4	,weightChance = 	40	},
				{name =	"SurplusGuns"	,min =	0	, max =	2	,weightChance = 	20	},
				{name =	"ArmySurplusOutfit"	,min =	0	, max =	2	,weightChance = 	20	},
				{name =	"CampingStoreGear"	,min =	0	, max =	2	,weightChance = 	20	},
				{name =	"ArmySurplusBackpacks"	,min =	0	, max =	2	,weightChance = 	20	},
			--	{name =		,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =		,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =		,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		militarycrate = {										
			procedural = true,									
			procList = {									
				{name =	"SurplusGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"SurplusAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"GunSupplies"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmyStorageMedical"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmyStorageElectronics"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmySurplusOutfit"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"CampingStoreGear"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmySurplusBackpacks"	,min =	2	, max =	10	,weightChance = 	100	},
			}									
		},										
		militarylocker = {										
			procedural = true,									
			procList = {									
				{name =	"SurplusGuns"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"SurplusAmmo"	,min =	2	, max =	10	,weightChance = 	100	},
				{name =	"ArmySurplusOutfit"	,min =	2	, max =	10	,weightChance = 	100	},
			}									
		}										
	},											
												
	------------------------------------------											
	--	STORAGE UNIT			--							
	------------------------------------------											
	storageunit = {				-- <<== RANDOM LOW CHANCE							
		locker = {										
			procedural = true,									
			procList = {									
				{name =	"FirearmWeapons"	,min =	0	, max =	1	,weightChance = 	80	},
				{name =	"GunStoreParts"	,min =	0	, max =	1	,weightChance = 	20	},
			--	{name =		,min =	0	, max =	0	,weightChance = 		},
			}									
		},										
		metal_shelves = {										
			procedural = true,									
			procList = {									
				{name =	"GunStoreAmmo"	,min =	0	, max =	1	,weightChance = 	1	},
				{name =	"GunStoreParts"	,min =	0	, max =	1	,weightChance = 	1	},
				{name =	"RandomCaseAndCan"	,min =	0	, max =	1	,weightChance = 	1	},
				{name =	"ReloadSupplies"	,min =	0	, max =	1	,weightChance = 	1	},
			--	{name =		,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =		,min =	0	, max =	0	,weightChance = 	0	},
			}									
		},										
		crate = {										
			procedural = true,									
			procList = {									
				{name =	"GunStoreAmmo"	,min =	0	, max =	1	,weightChance = 	1	},
				{name =	"GunStoreParts"	,min =	0	, max =	1	,weightChance = 	1	},
				{name =	"RandomCaseAndCan"	,min =	0	, max =	1	,weightChance = 	1	},
			--	{name =		,min =	0	, max =	0	,weightChance = 	0	},
			--	{name =		,min =	0	, max =	0	,weightChance = 	0	},
			}									
		}										
	},											
												
												
	Bag_Schoolbag = {											
		rolls = 3,				-- <<<==== VANILLA DEFAULT, NO PROC METHOD, JUST ADD TO EXISTING						
		items = {										
			"Base.UmarexSS",		0.1	- (wBB * xBB)	- (wBB * CIVx * x90)	,				
			"Base.BB177Box",		0.5	- (wBB * xBB)		,				
			"Base.BB177Box",		0.2	- (wBB * xBB)		,				
			"Base.SlingShot_Rock",		0.1	- (wBOW * xBOW)		,				
			"Base.Jar_Marbles",		0.2	- (wBOW * xBOW)		,				
		},										
	},											
												
	Toolbox = {											
		rolls = 1,				-- <<<==== VANILLA DEFAULT, NO PROC METHOD, JUST ADD TO EXISTING						
		items = {										
			"Base.Oil_Filter",		12			,				
			"Base.WD",		6			,				
		},										
	},											
												
	Guitarcase = {											
		rolls = 1,				-- <<<==== VANILLA DEFAULT, NO PROC METHOD, JUST ADD TO EXISTING						
		items = {										
			"Base.AR7_Fold",		0.01	- (w22 * x22)		,				
			"Base.EDM96_Fold",		0.01	- (wBMG * xBMG)	- (wBMG * CIVx * x90)	,				
			"Base.SUB2000_Fold",		0.01	- (w9 * x9)	- (w9 * CIVx * x90)	,				
			"Base.Coachgun_Pistol",		0.01	- (w12g * x12g)		,				
			"Base.DT11_Pistol",		0.01	- (w12g * x12g)		,				
			"Base.MAC10_Fold",		0.01	- (w45 * x45)		,				
			"Base.Commando",		0.01	- (w9 * x9)		,				
		},										
	},											
												
	--------------------------------------------------											
	--	50 CALIBER AMMO-CAN CONTENTS		--								
	--------------------------------------------------											
	AmmoCan50_223 = {											
		rolls = 10,										
		items = {										
			"223Box",		200,							
			"223Box",		200,							
			"223Box",		200,							
			"223Box",		200,							
			"223Box",		200,							
			"223Box",		200,							
			"223Box",		200,							
			"223Box",		200,							
			"223Box",		200,							
			"223Box",		200,							
		},										
	},											
	AmmoCan50_556 = {											
		rolls = 10,										
		items = {										
			"556Box",		200,							
			"556Box",		200,							
			"556Box",		200,							
			"556Box",		200,							
			"556Box",		200,							
			"556Box",		200,							
			"556Box",		200,							
			"556Box",		200,							
			"556Box",		200,							
			"556Box",		200,							
		},										
	},											
	AmmoCan50_545x39 = {											
		rolls = 9,										
		items = {										
			"545x39Box",		200,							
			"545x39Box",		200,							
			"545x39Box",		200,							
			"545x39Box",		200,							
			"545x39Box",		200,							
			"545x39Box",		200,							
			"545x39Box",		200,							
			"545x39Box",		200,							
			"545x39Box",		200,							
			"545x39Box",		200,							
		},										
	},											
	AmmoCan50_762x39 = {											
		rolls = 9,										
		items = {										
			"762x39Box",		200,							
			"762x39Box",		200,							
			"762x39Box",		200,							
			"762x39Box",		200,							
			"762x39Box",		200,							
			"762x39Box",		200,							
			"762x39Box",		200,							
			"762x39Box",		200,							
			"762x39Box",		200,							
			"762x39Box",		200,							
		},										
	},											
	AmmoCan50_308 = {											
		rolls = 8,										
		items = {										
			"308Box",		200,							
			"308Box",		200,							
			"308Box",		200,							
			"308Box",		200,							
			"308Box",		200,							
			"308Box",		200,							
			"308Box",		200,							
			"308Box",		200,							
			"308Box",		200,							
			"308Box",		200,							
		},										
	},											
	AmmoCan50_762x51 = {											
		rolls = 8,										
		items = {										
			"762x51Box",		200,							
			"762x51Box",		200,							
			"762x51Box",		200,							
			"762x51Box",		200,							
			"762x51Box",		200,							
			"762x51Box",		200,							
			"762x51Box",		200,							
			"762x51Box",		200,							
			"762x51Box",		200,							
			"762x51Box",		200,							
		},										
	},											
	AmmoCan50_762x54r = {											
		rolls = 8,										
		items = {										
			"762x54rBox",		200,							
			"762x54rBox",		200,							
			"762x54rBox",		200,							
			"762x54rBox",		200,							
			"762x54rBox",		200,							
			"762x54rBox",		200,							
			"762x54rBox",		200,							
			"762x54rBox",		200,							
			"762x54rBox",		200,							
			"762x54rBox",		200,							
		},										
	},											
	AmmoCan50_3006 = {											
		rolls = 8,										
		items = {										
			"3006Box",		200,							
			"3006Box",		200,							
			"3006Box",		200,							
			"3006Box",		200,							
			"3006Box",		200,							
			"3006Box",		200,							
			"3006Box",		200,							
			"3006Box",		200,							
			"3006Box",		200,							
			"3006Box",		200,							
		},										
	},											
	AmmoCan50_50 = {											
		rolls = 6,										
		items = {										
			"50BMGBox",		200,							
			"50BMGBox",		200,							
			"50BMGBox",		200,							
			"50BMGBox",		200,							
			"50BMGBox",		200,							
			"50BMGBox",		200,							
			"50BMGBox",		200,							
			"50BMGBox",		200,							
			"50BMGBox",		200,							
			"50BMGBox",		200,							
		},										
	},											
	AmmoCan50_410 = {											
		rolls = 5,										
		items = {										
			"410gShotgunShellsBox",		200,							
			"410gShotgunShellsBox",		200,							
			"410gShotgunShellsBox",		200,							
			"410gShotgunShellsBox",		200,							
			"410gShotgunShellsBox",		200,							
			"410gShotgunShellsBox",		200,							
			"410gShotgunShellsBox",		200,							
			"410gShotgunShellsBox",		200,							
			"410gShotgunShellsBox",		200,							
			"410gShotgunShellsBox",		200,							
		},										
	},											
	AmmoCan50_20 = {											
		rolls = 5,										
		items = {										
			"20gShotgunShellsBox",		200,							
			"20gShotgunShellsBox",		200,							
			"20gShotgunShellsBox",		200,							
			"20gShotgunShellsBox",		200,							
			"20gShotgunShellsBox",		200,							
			"20gShotgunShellsBox",		200,							
			"20gShotgunShellsBox",		200,							
			"20gShotgunShellsBox",		200,							
			"20gShotgunShellsBox",		200,							
			"20gShotgunShellsBox",		200,							
		},										
	},											
	AmmoCan50_12 = {											
		rolls = 5,										
		items = {										
			"ShotgunShellsBox",		200,							
			"ShotgunShellsBox",		200,							
			"ShotgunShellsBox",		200,							
			"ShotgunShellsBox",		200,							
			"ShotgunShellsBox",		200,							
			"ShotgunShellsBox",		200,							
			"ShotgunShellsBox",		200,							
			"ShotgunShellsBox",		200,							
			"ShotgunShellsBox",		200,							
			"ShotgunShellsBox",		200,							
		},										
	},											
	AmmoCan50_10 = {											
		rolls = 5,										
		items = {										
			"10gShotgunShellsBox",		200,							
			"10gShotgunShellsBox",		200,							
			"10gShotgunShellsBox",		200,							
			"10gShotgunShellsBox",		200,							
			"10gShotgunShellsBox",		200,							
			"10gShotgunShellsBox",		200,							
			"10gShotgunShellsBox",		200,							
			"10gShotgunShellsBox",		200,							
			"10gShotgunShellsBox",		200,							
			"10gShotgunShellsBox",		200,							
		},										
	},											
	AmmoCan50_4 = {											
		rolls = 6,										
		items = {										
			"4gShotgunShellsBox",		200,							
			"4gShotgunShellsBox",		200,							
			"4gShotgunShellsBox",		200,							
			"4gShotgunShellsBox",		200,							
			"4gShotgunShellsBox",		200,							
			"4gShotgunShellsBox",		200,							
			"4gShotgunShellsBox",		200,							
			"4gShotgunShellsBox",		200,							
			"4gShotgunShellsBox",		200,							
			"4gShotgunShellsBox",		200,							
		},										
	},											
	AmmoCan50_MIX = {											
		rolls = 8,										
		items = {										
			"223Box",		150	- (150 * x223),						
			"223Box",		150	- (150 * x223),						
			"556Box",		150	- (150 * x556),						
			"556Box",		150	- (150 * x556),						
			"545x39Box",		150	- (150 * x545x39),						
			"545x39Box",		150	- (150 * x545x39),						
			"762x39Box",		150	- (150 * x762x39),						
			"762x39Box",		150	- (150 * x762x39),						
			"308Box",		150	- (150 * x308),						
			"308Box",		150	- (150 * x308),						
			"762x54rBox",		150	- (150 * x762x54r),						
			"762x54rBox",		150	- (150 * x762x54r),						
			"3006Box",		150	- (150 * x3006),						
			"3006Box",		150	- (150 * x3006),						
			"50BMGBox",		150	- (150 * xBMG),						
			"50BMGBox",		150	- (150 * xBMG),						
		},										
	},											
	AmmoCan50_SHOT = {											
		rolls = 8,										
		items = {										
			"410gShotgunShellsBox",			200 - (200 * x45LC),						
			"410gShotgunShellsBox",			200 - (200 * x45LC),						
			"20gShotgunShellsBox",			200 - (200 * x20g),						
			"20gShotgunShellsBox",			200 - (200 * x20g),						
			"ShotgunShellsBox",			200 - (200 * x12g),						
			"ShotgunShellsBox",			200 - (200 * x12g),						
			"10gShotgunShellsBox",			200 - (200 * x10g),						
			"10gShotgunShellsBox",			200 - (200 * x10g),						
			"4gShotgunShellsBox",			200 - (200 * x4g),						
			"4gShotgunShellsBox",			200 - (200 * x4g),						
		},										
	},											
	AmmoCan50_HE = {											
		rolls = 10,			-- ROUND COUNT 1 = 50							
		items = {										
			"40HERound",		200,							
			"40HERound",		200,							
			"40HERound",		200,							
			"40HERound",		200,							
			"40HERound",		200,							
		},										
	},											
	AmmoCan50_INC = {											
		rolls = 10,			-- ROUND COUNT 1 = 50							
		items = {										
			"40INCRound",		200,							
			"40INCRound",		200,							
			"40INCRound",		200,							
			"40INCRound",		200,							
			"40INCRound",		200,							
		},										
	},											
	AmmoCan50_ROCKET = {											
		rolls = 4,			-- ROUND COUNT 1 = 50							
		items = {										
			"HERocket",		100,							
			"HERocket",		100,							
			"HERocket",		100,							
			"HERocket",		100,							
			"HERocket",		100,							
		},										
	},											
												
	--------------------------------------------------											
	--	30 CALIBER AMMO-CAN CONTENTS		--								
	--------------------------------------------------											
	AmmoCan30_22 = {											
		rolls = 5,										
		items = {										
			"Bullets22Box",		200,							
			"Bullets22Box",		200,							
			"Bullets22Box",		200,							
			"Bullets22Box",		200,							
			"Bullets22Box",		200,							
			"Bullets22Box",		200,							
			"Bullets22Box",		200,							
			"Bullets22Box",		200,							
			"Bullets22Box",		200,							
			"Bullets22Box",		200,							
		},										
	},											
	AmmoCan30_57 = {											
		rolls = 5,										
		items = {										
			"Bullets57Box",		200,							
			"Bullets57Box",		200,							
			"Bullets57Box",		200,							
			"Bullets57Box",		200,							
			"Bullets57Box",		200,							
			"Bullets57Box",		200,							
			"Bullets57Box",		200,							
			"Bullets57Box",		200,							
			"Bullets57Box",		200,							
			"Bullets57Box",		200,							
		},										
	},											
	AmmoCan30_380 = {											
		rolls = 5,										
		items = {										
			"Bullets380Box",		200,							
			"Bullets380Box",		200,							
			"Bullets380Box",		200,							
			"Bullets380Box",		200,							
			"Bullets380Box",		200,							
			"Bullets380Box",		200,							
			"Bullets380Box",		200,							
			"Bullets380Box",		200,							
			"Bullets380Box",		200,							
			"Bullets380Box",		200,							
		},										
	},											
	AmmoCan30_9 = {											
		rolls = 5,										
		items = {										
			"Bullets9mmBox",		200,							
			"Bullets9mmBox",		200,							
			"Bullets9mmBox",		200,							
			"Bullets9mmBox",		200,							
			"Bullets9mmBox",		200,							
			"Bullets9mmBox",		200,							
			"Bullets9mmBox",		200,							
			"Bullets9mmBox",		200,							
			"Bullets9mmBox",		200,							
			"Bullets9mmBox",		200,							
		},										
	},											
	AmmoCan30_38 = {											
		rolls = 5,										
		items = {										
			"Bullets38Box",		200,							
			"Bullets38Box",		200,							
			"Bullets38Box",		200,							
			"Bullets38Box",		200,							
			"Bullets38Box",		200,							
			"Bullets38Box",		200,							
			"Bullets38Box",		200,							
			"Bullets38Box",		200,							
			"Bullets38Box",		200,							
			"Bullets38Box",		200,							
		},										
	},											
	AmmoCan30_357 = {											
		rolls = 5,										
		items = {										
			"Bullets357Box",		200,							
			"Bullets357Box",		200,							
			"Bullets357Box",		200,							
			"Bullets357Box",		200,							
			"Bullets357Box",		200,							
			"Bullets357Box",		200,							
			"Bullets357Box",		200,							
			"Bullets357Box",		200,							
			"Bullets357Box",		200,							
			"Bullets357Box",		200,							
												
		},										
	},											
	AmmoCan30_45 = {											
		rolls = 5,										
		items = {										
			"Bullets45Box",		200,							
			"Bullets45Box",		200,							
			"Bullets45Box",		200,							
			"Bullets45Box",		200,							
			"Bullets45Box",		200,							
			"Bullets45Box",		200,							
			"Bullets45Box",		200,							
			"Bullets45Box",		200,							
			"Bullets45Box",		200,							
			"Bullets45Box",		200,							
		},										
	},											
	AmmoCan30_45LC = {											
		rolls = 5,										
		items = {										
			"Bullets45LCBox",		200,							
			"Bullets45LCBox",		200,							
			"Bullets45LCBox",		200,							
			"Bullets45LCBox",		200,							
			"Bullets45LCBox",		200,							
			"Bullets45LCBox",		200,							
			"Bullets45LCBox",		200,							
			"Bullets45LCBox",		200,							
			"Bullets45LCBox",		200,							
			"Bullets45LCBox",		200,							
		},										
	},											
	AmmoCan30_44 = {											
		rolls = 5,										
		items = {										
			"Bullets44Box",		200,							
			"Bullets44Box",		200,							
			"Bullets44Box",		200,							
			"Bullets44Box",		200,							
			"Bullets44Box",		200,							
			"Bullets44Box",		200,							
			"Bullets44Box",		200,							
			"Bullets44Box",		200,							
			"Bullets44Box",		200,							
			"Bullets44Box",		200,							
		},										
	},											
	AmmoCan30_4570 = {											
		rolls = 5,										
		items = {										
			"Bullets4570Box",		200,							
			"Bullets4570Box",		200,							
			"Bullets4570Box",		200,							
			"Bullets4570Box",		200,							
			"Bullets4570Box",		200,							
			"Bullets4570Box",		200,							
			"Bullets4570Box",		200,							
			"Bullets4570Box",		200,							
			"Bullets4570Box",		200,							
			"Bullets4570Box",		200,							
		},										
	},											
	AmmoCan30_50MAG = {											
		rolls = 5,										
		items = {										
			"Bullets50MAGBox",		200,							
			"Bullets50MAGBox",		200,							
			"Bullets50MAGBox",		200,							
			"Bullets50MAGBox",		200,							
			"Bullets50MAGBox",		200,							
			"Bullets50MAGBox",		200,							
			"Bullets50MAGBox",		200,							
			"Bullets50MAGBox",		200,							
			"Bullets50MAGBox",		200,							
			"Bullets50MAGBox",		200,							
		},										
	},											
	AmmoCan30_MIX = {											
		rolls = 5,										
		items = {										
			"Bullets22Box",			100 - (100 * x22),						
			"Bullets22Box",			100 - (100 * x22),						
			"Bullets380Box",			100 - (100 * x380),						
			"Bullets380Box",			100 - (100 * x380),						
			"Bullets9mmBox",			100 - (100 * x9),						
			"Bullets9mmBox",			100 - (100 * x9),						
			"Bullets38Box",			100 - (100 * x357),						
			"Bullets38Box",			100 - (100 * x357),						
			"Bullets57Box",			100 - (100 * x57),						
			"Bullets57Box",			100 - (100 * x57),						
			"Bullets357Box",			100 - (100 * x357),						
			"Bullets357Box",			100 - (100 * x357),						
			"Bullets45Box",			100 - (100 * x45),						
			"Bullets45Box",			100 - (100 * x45),						
			"Bullets45LCBox",			100 - (100 * x45LC),						
			"Bullets45LCBox",			100 - (100 * x45LC),						
			"Bullets4570Box",			100 - (100 * x4570),						
			"Bullets4570Box",			100 - (100 * x4570),						
			"Bullets44Box",			100 - (100 * x44),						
			"Bullets44Box",			100 - (100 * x44),						
			"Bullets50MAGBox",			100 - (100 * xBMG),						
			"Bullets50MAGBox",			100 - (100 * xBMG),						
		},										
	},											
												
	--------------------------------------------------											
	--	RED POLY-CAN CONTENTS			--							
	--------------------------------------------------											
	PolyCan_Red_SPASClip = {				-- SHOTGUN							
		rolls = 6,										
		items = {										
			"SPASClip",		200,							
		},										
	},											
	PolyCan_Red_12gDrum = {				-- SHOTGUN							
		rolls = 2,										
		items = {										
			"12gDrum",		200,							
		},										
	},											
	PolyCan_Red_38Speed = {				-- SPEEDLOADER							
		rolls = 10,										
		items = {										
			"38Speed",		200,							
		},										
	},											
	PolyCan_Red_44Speed = {				-- SPEEDLOADER							
		rolls = 10,										
		items = {										
			"44Speed",		200,							
		},										
	},											
												
	--------------------------------------------------											
	--	BLUE POLY-CAN CONTENTS			--							
	--------------------------------------------------											
	PolyCan_Blue_9mmSSClip = {				-- PISTOL 9mm							
		rolls = 8,										
		items = {										
			"9mmSSClip",		200,							
		},										
	},											
	PolyCan_Blue_9mmSSExtClip = {				-- PISTOL 9mm							
		rolls = 6,										
		items = {										
			"9mmSSExtClip",		200,							
		},										
	},											
	PolyCan_Blue_9mmClip = {				-- PISTOL 9mm							
		rolls = 8,										
		items = {										
			"9mmClip",		200,							
		},										
	},											
	PolyCan_Blue_9mmExtClip = {				-- PISTOL 9mm							
		rolls = 6,										
		items = {										
			"9mmExtClip",		200,							
		},										
	},											
	PolyCan_Blue_9mmDrum = {				-- PISTOL 9mm							
		rolls = 4,										
		items = {										
			"9mmDrum",		200,							
		},										
	},											
	PolyCan_Blue_45DSClip = {				-- PISTOL 45							
		rolls = 8,										
		items = {										
			"45DSClip",		200,							
		},										
	},											
	PolyCan_Blue_45DSExtClip = {				-- PISTOL 45							
		rolls = 6,										
		items = {										
			"45DSExtClip",		200,							
		},										
	},											
	PolyCan_Blue_45Drum = {				-- PISTOL 45							
		rolls = 4,										
		items = {										
			"45Drum",		200,							
		},										
	},											
	PolyCan_Blue_45Clip = {				-- PISTOL 45 SingleStack							
		rolls = 8,										
		items = {										
			"45Clip",		200,							
		},										
	},											
	PolyCan_Blue_45ExtClip = {				-- PISTOL 45 SingleStack							
		rolls = 6,										
		items = {										
			"45ExtClip",		200,							
		},										
	},											
												
												
	--------------------------------------------------											
	--	BROWN POLY-CAN CONTENTS			--							
	--------------------------------------------------											
	PolyCan_Brown_556Clip = {				-- RIFLE							
		rolls = 6,										
		items = {										
			"556Clip",		200,							
		},										
	},											
	PolyCan_Brown_556Drum = {				-- RIFLE							
		rolls = 4,										
		items = {										
			"556Drum",		200,							
		},										
	},											
	PolyCan_Brown_AKClip = {				-- RIFLE							
		rolls = 6,										
		items = {										
			"AKClip",		200,							
		},										
	},											
	PolyCan_Brown_762Drum = {				-- RIFLE							
		rolls = 4,										
		items = {										
			"762Drum",		200,							
		},										
	},											
	PolyCan_Brown_545StdClip = {				-- RIFLE							
		rolls = 6,										
		items = {										
			"545StdClip",		200,							
		},										
	},											
	PolyCan_Brown_545Drum = {				-- RIFLE							
		rolls = 4,										
		items = {										
			"545Drum",		200,							
		},										
	},											
												
	--------------------------------------------------											
	--	BEIGE POLY-CAN CONTENTS			--							
	--------------------------------------------------											
	PolyCan_Beige_308StdClip = {				-- HEAVY							
		rolls = 6,										
		items = {										
			"308StdClip",		200,							
		},										
	},											
	PolyCan_Beige_308ExtClip = {				-- HEAVY							
		rolls = 4,										
		items = {										
			"308ExtClip",		200,							
		},										
	},											
	PolyCan_Beige_BMG = {				-- HEAVY							
		rolls = 6,										
		items = {										
			"M82Clip",		200,							
		},										
	},											
	PolyCan_Beige_K11 = {				-- HEAVY							
		rolls = 4,										
		items = {										
			"K11HEClip",		200,							
		},										
	},											
	PolyCan_Beige_SVDClip = {				-- HEAVY							
		rolls = 6,										
		items = {										
			"SVDClip",		200,							
		},										
	},											
	PolyCan_Beige_SKSClip = {				-- HEAVY							
		rolls = 20,										
		items = {										
			"SKSClip",		200,							
		},										
	},											
	PolyCan_Beige_M1Clip = {				-- HEAVY							
		rolls = 20,										
		items = {										
			"M1Clip",		200,							
		},										
	},											
	PolyCan_Beige_1903Clip = {				-- HEAVY							
		rolls = 20,										
		items = {										
			"1903Clip",		200,							
		},										
	},											
												
}												
												
table.insert(Distributions, 1, distributionTable);												
												
------------------------------------------------------																			
--	MILITARY / SWAT VEHICLE DISTRO FILE				--														
------------------------------------------------------																			
	VehicleDistributions.A26Military_Trunk = {																		
		rolls = 1,																	
		items = {																	
			"Base.UmarexSS",	wBB	 	 * VLR	- (wBB * xBB)		- (wBB * MILx * xUSA)	- (wBB * MILx * MILxNON)	- (wBB * MILx * MILxUSA)	- (wBB * MILx * MILxSOV)	- (wBB * MILx * MILxCZE)	- (wBB * MILx * MILxKOR)	- (wBB * MILx * MILxPAC)	- (wBB * MILx * MILxEUR)	- (wBB * MILx * MILxISR)	- (wBB * MILx * x90)	,
			"Base.Benjamin_M397",	wBB	 * MILx	 * VLR	- (wBB * xBB)		- (wBB * MILx * xUSA)	- (wBB * MILx * MILxNON)	- (wBB * MILx * MILxUSA)	- (wBB * MILx * MILxSOV)	- (wBB * MILx * MILxCZE)	- (wBB * MILx * MILxKOR)	- (wBB * MILx * MILxPAC)	- (wBB * MILx * MILxEUR)	- (wBB * MILx * MILxISR)		,
			"Base.RWS_M34",	wBB	 * MILx	 * VLR	- (wBB * xBB)		- (wBB * MILx * xUSA)	- (wBB * MILx * MILxNON)	- (wBB * MILx * MILxUSA)	- (wBB * MILx * MILxSOV)	- (wBB * MILx * MILxCZE)	- (wBB * MILx * MILxKOR)	- (wBB * MILx * MILxPAC)	- (wBB * MILx * MILxEUR)	- (wBB * MILx * MILxISR)	- (wBB * MILx * x90)	,
			"Base.VM_68",	wBB	 * MILx	 * VLR	- (wBB * xBB)		- (wBB * MILx * xUSA)	- (wBB * MILx * MILxNON)	- (wBB * MILx * MILxUSA)	- (wBB * MILx * MILxSOV)	- (wBB * MILx * MILxCZE)	- (wBB * MILx * MILxKOR)	- (wBB * MILx * MILxPAC)	- (wBB * MILx * MILxEUR)	- (wBB * MILx * MILxISR)		,
			"Base.CP33",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)	- (w22 * MILx * x90)	,
			"Base.Ruger_MK4",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)	- (w22 * MILx * x90)	,
			"Base.Ruger_MK4_2245",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)	- (w22 * MILx * x90)	,
			"Base.Buckmark",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.Buckmark_Long",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.Buckmark_Carbine",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.HK4_22",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xEUR)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.ZIP22",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)	- (w22 * MILx * x90)	,
			"Base.Ruger_1022",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)		- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)			,
			"Base.Marlin_M70",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.Cricket_22",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xBOLT)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.AR7",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.Calico_22LR",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSMG)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.American180",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSMG)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.Winchester1903",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xLEVER)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)		,
			"Base.KRISS22_MK11_Stock",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSMG)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)	- (w22 * MILx * x90)	,
			"Base.KRISS22_CRB_Stock",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSMG)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)	- (w22 * MILx * x90)	,
			"Base.CMR_30",	w22	 * MILx	 * VLR	- (w22 * x22)	- (w22 * MILx * xSEMI)	- (w22 * MILx * xUSA)	- (w22 * MILx * MILxNON)	- (w22 * MILx * MILxUSA)	- (w22 * MILx * MILxSOV)	- (w22 * MILx * MILxCZE)	- (w22 * MILx * MILxKOR)	- (w22 * MILx * MILxPAC)	- (w22 * MILx * MILxEUR)	- (w22 * MILx * MILxISR)	- (w22 * MILx * x90)	,
			"Base.G42",	w380	 * MILx	 * VLR	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xEUR)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)	- (w380 * MILx * x90)	,
			"Base.LCP380",	w380	 * MILx	 * VLR	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xUSA)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)	- (w380 * MILx * x90)	,
			"Base.BodyGuard380",	w380	 * MILx	 * VLR	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xUSA)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)	- (w380 * MILx * x90)	,
			"Base.Bersa85F",	w380	 * MILx	 * VLR	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xREST)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)		,
			"Base.Colt1903",	w380	 * MILx	 * VLR	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xUSA)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)		,
			"Base.Makarov380",	w380	 * MILx	 * VLR	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xSOV)		- (w380 * MILx * MILxUSA)		- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)		- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)		,
			"Base.PPK",	w380	 * MILx	 * VLR	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xEUR)		- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)		- (w380 * MILx * MILxISR)		,
			"Base.HK4_380",	w380	 * MILx	 * VLR	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xEUR)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)		,
			"Base.VP70",	w380	 * MILx	 * VLR	- (w380 * x380)	- (w380 * MILx * xSMG)	- (w380 * MILx * xEUR)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)		,
			"Base.VP70_Stock",	w380	 * MILx	 * VLR	- (w380 * x380)	- (w380 * MILx * xSMG)	- (w380 * MILx * xEUR)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)		,
			"Base.Vz61_Fixed",	w380	 * MILx	 * VLR	- (w380 * x380)	- (w380 * MILx * xSMG)	- (w380 * MILx * xCZE)		- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)		- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)			,
			"Base.Vz61_Fold",	w380	 * MILx	 * VLR	- (w380 * x380)	- (w380 * MILx * xSMG)	- (w380 * MILx * xCZE)		- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)		- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)			,
			"Base.BT380_Stock",	w380	 * MILx	 * VLR	- (w380 * x380)	- (w380 * MILx * xSEMI)	- (w380 * MILx * xEUR)	- (w380 * MILx * MILxNON)	- (w380 * MILx * MILxUSA)	- (w380 * MILx * MILxSOV)	- (w380 * MILx * MILxCZE)	- (w380 * MILx * MILxKOR)	- (w380 * MILx * MILxPAC)	- (w380 * MILx * MILxEUR)	- (w380 * MILx * MILxISR)	- (w380 * MILx * x90)	,
			"Base.FN_57", 	w57	 * MILx	 * VLR	- (w57 * x57)	- (w57 * MILx * xSEMI)	- (w57 * MILx * xEUR)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.FN_57_MK2", 	w57	 * MILx	 * VLR	- (w57 * x57)	- (w57 * MILx * xSEMI)	- (w57 * MILx * xEUR)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.FN_P90",	w57	 * MILx	 * VLR	- (w57 * x57)	- (w57 * MILx * xSMG)	- (w57 * MILx * xEUR)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.FN_PS90",	w57	 * MILx	 * VLR	- (w57 * x57)	- (w57 * MILx * xSMG)	- (w57 * MILx * xEUR)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.MPA57DMG",	w57	 * MILx	 * VLR	- (w57 * x57)	- (w57 * MILx * xSMG)	- (w57 * MILx * xUSA)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.MPA57DMG_Carbine",	w57	 * MILx	 * VLR	- (w57 * x57)	- (w57 * MILx * xSMG)	- (w57 * MILx * xUSA)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.AR57_PDW",	w57	 * MILx	 * VLR	- (w57 * x57)	- (w57 * MILx * xSMG)	- (w57 * MILx * xUSA)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.AR57_PDW_Long",	w57	 * MILx	 * VLR	- (w57 * x57)	- (w57 * MILx * xSMG)	- (w57 * MILx * xUSA)	- (w57 * MILx * MILxNON)	- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.Ruger_PCC",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.Ruger_PCC_R",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.Ruger_PCC_M",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.HiPoint",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.HiPoint_Carbine",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.STAR_BM", 	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xREST)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.M39",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.MK22",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)				,
			"Base.G43",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.CZ75",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.CZ_75b",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.CZ_75_SP01_SS",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.CZ_75_SP01",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.CZ_75_Compact",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.CZ_75_P01",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.CZ_2075",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)		- (w9 * MILx * x90)	,
			"Base.CZ_75_Shadow",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)		- (w9 * MILx * x90)	,
			"Base.CZ_75_Czechmate",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xCZE)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)		- (w9 * MILx * x90)	,
			"Base.EAA_Witness_9",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.EAA_Witness_Long_9",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.G17",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)				,
			"Base.G18",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)				,
			"Base.G34", 	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.K5",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xKOR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.RPD_92FS",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.M9",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.M9A3",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)		- (w9 * MILx * x90)	,
			"Base.B93R",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.M5906",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.XD9",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.MP9",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.P226",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)				,
			"Base.APS",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xSOV)		- (w9 * MILx * MILxUSA)		- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)		- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Makarov",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xSOV)		- (w9 * MILx * MILxUSA)		- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)		- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.PB",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xSOV)		- (w9 * MILx * MILxUSA)		- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)		- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Luger",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Luger_WW1",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Luger_Carbine",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xEUR)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.UZI", 	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xREST)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.UZI_Wood",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xREST)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.UZI_Micro",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xREST)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)			,
			"Base.BT9_Fold",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.UMP9_Stock",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.SUB2000",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.MP5_Fixed",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.MP5_Stock",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.MP5SD6_Fixed",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.MP5SD6_Stock",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)			- (w9 * MILx * MILxSOV)			- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.EVO_Fold",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xCZE)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)		- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.K7_Stock",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xKOR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.AUG9",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.KG9",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Calico_M900_Fold",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Calico_M950_Pistol",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Bizon2_01_Stock",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xSOV)		- (w9 * MILx * MILxUSA)		- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.VSS",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xSOV)		- (w9 * MILx * MILxUSA)		- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)		- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.ASVAL",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xSOV)		- (w9 * MILx * MILxUSA)		- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)		- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.M1Carbine",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSEMI)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.M2Carbine",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.M635",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.M635S",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.M635SD",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)			- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.MP7",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)		- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.Jatimatic",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)		,
			"Base.Sten",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.Sten_MK2",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.Sten_MK2SD",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.STAR_Z45_Stock",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.STAR_Z45_Fixed",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xEUR)		- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)		- (w9 * MILx * MILxISR)		,
			"Base.KRISS9_Stock",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.KRISS9_MLOK_Stock",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.JW3_TTI_MPX",	w9	 * MILx	 * VLR	- (w9 * x9)	- (w9 * MILx * xSMG)	- (w9 * MILx * xUSA)	- (w9 * MILx * MILxNON)	- (w9 * MILx * MILxUSA)	- (w9 * MILx * MILxSOV)	- (w9 * MILx * MILxCZE)	- (w9 * MILx * MILxKOR)	- (w9 * MILx * MILxPAC)	- (w9 * MILx * MILxEUR)	- (w9 * MILx * MILxISR)	- (w9 * MILx * x90)	,
			"Base.M5238",	w357	 * MILx	 * VLR	- (w357 * x357)	- (w357 * MILx * xSEMI)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.Taurus856",	w357	 * MILx	 * VLR	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xREST)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)	- (w357 * MILx * x90)	,
			"Base.Colt_Service38",	w357	 * MILx	 * VLR	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.GP100_2",	w357	 * MILx	 * VLR	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.GP100_4",	w357	 * MILx	 * VLR	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.GP100_6",	w357	 * MILx	 * VLR	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.K6S",	w357	 * MILx	 * VLR	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)	- (w357 * MILx * x90)	,
			"Base.Rhino_200DS",	w357	 * MILx	 * VLR	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xEUR)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)	- (w357 * MILx * x90)	,
			"Base.Rhino_40DS",	w357	 * MILx	 * VLR	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xEUR)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)	- (w357 * MILx * x90)	,
			"Base.Rhino_60DS",	w357	 * MILx	 * VLR	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xEUR)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)	- (w357 * MILx * x90)	,
			"Base.SW_327",	w357	 * MILx	 * VLR	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)	- (w357 * MILx * x90)	,
			"Base.M1936",	w357	 * MILx	 * VLR	- (w357 * x357)	- (w357 * MILx * xREV)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.NEF_Handi_38",	w357	 * MILx	 * VLR	- (w357 * x357)	- (w357 * MILx * xBREAK)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.Marlin_1894",	w357	 * MILx	 * VLR	- (w357 * x357)	- (w357 * MILx * xLEVER)	- (w357 * MILx * xUSA)	- (w357 * MILx * MILxNON)	- (w357 * MILx * MILxUSA)	- (w357 * MILx * MILxSOV)	- (w357 * MILx * MILxCZE)	- (w357 * MILx * MILxKOR)	- (w357 * MILx * MILxPAC)	- (w357 * MILx * MILxEUR)	- (w357 * MILx * MILxISR)		,
			"Base.CZ97B",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xCZE)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)		- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)		- (w45 * MILx * x90)	,
			"Base.EAA_Witness_45",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xEUR)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)		- (w45 * MILx * MILxISR)		,
			"Base.EAA_Witness_Long_45",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xEUR)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.G21",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xEUR)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)				,
			"Base.XD4",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)		- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)	- (w45 * MILx * x90)	,
			"Base.MP45",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)	- (w45 * MILx * x90)	,
			"Base.P220",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xEUR)			- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)		- (w45 * MILx * MILxPAC)				,
			"Base.M4506",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.HK_MK23",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xEUR)			- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)		- (w45 * MILx * MILxPAC)				,
			"Base.HK_USP",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xEUR)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.HK_USP_Match",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xEUR)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.PULP_1911",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.PARA1911",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.AMT1911",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.AMT1911_Long",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.M1911_Carbine",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.Colt1911",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)			- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)		- (w45 * MILx * MILxPAC)		- (w45 * MILx * MILxISR)		,
			"Base.Colt_Kimber",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)	- (w45 * MILx * x90)	,
			"Base.Colt_Commander",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSEMI)	- (w45 * MILx * xUSA)			- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)		- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.UMP45_Stock",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xEUR)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)		- (w45 * MILx * MILxISR)	- (w45 * MILx * x90)	,
			"Base.MAC10_Fold",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xUSA)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)				,
			"Base.KRISS_Stock",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)	- (w45 * MILx * x90)	,
			"Base.Commando",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xBOLT)	- (w45 * MILx * xEUR)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.Thompson",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xUSA)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)		- (w45 * MILx * MILxISR)		,
			"Base.Thompson_1928",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xUSA)		- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)		- (w45 * MILx * MILxISR)		,
			"Base.M2Hyde",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.Model55_Fold",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.Model50",	w45	 * MILx	 * VLR	- (w45 * x45)	- (w45 * MILx * xSMG)	- (w45 * MILx * xUSA)	- (w45 * MILx * MILxNON)	- (w45 * MILx * MILxUSA)	- (w45 * MILx * MILxSOV)	- (w45 * MILx * MILxCZE)	- (w45 * MILx * MILxKOR)	- (w45 * MILx * MILxPAC)	- (w45 * MILx * MILxEUR)	- (w45 * MILx * MILxISR)		,
			"Base.Colt_Navy_1851",	w44	 * MILx	 * VLR	- (w44 * x44)	- (w44 * MILx * xREV)	- (w44 * MILx * xUSA)	- (w44 * MILx * MILxNON)	- (w44 * MILx * MILxUSA)	- (w44 * MILx * MILxSOV)	- (w44 * MILx * MILxCZE)	- (w44 * MILx * MILxKOR)	- (w44 * MILx * MILxPAC)	- (w44 * MILx * MILxEUR)	- (w44 * MILx * MILxISR)		,
			"Base.M29_44",	w44	 * MILx	 * VLR	- (w44 * x44)	- (w44 * MILx * xREV)	- (w44 * MILx * xUSA)	- (w44 * MILx * MILxNON)	- (w44 * MILx * MILxUSA)	- (w44 * MILx * MILxSOV)	- (w44 * MILx * MILxCZE)	- (w44 * MILx * MILxKOR)	- (w44 * MILx * MILxPAC)	- (w44 * MILx * MILxEUR)	- (w44 * MILx * MILxISR)		,
			"Base.M29_44Carbine",	w44	 * MILx	 * VLR	- (w44 * x44)	- (w44 * MILx * xREV)	- (w44 * MILx * xUSA)	- (w44 * MILx * MILxNON)	- (w44 * MILx * MILxUSA)	- (w44 * MILx * MILxSOV)	- (w44 * MILx * MILxCZE)	- (w44 * MILx * MILxKOR)	- (w44 * MILx * MILxPAC)	- (w44 * MILx * MILxEUR)	- (w44 * MILx * MILxISR)		,
			"Base.Automag",	w44	 * MILx	 * VLR	- (w44 * x44)	- (w44 * MILx * xSEMI)	- (w44 * MILx * xUSA)	- (w44 * MILx * MILxNON)	- (w44 * MILx * MILxUSA)	- (w44 * MILx * MILxSOV)	- (w44 * MILx * MILxCZE)	- (w44 * MILx * MILxKOR)	- (w44 * MILx * MILxPAC)	- (w44 * MILx * MILxEUR)	- (w44 * MILx * MILxISR)		,
			"Base.DEagle",	w44	 * MILx	 * VLR	- (w44 * x44)	- (w44 * MILx * xSEMI)	- (w44 * MILx * xISR)		- (w44 * MILx * MILxUSA)	- (w44 * MILx * MILxSOV)	- (w44 * MILx * MILxCZE)	- (w44 * MILx * MILxKOR)	- (w44 * MILx * MILxPAC)	- (w44 * MILx * MILxEUR)			,
			"Base.DEagle_Long",	w44	 * MILx	 * VLR	- (w44 * x44)	- (w44 * MILx * xSEMI)	- (w44 * MILx * xISR)		- (w44 * MILx * MILxUSA)	- (w44 * MILx * MILxSOV)	- (w44 * MILx * MILxCZE)	- (w44 * MILx * MILxKOR)	- (w44 * MILx * MILxPAC)	- (w44 * MILx * MILxEUR)			,
			"Base.DEagle_Hawk",	wBMG	 * MILx	 * VLR	- (wBMG * xBMG)	- (wBMG * MILx * xSEMI)	- (wBMG * MILx * xISR)		- (wBMG * MILx * MILxUSA)	- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)			,
			"Base.Winchester1866",	w45LC	 * MILx	 * VLR	- (w44 * x44)	- (w45LC * MILx * xLEVER)	- (w45LC * MILx * xUSA)	- (w45LC * MILx * MILxNON)	- (w45LC * MILx * MILxUSA)	- (w45LC * MILx * MILxSOV)	- (w45LC * MILx * MILxCZE)	- (w45LC * MILx * MILxKOR)	- (w45LC * MILx * MILxPAC)	- (w45LC * MILx * MILxEUR)	- (w45LC * MILx * MILxISR)		,
			"Base.Win_1894",	w44	 * MILx	 * VLR	- (w44 * x44)	- (w44 * MILx * xLEVER)	- (w44 * MILx * xUSA)	- (w44 * MILx * MILxNON)	- (w44 * MILx * MILxUSA)	- (w44 * MILx * MILxSOV)	- (w44 * MILx * MILxCZE)	- (w44 * MILx * MILxKOR)	- (w44 * MILx * MILxPAC)	- (w44 * MILx * MILxEUR)	- (w44 * MILx * MILxISR)		,
			"Base.Colt_Service45",	w45LC	 * MILx	 * VLR	- (w45LC * x45LC)	- (w45LC * MILx * xREV)	- (w45LC * MILx * xUSA)	- (w45LC * MILx * MILxNON)	- (w45LC * MILx * MILxUSA)	- (w45LC * MILx * MILxSOV)	- (w45LC * MILx * MILxCZE)	- (w45LC * MILx * MILxKOR)	- (w45LC * MILx * MILxPAC)	- (w45LC * MILx * MILxEUR)	- (w45LC * MILx * MILxISR)		,
			"Base.Judge_45LC",	w45LC	 * MILx	 * VLR	- (w45LC * x45LC)	- (w45LC * MILx * xREV)	- (w45LC * MILx * xREST)	- (w45LC * MILx * MILxNON)	- (w45LC * MILx * MILxUSA)	- (w45LC * MILx * MILxSOV)	- (w45LC * MILx * MILxCZE)	- (w45LC * MILx * MILxKOR)	- (w45LC * MILx * MILxPAC)	- (w45LC * MILx * MILxEUR)	- (w45LC * MILx * MILxISR)	- (w45LC * MILx * x90)	,
			"Base.Judge513_45LC",	w45LC	 * MILx	 * VLR	- (w45LC * x45LC)	- (w45LC * MILx * xREV)	- (w45LC * MILx * xREST)	- (w45LC * MILx * MILxNON)	- (w45LC * MILx * MILxUSA)	- (w45LC * MILx * MILxSOV)	- (w45LC * MILx * MILxCZE)	- (w45LC * MILx * MILxKOR)	- (w45LC * MILx * MILxPAC)	- (w45LC * MILx * MILxEUR)	- (w45LC * MILx * MILxISR)	- (w45LC * MILx * x90)	,
			"Base.Judge513_Long_45LC",	w45LC	 * MILx	 * VLR	- (w45LC * x45LC)	- (w45LC * MILx * xREV)	- (w45LC * MILx * xREST)	- (w45LC * MILx * MILxNON)	- (w45LC * MILx * MILxUSA)	- (w45LC * MILx * MILxSOV)	- (w45LC * MILx * MILxCZE)	- (w45LC * MILx * MILxKOR)	- (w45LC * MILx * MILxPAC)	- (w45LC * MILx * MILxEUR)	- (w45LC * MILx * MILxISR)	- (w45LC * MILx * x90)	,
			"Base.TXS_804_45LC",	w45LC	 * MILx	 * VLR	- (w45LC * x45LC)	- (w45LC * MILx * xREV)	- (w45LC * MILx * xREST)	- (w45LC * MILx * MILxNON)	- (w45LC * MILx * MILxUSA)	- (w45LC * MILx * MILxSOV)	- (w45LC * MILx * MILxCZE)	- (w45LC * MILx * MILxKOR)	- (w45LC * MILx * MILxPAC)	- (w45LC * MILx * MILxEUR)	- (w45LC * MILx * MILxISR)		,
			"Base.Winchester1873",	w45LC	 * MILx	 * VLR	- (w45LC * x45LC)	- (w45LC * MILx * xLEVER)	- (w45LC * MILx * xUSA)	- (w45LC * MILx * MILxNON)	- (w45LC * MILx * MILxUSA)	- (w45LC * MILx * MILxSOV)	- (w45LC * MILx * MILxCZE)	- (w45LC * MILx * MILxKOR)	- (w45LC * MILx * MILxPAC)	- (w45LC * MILx * MILxEUR)	- (w45LC * MILx * MILxISR)		,
			"Base.Sako85",	w223	 * MILx	 * VLR	- (w223 * x223)	- (w223 * MILx * xBOLT)	- (w223 * MILx * xEUR)		- (w223 * MILx * MILxUSA)	- (w223 * MILx * MILxSOV)		- (w223 * MILx * MILxKOR)	- (w223 * MILx * MILxPAC)	- (w223 * MILx * MILxEUR)	- (w223 * MILx * MILxISR)		,
			"Base.MINI14",	w223	 * MILx	 * VLR	- (w223 * x223)	- (w223 * MILx * xSEMI)	- (w223 * MILx * xUSA)	- (w223 * MILx * MILxNON)	- (w223 * MILx * MILxUSA)	- (w223 * MILx * MILxSOV)	- (w223 * MILx * MILxCZE)	- (w223 * MILx * MILxKOR)	- (w223 * MILx * MILxPAC)	- (w223 * MILx * MILxEUR)	- (w223 * MILx * MILxISR)		,
			"Base.MINI14_Stock",	w223	 * MILx	 * VLR	- (w223 * x223)	- (w223 * MILx * xSEMI)	- (w223 * MILx * xUSA)	- (w223 * MILx * MILxNON)	- (w223 * MILx * MILxUSA)	- (w223 * MILx * MILxSOV)	- (w223 * MILx * MILxCZE)	- (w223 * MILx * MILxKOR)	- (w223 * MILx * MILxPAC)	- (w223 * MILx * MILxEUR)	- (w223 * MILx * MILxISR)		,
			"Base.MINI14_T",	w223	 * MILx	 * VLR	- (w223 * x223)	- (w223 * MILx * xSEMI)	- (w223 * MILx * xUSA)	- (w223 * MILx * MILxNON)	- (w223 * MILx * MILxUSA)	- (w223 * MILx * MILxSOV)	- (w223 * MILx * MILxCZE)	- (w223 * MILx * MILxKOR)	- (w223 * MILx * MILxPAC)	- (w223 * MILx * MILxEUR)	- (w223 * MILx * MILxISR)		,
			"Base.Viper",	w223	 * MILx	 * VLR	- (w223 * x223)	- (w223 * MILx * xLEVER)	- (w223 * MILx * xREST)	- (w223 * MILx * MILxNON)	- (w223 * MILx * MILxUSA)	- (w223 * MILx * MILxSOV)	- (w223 * MILx * MILxCZE)	- (w223 * MILx * MILxKOR)	- (w223 * MILx * MILxPAC)	- (w223 * MILx * MILxEUR)	- (w223 * MILx * MILxISR)	- (w223 * MILx * x90)	,
			"Base.Carbon15_97",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.CAR15SMG",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)			,
			"Base.CAR15_Survival",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)			,
			"Base.XM8Compact_Pistol",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.XM8",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.SCARSC_Stock",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.SCARL",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.SCAR_B",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.G33",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.G36",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.G36C",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.G36KV",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.G11K3",	w57	 * MILx	 * VLR	- (w57 * x57)	- (w57 * MILx * xAUTO)	- (w57 * MILx * xEUR)		- (w57 * MILx * MILxUSA)	- (w57 * MILx * MILxSOV)	- (w57 * MILx * MILxCZE)	- (w57 * MILx * MILxKOR)	- (w57 * MILx * MILxPAC)	- (w57 * MILx * MILxEUR)	- (w57 * MILx * MILxISR)	- (w57 * MILx * x90)	,
			"Base.MK18",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.AK5C",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.M16A1",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)				,
			"Base.M16A2",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)				,
			"Base.M16A3",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.M723",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.XM117",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.H416",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)			- (w556 * MILx * MILxSOV)			- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.M4",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.M4A1",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)			,
			"Base.ADAR",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xSOV)		- (w556 * MILx * MILxUSA)		- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)		- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.K2C1_PH",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.K2_ADVK2",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.K2_Grunt",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.K1A_DEV",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.K1DEV",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.K2_C1",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.K2_1",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.K2_203",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.K1_1",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.DR_200",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.LVOA_C",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xSEMI)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.AAC_Honey",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.AAC_HoneySD",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.Bush_AR15_MOE",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xSEMI)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.Bush_XM15",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xSEMI)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.Bush_XM15_Custom",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xSEMI)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.MCX_Virtus",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.MCX_VirtusPatrol",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.MCX_Socom",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.MCX_Spear",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xSEMI)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.ColtM16",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.M16Wood",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.M16Tape",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.FAMAS",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.FAMAS_G2",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.FAMAS_Felin",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.AUG",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.AUG_A3",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.M85_Stock",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xSOV)		- (w556 * MILx * MILxUSA)		- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)		- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.AN94",	w545x39	 * MILx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)		,
			"Base.AK74",	w545x39	 * MILx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)		,
			"Base.AKS74",	w545x39	 * MILx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)		,
			"Base.AKS74U",	w545x39	 * MILx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)		,
			"Base.AK74_Alpha",	w545x39	 * MILx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)	- (w545x39 * MILx * x90)	,
			"Base.AK12",	w545x39	 * MILx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)	- (w545x39 * MILx * x90)	,
			"Base.AK12_New",	w545x39	 * MILx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)	- (w545x39 * MILx * x90)	,
			"Base.RPK74",	w545x39	 * MILx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * MILx * xLMG)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)		,
			"Base.RPK16",	w545x39	 * MILx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * MILx * xLMG)	- (w545x39 * MILx * xSOV)		- (w545x39 * MILx * MILxUSA)		- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)		- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)	- (w545x39 * MILx * x90)	,
			"Base.L85",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.L85A2",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.L86",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.L22",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.F2000",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.Tavor",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xISR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)		- (w556 * MILx * x90)	,
			"Base.AR18",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xUSA)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.Type20",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xPAC)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)		- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.Type89",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xPAC)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)		- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.QBZ_95",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xPAC)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)		- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.Shrike",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xLMG)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)			- (w556 * MILx * x90)	,
			"Base.XM8LMG",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xLMG)	- (w556 * MILx * xEUR)	- (w556 * MILx * MILxNON)	- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)	- (w556 * MILx * x90)	,
			"Base.M249",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xLMG)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)			,
			"Base.M249E3",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xLMG)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)		- (w556 * MILx * x90)	,
			"Base.K3LMG",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xLMG)	- (w556 * MILx * xKOR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)		- (w556 * MILx * MILxPAC)	- (w556 * MILx * MILxEUR)	- (w556 * MILx * MILxISR)		,
			"Base.AK47",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)			,
			"Base.AKM",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)			,
			"Base.AK103",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)	- (w762x39 * MILx * x90)	,
			"Base.MD65_Stock",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.AKMS_Stock",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Vz58",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xCZE)		- (w762x39 * MILx * MILxUSA)	- (w762x39 * MILx * MILxSOV)		- (w762x39 * MILx * MILxKOR)	- (w762x39 * MILx * MILxPAC)	- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Vz58_Stock",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xCZE)		- (w762x39 * MILx * MILxUSA)	- (w762x39 * MILx * MILxSOV)		- (w762x39 * MILx * MILxKOR)	- (w762x39 * MILx * MILxPAC)	- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Vz58_Mini_Stock",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xCZE)		- (w762x39 * MILx * MILxUSA)	- (w762x39 * MILx * MILxSOV)		- (w762x39 * MILx * MILxKOR)	- (w762x39 * MILx * MILxPAC)	- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.SKS",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xSEMI)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.SKS_PARA",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xSEMI)	- (w762x39 * MILx * xPAC)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.SKS30_A26",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xSEMI)	- (w762x39 * MILx * xUSA)	- (w762x39 * MILx * MILxNON)	- (w762x39 * MILx * MILxUSA)	- (w762x39 * MILx * MILxSOV)	- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)	- (w762x39 * MILx * MILxPAC)	- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.MK47",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xSEMI)	- (w762x39 * MILx * xUSA)	- (w762x39 * MILx * MILxNON)	- (w762x39 * MILx * MILxUSA)	- (w762x39 * MILx * MILxSOV)	- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)	- (w762x39 * MILx * MILxPAC)	- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)	- (w762x39 * MILx * x90)	,
			"Base.AKM_Custom",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xUSA)	- (w762x39 * MILx * MILxNON)	- (w762x39 * MILx * MILxUSA)	- (w762x39 * MILx * MILxSOV)	- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)	- (w762x39 * MILx * MILxPAC)	- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)	- (w762x39 * MILx * x90)	,
			"Base.AK74_Custom",	w545x39	 * MILx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * MILx * xAUTO)	- (w545x39 * MILx * xUSA)	- (w545x39 * MILx * MILxNON)	- (w545x39 * MILx * MILxUSA)	- (w545x39 * MILx * MILxSOV)	- (w545x39 * MILx * MILxCZE)	- (w545x39 * MILx * MILxKOR)	- (w545x39 * MILx * MILxPAC)	- (w545x39 * MILx * MILxEUR)	- (w545x39 * MILx * MILxISR)	- (w545x39 * MILx * x90)	,
			"Base.Ots14_1A_01",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Ots14_1A_02",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Ots14_4A",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Ots14_4A_01",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Ots14_4A_03",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xAUTO)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.Ots14_4A_GL",	wGREN	 * MILx	 * VLR	- (wGREN * xGREN)	- (wGREN * MILx * xAUTO)	- (wGREN * MILx * xSOV)		- (wGREN * MILx * MILxUSA)		- (wGREN * MILx * MILxCZE)	- (wGREN * MILx * MILxKOR)		- (wGREN * MILx * MILxEUR)	- (wGREN * MILx * MILxISR)		,
			"Base.AK308",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xSOV)		- (w308 * MILx * MILxUSA)		- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.SCARH",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.SCAR20",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.G28",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.G3",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)		,
			"Base.PSG1",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xSEMI)	- (w308 * MILx * xEUR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)		,
			"Base.MSG90",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xSEMI)	- (w308 * MILx * xEUR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)		,
			"Base.Type64",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xPAC)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)		- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.FAL",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)		,
			"Base.FAL_PARA_Stock",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)		,
			"Base.FN_FNC",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xAUTO)	- (w556 * MILx * xEUR)		- (w556 * MILx * MILxUSA)	- (w556 * MILx * MILxSOV)	- (w556 * MILx * MILxCZE)	- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)		- (w556 * MILx * MILxISR)		,
			"Base.WA2000",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xEUR)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.SVD",	w762x54r	 * MILx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * MILx * xSEMI)	- (w762x54r * MILx * xSOV)		- (w762x54r * MILx * MILxUSA)			- (w762x54r * MILx * MILxKOR)		- (w762x54r * MILx * MILxEUR)	- (w762x54r * MILx * MILxISR)		,
			"Base.SVDK",	w762x54r	 * MILx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * MILx * xSEMI)	- (w762x54r * MILx * xSOV)		- (w762x54r * MILx * MILxUSA)			- (w762x54r * MILx * MILxKOR)		- (w762x54r * MILx * MILxEUR)	- (w762x54r * MILx * MILxISR)		,
			"Base.SV_98",	w762x54r	 * MILx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * MILx * xBOLT)	- (w762x54r * MILx * xSOV)		- (w762x54r * MILx * MILxUSA)			- (w762x54r * MILx * MILxKOR)		- (w762x54r * MILx * MILxEUR)	- (w762x54r * MILx * MILxISR)		,
			"Base.OTS_03_SVU",	w762x54r	 * MILx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * MILx * xBOLT)	- (w762x54r * MILx * xSOV)		- (w762x54r * MILx * MILxUSA)			- (w762x54r * MILx * MILxKOR)		- (w762x54r * MILx * MILxEUR)	- (w762x54r * MILx * MILxISR)	- (w762x54r * MILx * x90)	,
			"Base.M14EBR",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xUSA)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)		- (w308 * MILx * x90)	,
			"Base.M14",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xUSA)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)			,
			"Base.K14",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xKOR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)		- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.Savage12",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xUSA)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.Ruger_No1_3006",	w3006	 * MILx	 * VLR	- (w3006 * x3006)	- (w3006 * MILx * xBREAK)	- (w3006 * MILx * xUSA)	- (w3006 * MILx * MILxNON)	- (w3006 * MILx * MILxUSA)	- (w3006 * MILx * MILxSOV)	- (w3006 * MILx * MILxCZE)	- (w3006 * MILx * MILxKOR)	- (w3006 * MILx * MILxPAC)	- (w3006 * MILx * MILxEUR)	- (w3006 * MILx * MILxISR)		,
			"Base.M40",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xUSA)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.M40A1",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xUSA)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.M40A2",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xUSA)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)			,
			"Base.M40A3",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xUSA)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)			,
			"Base.M46_Mauser",	w762x54r	 * MILx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * MILx * xBOLT)	- (w762x54r * MILx * xPAC)	- (w762x54r * MILx * MILxNON)	- (w762x54r * MILx * MILxUSA)	- (w762x54r * MILx * MILxSOV)	- (w762x54r * MILx * MILxCZE)	- (w762x54r * MILx * MILxKOR)	- (w762x54r * MILx * MILxPAC)	- (w762x54r * MILx * MILxEUR)	- (w762x54r * MILx * MILxISR)		,
			"Base.Mosin",	w762x54r	 * MILx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * MILx * xBOLT)	- (w762x54r * MILx * xSOV)	- (w762x54r * MILx * MILxNON)	- (w762x54r * MILx * MILxUSA)	- (w762x54r * MILx * MILxSOV)	- (w762x54r * MILx * MILxCZE)	- (w762x54r * MILx * MILxKOR)	- (w762x54r * MILx * MILxPAC)	- (w762x54r * MILx * MILxEUR)	- (w762x54r * MILx * MILxISR)		,
			"Base.MosinObrez_Pistol",	w762x54r	 * MILx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * MILx * xBOLT)	- (w762x54r * MILx * xSOV)	- (w762x54r * MILx * MILxNON)	- (w762x54r * MILx * MILxUSA)	- (w762x54r * MILx * MILxSOV)	- (w762x54r * MILx * MILxCZE)	- (w762x54r * MILx * MILxKOR)	- (w762x54r * MILx * MILxPAC)	- (w762x54r * MILx * MILxEUR)	- (w762x54r * MILx * MILxISR)		,
			"Base.M1",	w3006	 * MILx	 * VLR	- (w3006 * x3006)	- (w3006 * MILx * xSEMI)	- (w3006 * MILx * xUSA)	- (w3006 * MILx * MILxNON)	- (w3006 * MILx * MILxUSA)	- (w3006 * MILx * MILxSOV)	- (w3006 * MILx * MILxCZE)	- (w3006 * MILx * MILxKOR)	- (w3006 * MILx * MILxPAC)	- (w3006 * MILx * MILxEUR)	- (w3006 * MILx * MILxISR)		,
			"Base.M1903",	w3006	 * MILx	 * VLR	- (w3006 * x3006)	- (w3006 * MILx * xBOLT)	- (w3006 * MILx * xUSA)	- (w3006 * MILx * MILxNON)	- (w3006 * MILx * MILxUSA)	- (w3006 * MILx * MILxSOV)	- (w3006 * MILx * MILxCZE)	- (w3006 * MILx * MILxKOR)	- (w3006 * MILx * MILxPAC)	- (w3006 * MILx * MILxEUR)	- (w3006 * MILx * MILxISR)		,
			"Base.BAR",	w3006	 * MILx	 * VLR	- (w3006 * x3006)	- (w3006 * MILx * xAUTO)	- (w3006 * MILx * xUSA)	- (w3006 * MILx * MILxNON)	- (w3006 * MILx * MILxUSA)	- (w3006 * MILx * MILxSOV)	- (w3006 * MILx * MILxCZE)	- (w3006 * MILx * MILxKOR)	- (w3006 * MILx * MILxPAC)	- (w3006 * MILx * MILxEUR)	- (w3006 * MILx * MILxISR)		,
			"Base.BAR_Monitor",	w3006	 * MILx	 * VLR	- (w3006 * x3006)	- (w3006 * MILx * xAUTO)	- (w3006 * MILx * xUSA)	- (w3006 * MILx * MILxNON)	- (w3006 * MILx * MILxUSA)	- (w3006 * MILx * MILxSOV)	- (w3006 * MILx * MILxCZE)	- (w3006 * MILx * MILxKOR)	- (w3006 * MILx * MILxPAC)	- (w3006 * MILx * MILxEUR)	- (w3006 * MILx * MILxISR)		,
			"Base.MAS36",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.MAS44",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.MAS49",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xEUR)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.Win_1895",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xLEVER)	- (w308 * MILx * xUSA)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.Galil",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xISR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)			,
			"Base.Galil_Sniper",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xAUTO)	- (w308 * MILx * xISR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)			,
			"Base.Thompson_Center_3006",	w3006	 * MILx	 * VLR	- (w3006 * x3006)	- (w3006 * MILx * xBREAK)	- (w3006 * MILx * xUSA)	- (w3006 * MILx * MILxNON)	- (w3006 * MILx * MILxUSA)	- (w3006 * MILx * MILxSOV)	- (w3006 * MILx * MILxCZE)	- (w3006 * MILx * MILxKOR)	- (w3006 * MILx * MILxPAC)	- (w3006 * MILx * MILxEUR)	- (w3006 * MILx * MILxISR)		,
			"Base.Type38",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xPAC)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)			- (w308 * MILx * MILxISR)		,
			"Base.Type99",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xPAC)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)		- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.L96",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xBOLT)	- (w308 * MILx * xEUR)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)		,
			"Base.M240",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xLMG)	- (w308 * MILx * xUSA)				- (w308 * MILx * MILxCZE)			- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.G21LMG",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xLMG)	- (w308 * MILx * xEUR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)		- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.K12",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xLMG)	- (w308 * MILx * xKOR)		- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)		- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.PKM",	w762x54r	 * MILx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * MILx * xLMG)	- (w762x54r * MILx * xSOV)		- (w762x54r * MILx * MILxUSA)			- (w762x54r * MILx * MILxKOR)		- (w762x54r * MILx * MILxEUR)			,
			"Base.MG42",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xLMG)	- (w308 * MILx * xEUR)	- (w308 * MILx * MILxNON)	- (w308 * MILx * MILxUSA)	- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.M60",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xLMG)	- (w308 * MILx * xUSA)			- (w308 * MILx * MILxSOV)			- (w308 * MILx * MILxPAC)				,
			"Base.MK43",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xLMG)	- (w308 * MILx * xUSA)			- (w308 * MILx * MILxSOV)		- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)	- (w308 * MILx * x90)	,
			"Base.RPD",	w762x39	 * MILx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * MILx * xLMG)	- (w762x39 * MILx * xSOV)		- (w762x39 * MILx * MILxUSA)		- (w762x39 * MILx * MILxCZE)	- (w762x39 * MILx * MILxKOR)		- (w762x39 * MILx * MILxEUR)	- (w762x39 * MILx * MILxISR)		,
			"Base.DSHK_Fold",	wBMG	 * MILx	 * VLR	- (wBMG * xBMG)	- (wBMG * MILx * xMINI)	- (wBMG * MILx * xSOV)		- (wBMG * MILx * MILxUSA)			- (wBMG * MILx * MILxKOR)		- (wBMG * MILx * MILxEUR)			,
			"Base.BOAR",	wBMG	 * MILx	 * VLR	- (wBMG * xBMG)	- (wBMG * MILx * xBREAK)	- (wBMG * MILx * xUSA)	- (wBMG * MILx * MILxNON)	- (wBMG * MILx * MILxUSA)	- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)		,
			"Base.EDM96",	wBMG	 * MILx	 * VLR	- (wBMG * xBMG)	- (wBMG * MILx * xBOLT)	- (wBMG * MILx * xUSA)	- (wBMG * MILx * MILxNON)	- (wBMG * MILx * MILxUSA)	- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)	- (wBMG * MILx * x90)	,
			"Base.M82",	wBMG	 * MILx	 * VLR	- (wBMG * xBMG)	- (wBMG * MILx * xSEMI)	- (wBMG * MILx * xUSA)			- (wBMG * MILx * MILxSOV)		- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)				,
			"Base.BFG50",	wBMG	 * MILx	 * VLR	- (wBMG * xBMG)	- (wBMG * MILx * xBREAK)	- (wBMG * MILx * xUSA)	- (wBMG * MILx * MILxNON)	- (wBMG * MILx * MILxUSA)	- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)	- (wBMG * MILx * x90)	,
			"Base.Harris50",	wBMG	 * MILx	 * VLR	- (wBMG * xBMG)	- (wBMG * MILx * xBOLT)	- (wBMG * MILx * xUSA)			- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)		,
			"Base.TAC50",	wBMG	 * MILx	 * VLR	- (wBMG * xBMG)	- (wBMG * MILx * xBOLT)	- (wBMG * MILx * xUSA)			- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)			,
			"Base.CheyTac50",	wBMG	 * MILx	 * VLR	- (wBMG * xBMG)	- (wBMG * MILx * xBOLT)	- (wBMG * MILx * xUSA)			- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)	- (wBMG * MILx * x90)	,
			"Base.Gepard_M6",	wBMG	 * MILx	 * VLR	- (wBMG * xBMG)	- (wBMG * MILx * xBOLT)	- (wBMG * MILx * xEUR)			- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)		- (wBMG * MILx * MILxISR)		,
			"Base.OSV_96",	wBMG	 * MILx	 * VLR	- (wBMG * xBMG)	- (wBMG * MILx * xBOLT)	- (wBMG * MILx * xSOV)		- (wBMG * MILx * MILxUSA)		- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)	- (wBMG * MILx * x90)	,
			"Base.Ash",	wBMG	 * MILx	 * VLR	- (wBMG * xBMG)	- (wBMG * MILx * xAUTO)	- (wBMG * MILx * xSOV)		- (wBMG * MILx * MILxUSA)		- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)	- (wBMG * MILx * x90)	,
			"Base.VSSK",	wBMG	 * MILx	 * VLR	- (wBMG * xBMG)	- (wBMG * MILx * xBOLT)	- (wBMG * MILx * xSOV)		- (wBMG * MILx * MILxUSA)		- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)	- (wBMG * MILx * x90)	,
			"Base.SW_M500",	wBMG	 * MILx	 * VLR	- (wBMG * xBMG)	- (wBMG * MILx * xREV)	- (wBMG * MILx * xUSA)	- (wBMG * MILx * MILxNON)	- (wBMG * MILx * MILxUSA)	- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)	- (wBMG * MILx * MILxEUR)	- (wBMG * MILx * MILxISR)	- (wBMG * MILx * x90)	,
			"Base.SPAS12_Fixed",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xEUR)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.SPAS12_Fold",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xEUR)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.Origin",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.SPAS_15",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xEUR)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)		- (w12g * MILx * MILxISR)		,
			"Base.USAS_12",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xAUTO)	- (w12g * MILx * xKOR)		- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)		- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.Shorty_Pistol",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.R11_87",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.M870",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)		- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)		- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)			,
			"Base.M1897",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.DT11",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xBREAK)	- (w12g * MILx * xEUR)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.Coachgun",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xBREAK)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.Terminator",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xBREAK)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.SIX12",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xREV)	- (w12g * MILx * xUSA)			- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.SIX12SD",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xREV)	- (w12g * MILx * xUSA)			- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.M870_Wingmaster",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.M870_Police",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)		- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)			- (w12g * MILx * MILxPAC)				,
			"Base.M870_MCS",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)		- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)			- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)			,
			"Base.M870_CQB",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)		- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)			- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)			,
			"Base.M870_Breaching_Pistol",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)		- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)			- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)			,
			"Base.M870_Express",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.Ithaca_M37",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.AUTO_5",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.A400",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xEUR)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.M1014",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xEUR)			- (w12g * MILx * MILxSOV)			- (w12g * MILx * MILxPAC)		- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.M1014_Fold",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xEUR)			- (w12g * MILx * MILxSOV)			- (w12g * MILx * MILxPAC)		- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.M1014_Wick",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xSEMI)	- (w12g * MILx * xEUR)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.DAO12",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xREV)	- (w12g * MILx * xREST)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)			,
			"Base.M1887",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xLEVER)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.M1208",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xREV)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.M1212",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xREV)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.M1216",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xREV)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.AA12",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xAUTO)	- (w12g * MILx * xUSA)			- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.CAWS",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xAUTO)	- (w12g * MILx * xEUR)		- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)				,
			"Base.ROYAL_SXS",	w10g	 * MILx	 * VLR	- (w10g * x10g)	- (w10g * MILx * xBREAK)	- (w10g * MILx * xEUR)	- (w10g * MILx * MILxNON)	- (w10g * MILx * MILxUSA)	- (w10g * MILx * MILxSOV)	- (w10g * MILx * MILxCZE)	- (w10g * MILx * MILxKOR)	- (w10g * MILx * MILxPAC)	- (w10g * MILx * MILxEUR)	- (w10g * MILx * MILxISR)		,
			"Base.KS23",	w4g	 * MILx	 * VLR	- (w4g * x4g)	- (w4g * MILx * xPUMP)	- (w4g * MILx * xSOV)	- (w4g * MILx * MILxNON)	- (w4g * MILx * MILxUSA)	- (w4g * MILx * MILxSOV)	- (w4g * MILx * MILxCZE)	- (w4g * MILx * MILxKOR)	- (w4g * MILx * MILxPAC)	- (w4g * MILx * MILxEUR)	- (w4g * MILx * MILxISR)		,
			"Base.KS23_S_Pistol",	w4g	 * MILx	 * VLR	- (w4g * x4g)	- (w4g * MILx * xPUMP)	- (w4g * MILx * xSOV)	- (w4g * MILx * MILxNON)	- (w4g * MILx * MILxUSA)	- (w4g * MILx * MILxSOV)	- (w4g * MILx * MILxCZE)	- (w4g * MILx * MILxKOR)	- (w4g * MILx * MILxPAC)	- (w4g * MILx * MILxEUR)	- (w4g * MILx * MILxISR)		,
			"Base.Triple_Crown",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xBREAK)	- (w12g * MILx * xEUR)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.Moss500_20",	w20g	 * MILx	 * VLR	- (w20g * x20g)	- (w20g * MILx * xPUMP)	- (w20g * MILx * xUSA)	- (w20g * MILx * MILxNON)	- (w20g * MILx * MILxUSA)	- (w20g * MILx * MILxSOV)	- (w20g * MILx * MILxCZE)	- (w20g * MILx * MILxKOR)	- (w20g * MILx * MILxPAC)	- (w20g * MILx * MILxEUR)	- (w20g * MILx * MILxISR)		,
			"Base.10855_Silver",	w20g	 * MILx	 * VLR	- (w20g * x20g)	- (w20g * MILx * xSEMI)	- (w20g * MILx * xEUR)	- (w20g * MILx * MILxNON)	- (w20g * MILx * MILxUSA)	- (w20g * MILx * MILxSOV)	- (w20g * MILx * MILxCZE)	- (w20g * MILx * MILxKOR)	- (w20g * MILx * MILxPAC)	- (w20g * MILx * MILxEUR)	- (w20g * MILx * MILxISR)		,
			"Base.Colt1855",	w20g	 * MILx	 * VLR	- (w20g * x20g)	- (w20g * MILx * xREV)	- (w20g * MILx * xUSA)	- (w20g * MILx * MILxNON)	- (w20g * MILx * MILxUSA)	- (w20g * MILx * MILxSOV)	- (w20g * MILx * MILxCZE)	- (w20g * MILx * MILxKOR)	- (w20g * MILx * MILxPAC)	- (w20g * MILx * MILxEUR)	- (w20g * MILx * MILxISR)		,
			"Base.TOZ106",	w20g	 * MILx	 * VLR	- (w20g * x20g)	- (w20g * MILx * xBOLT)	- (w20g * MILx * xSOV)		- (w20g * MILx * MILxUSA)		- (w20g * MILx * MILxCZE)	- (w20g * MILx * MILxKOR)		- (w20g * MILx * MILxEUR)	- (w20g * MILx * MILxISR)		,
			"Base.TOZ194_Pistol",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xSOV)		- (w12g * MILx * MILxUSA)		- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)		- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)		,
			"Base.Saiga12",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xAUTO)	- (w12g * MILx * xSOV)		- (w12g * MILx * MILxUSA)		- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)		- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.Saiga12_Long",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xAUTO)	- (w12g * MILx * xSOV)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.Saiga12_Tromix",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xAUTO)	- (w12g * MILx * xSOV)		- (w12g * MILx * MILxUSA)		- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)		- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.MP133",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xSOV)		- (w12g * MILx * MILxUSA)		- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)		- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.MP133S_Pistol",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xSOV)		- (w12g * MILx * MILxUSA)		- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)		- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.KSG",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.KSG25",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xUSA)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.UTS15",	w12g	 * MILx	 * VLR	- (w12g * x12g)	- (w12g * MILx * xPUMP)	- (w12g * MILx * xREST)	- (w12g * MILx * MILxNON)	- (w12g * MILx * MILxUSA)	- (w12g * MILx * MILxSOV)	- (w12g * MILx * MILxCZE)	- (w12g * MILx * MILxKOR)	- (w12g * MILx * MILxPAC)	- (w12g * MILx * MILxEUR)	- (w12g * MILx * MILxISR)	- (w12g * MILx * x90)	,
			"Base.EX41_HE",	wGREN	 * MILx	 * VLR		- (wGREN * MILx * xGREN)	- (wGREN * MILx * xUSA)			- (wGREN * MILx * MILxSOV)	- (wGREN * MILx * MILxCZE)	- (wGREN * MILx * MILxKOR)	- (wGREN * MILx * MILxPAC)	- (wGREN * MILx * MILxEUR)			,
			"Base.Federal_HE",	wGREN	 * MILx	 * VLR		- (wGREN * MILx * xGREN)	- (wGREN * MILx * xUSA)				- (wGREN * MILx * MILxCZE)						,
			"Base.M32_HE",	wGREN	 * MILx	 * VLR		- (wGREN * MILx * xGREN)	- (wGREN * MILx * xUSA)			- (wGREN * MILx * MILxSOV)	- (wGREN * MILx * MILxCZE)		- (wGREN * MILx * MILxPAC)				,
			"Base.GM94_HE",	wGREN	 * MILx	 * VLR		- (wGREN * MILx * xGREN)	- (wGREN * MILx * xSOV)		- (wGREN * MILx * MILxUSA)		- (wGREN * MILx * MILxCZE)	- (wGREN * MILx * MILxKOR)		- (wGREN * MILx * MILxEUR)	- (wGREN * MILx * MILxISR)	- (wGREN * MILx * x90)	,
			"Base.K11",	wGREN	 * MILx	 * VLR	- (wGREN * MILx * xAUTO)	- (wGREN * MILx * xGREN)	- (wGREN * MILx * xKOR)		- (wGREN * MILx * MILxUSA)	- (wGREN * MILx * MILxSOV)	- (wGREN * MILx * MILxCZE)		- (wGREN * MILx * MILxPAC)	- (wGREN * MILx * MILxEUR)	- (wGREN * MILx * MILxISR)	- (wGREN * MILx * x90)	,
			"Base.M72_LAW",	wGREN	 * MILx	 * VLR		- (wGREN * MILx * xGREN)	- (wGREN * MILx * xUSA)			- (wGREN * MILx * MILxSOV)	- (wGREN * MILx * MILxCZE)		- (wGREN * MILx * MILxPAC)				,
			"Base.RPG_7",	wGREN	 * MILx	 * VLR		- (wGREN * MILx * xGREN)	- (wGREN * MILx * xSOV)		- (wGREN * MILx * MILxUSA)			- (wGREN * MILx * MILxKOR)		- (wGREN * MILx * MILxEUR)	- (wGREN * MILx * MILxISR)		,
			"Base.XM214",	w556	 * MILx	 * VLR	- (w556 * x556)	- (w556 * MILx * xMINI)	- (w556 * MILx * xUSA)			- (w556 * MILx * MILxSOV)		- (w556 * MILx * MILxKOR)	- (w556 * MILx * MILxPAC)				,
			"Base.GAU17",	w308	 * MILx	 * VLR	- (w308 * x308)	- (w308 * MILx * xMINI)	- (w308 * MILx * xUSA)			- (w308 * MILx * MILxSOV)	- (w308 * MILx * MILxCZE)	- (w308 * MILx * MILxKOR)	- (w308 * MILx * MILxPAC)	- (w308 * MILx * MILxEUR)	- (w308 * MILx * MILxISR)		,
			"Base.GAU19",	wBMG	 * MILx	 * VLR	- (wBMG * xBMG)	- (wBMG * MILx * xMINI)	- (wBMG * MILx * xUSA)			- (wBMG * MILx * MILxSOV)	- (wBMG * MILx * MILxCZE)	- (wBMG * MILx * MILxKOR)	- (wBMG * MILx * MILxPAC)		- (wBMG * MILx * MILxISR)		,
			"Base.TAC15",	wBOW	 * MILx	 * VLR		- (wBOW * MILx * xBOW)	- (wBOW * MILx * xUSA)	- (wBOW * MILx * MILxNON)	- (wBOW * MILx * MILxUSA)	- (wBOW * MILx * MILxSOV)	- (wBOW * MILx * MILxCZE)	- (wBOW * MILx * MILxKOR)	- (wBOW * MILx * MILxPAC)	- (wBOW * MILx * MILxEUR)	- (wBOW * MILx * MILxISR)		,
			"Base.M2A1",	wFLAME	 * MILx	 * VLR		- (wFLAME * MILx * xFLAME)	- (wFLAME * MILx * xUSA)										,
			"Base.Musk",	wFLAME	 * MILx	 * VLR		- (wFLAME * MILx * xFLAME)	- (wFLAME * MILx * xUSA)	- (wFLAME * MILx * MILxNON)	- (wFLAME * MILx * MILxUSA)	- (wFLAME * MILx * MILxSOV)	- (wFLAME * MILx * MILxCZE)	- (wFLAME * MILx * MILxKOR)	- (wFLAME * MILx * MILxPAC)	- (wFLAME * MILx * MILxEUR)	- (wFLAME * MILx * MILxISR)	- (wFLAME * MILx * x90)	,
																			
			"Base.RussianMachete",	LgKnife		 * VLR	- (LgKnife * xLgKnife)		- (LgKnife * xSOV)		- (LgKnife * MILxUSA)		- (LgKnife * MILxCZE)	- (LgKnife * MILxKOR)	- (LgKnife * MILxPAC)	- (LgKnife * MILxEUR)	- (LgKnife * MILxISR)		,
			"Base.BGMachete",	LgKnife		 * VLR	- (LgKnife * xLgKnife)		- (LgKnife * xUSA)		- (LgKnife * MILxUSA)	- (LgKnife * MILxSOV)	- (LgKnife * MILxCZE)	- (LgKnife * MILxKOR)	- (LgKnife * MILxPAC)	- (LgKnife * MILxEUR)			,
			"Base.RamboKnife",	LgKnife		 * VLR	- (LgKnife * xLgKnife)		- (LgKnife * xUSA)			- (LgKnife * MILxSOV)			- (LgKnife * MILxPAC)				,
			"Base.Butterfly",	SmKnife		 * VLR	- (SmKnife * xSmKnife)		- (SmKnife * xPAC)	- (SmKnife * MILxNON)	- (SmKnife * MILxUSA)	- (SmKnife * MILxSOV)	- (SmKnife * MILxCZE)	- (SmKnife * MILxKOR)	- (SmKnife * MILxPAC)	- (SmKnife * MILxEUR)	- (SmKnife * MILxISR)		,
			"Base.PushDagger",	SmKnife		 * VLR	- (SmKnife * xSmKnife)		- (SmKnife * xUSA)	- (SmKnife * MILxNON)	- (SmKnife * MILxUSA)	- (SmKnife * MILxSOV)	- (SmKnife * MILxCZE)	- (SmKnife * MILxKOR)	- (SmKnife * MILxPAC)	- (SmKnife * MILxEUR)	- (SmKnife * MILxISR)		,
			"Base.Karambit",	SmKnife		 * VLR	- (SmKnife * xSmKnife)		- (SmKnife * xPAC)		- (SmKnife * MILxUSA)	- (SmKnife * MILxSOV)	- (SmKnife * MILxCZE)	- (SmKnife * MILxKOR)		- (SmKnife * MILxEUR)	- (SmKnife * MILxISR)		,
			"Base.Tactical_Axe",	Axe		 * VLR	- (Axe * xAxe)		- (Axe * xUSA)	- (Axe * MILxNON)	- (Axe * MILxUSA)	- (Axe * MILxSOV)	- (Axe * MILxCZE)	- (Axe * MILxKOR)	- (Axe * MILxPAC)	- (Axe * MILxEUR)	- (Axe * MILxISR)		,
			"Base.Tactical_Sickle",	Axe		 * VLR	- (Axe * xAxe)		- (Axe * xUSA)	- (Axe * MILxNON)	- (Axe * MILxUSA)	- (Axe * MILxSOV)	- (Axe * MILxCZE)	- (Axe * MILxKOR)	- (Axe * MILxPAC)	- (Axe * MILxEUR)	- (Axe * MILxISR)		,
			"Base.Trench_Axe",	Axe		 * VLR	- (Axe * xAxe)		- (Axe * xEUR)	- (Axe * MILxNON)	- (Axe * MILxUSA)	- (Axe * MILxSOV)	- (Axe * MILxCZE)	- (Axe * MILxKOR)	- (Axe * MILxPAC)	- (Axe * MILxEUR)	- (Axe * MILxISR)		,
			"Base.Broad_Axe",	Axe		 * VLR	- (Axe * xAxe)		- (Axe * xEUR)	- (Axe * MILxNON)	- (Axe * MILxUSA)	- (Axe * MILxSOV)	- (Axe * MILxCZE)	- (Axe * MILxKOR)	- (Axe * MILxPAC)	- (Axe * MILxEUR)	- (Axe * MILxISR)		,
			"Base.DingDong",	Blunt		 * VLR	- (Blunt * xBlunt)		- (Blunt * xUSA)	- (Blunt * MILxNON)	- (Blunt * MILxUSA)	- (Blunt * MILxSOV)	- (Blunt * MILxCZE)	- (Blunt * MILxKOR)	- (Blunt * MILxPAC)	- (Blunt * MILxEUR)	- (Blunt * MILxISR)		,
			"Base.MilitaryBaton",	Blunt		 * VLR	- (Blunt * xBlunt)		- (Blunt * xUSA)										,
			"Base.ASP_B",	Blunt		 * VLR	- (Blunt * xBlunt)		- (Blunt * xUSA)										,
			"Base.KillBill",	Sword		 * VLR	- (Sword * xSword)		- (Sword * xPAC)	- (Sword * MILxNON)	- (Sword * MILxUSA)	- (Sword * MILxSOV)	- (Sword * MILxCZE)	- (Sword * MILxKOR)	- (Sword * MILxPAC)	- (Sword * MILxEUR)	- (Sword * MILxISR)		,
			"Base.CH_WarSword",	Sword		 * VLR	- (Sword * xSword)		- (Sword * xPAC)		- (Sword * MILxUSA)	- (Sword * MILxSOV)	- (Sword * MILxCZE)	- (Sword * MILxKOR)		- (Sword * MILxEUR)	- (Sword * MILxISR)		,
			"Base.Conan_Sword",	Sword		 * VLR	- (Sword * xSword)		- (Sword * xUSA)	- (Sword * MILxNON)	- (Sword * MILxUSA)	- (Sword * MILxSOV)	- (Sword * MILxCZE)	- (Sword * MILxKOR)	- (Sword * MILxPAC)	- (Sword * MILxEUR)	- (Sword * MILxISR)		,
																			
			"Base.Launcher",	Part		 * VLR	- (wGREN * xGREN)		- (Part * xUSA)			- (Part * MILxSOV)	- (Part * MILxCZE)		- (Part * MILxPAC)				,
			"Base.Launcher2",	Part		 * VLR	- (wGREN * xGREN)		- (Part * xSOV)		- (Part * MILxUSA)			- (Part * MILxKOR)		- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Bipod",	Part		 * VLR	- (Part * xPart)												,
			"Base.Ammobelt",	Part		 * VLR	- (Part * xPart)				- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Sling_1",	Part		 * VLR	- (Part * xPart)												,
			"Base.Sling_2",	Part		 * VLR	- (Part * xPart)												,
			"Base.Sling_3",	Part		 * VLR	- (Part * xPart)												,
			"Base.ForeGrip",	Part		 * VLR	- (Part * xPart)												,
			"Base.Grip_Magpul",	Part		 * VLR	- (Part * xPart)					- (Part * MILxSOV)			- (Part * MILxPAC)			- (Part * x90)	,
			"Base.Grip_MLOK",	Part		 * VLR	- (Part * xPart)					- (Part * MILxSOV)			- (Part * MILxPAC)			- (Part * x90)	,
			"Base.Grip_TG",	Part		 * VLR	- (Part * xPart)					- (Part * MILxSOV)			- (Part * MILxPAC)			- (Part * x90)	,
			"Base.Grip_BCM",	Part		 * VLR	- (Part * xPart)					- (Part * MILxSOV)			- (Part * MILxPAC)			- (Part * x90)	,
			"Base.Grip_Fold",	Part		 * VLR	- (Part * xPart)					- (Part * MILxSOV)			- (Part * MILxPAC)				,
			"Base.Light_Small",	Light		 * VLR	- (Light * xLight)												,
			"Base.Light_Large",	Light		 * VLR	- (Light * xLight)												,
			"Base.Light_Medium_M952V",	Light		 * VLR	- (Light * xLight)												,
			"Base.Laser_Green",	Light		 * VLR	- (Light * xLight)				- (Light * MILxUSA)					- (Light * MILxEUR)	- (Light * MILxISR)		,
			"Base.Laser_Red",	Light		 * VLR	- (Light * xLight)				- (Light * MILxUSA)					- (Light * MILxEUR)	- (Light * MILxISR)		,
			"Base.Laser_DVAL",	Light		 * VLR	- (Light * xLight)					- (Light * MILxSOV)	- (Light * MILxCZE)	- (Light * MILxKOR)	- (Light * MILxPAC)				,
			"Base.Laser_PEQ15",	Light		 * VLR	- (Light * xLight)					- (Light * MILxSOV)	- (Light * MILxCZE)	- (Light * MILxKOR)	- (Light * MILxPAC)				,
			"Base.Light_Small_Socom",	Light		 * VLR	- (Light * xLight)					- (Light * MILxSOV)	- (Light * MILxCZE)	- (Light * MILxKOR)	- (Light * MILxPAC)				,
			"Base.Light_Small_TLR_7AH",	Light		 * VLR	- (Light * xLight)												,
			"Base.Light_Medium_M900",	Light		 * VLR	- (Light * xLight)												,
			"Base.Suppressor_Pistol",	Suppress		 * VLR	- (Suppress * xSuppress)												,
			"Base.Suppressor_Rifle",	Suppress		 * VLR	- (Suppress * xSuppress)												,
			"Base.Suppressor_Shotgun",	Suppress		 * VLR	- (Suppress * xSuppress)												,
			"Base.Suppressor_BMG",	Suppress		 * VLR	- (Suppress * xSuppress)	- (wBMG * xBMG)											,
			"Base.Suppressor_Socom_Pistol",	Suppress		 * VLR	- (Suppress * xSuppress)												,
			"Base.Suppressor_NorthStar_Pistol",	Suppress		 * VLR	- (Suppress * xSuppress)			- (Suppress * MILxNON)									,
			"Base.Suppressor_PBS1_Rifle",	Suppress		 * VLR	- (Suppress * xSuppress)												,
			"Base.Suppressor_PBS4_Rifle",	Suppress		 * VLR	- (Suppress * xSuppress)												,
			"Base.Suppressor_ROME_BMG",	Suppress		 * VLR	- (Suppress * xSuppress)	- (wBMG * xBMG)											,
			"Base.Bayonet_M4",	Part		 * VLR	- (Part * xPart)					- (Part * MILxSOV)		- (Part * MILxKOR)	- (Part * MILxPAC)				,
			"Base.Bayonet_AK",	Part		 * VLR	- (Part * xPart)		- (Part * xSOV)		- (Part * MILxUSA)			- (Part * MILxKOR)		- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Bayonet_M1917",	Part		 * VLR	- (Part * xPart)				- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)		- (Part * MILxPAC)		- (Part * MILxISR)		,
			"Base.Bayonet_Type30",	Part		 * VLR	- (Part * xPart)				- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Choke_Full",	Part		 * VLR	- (Part * xPart)			- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Choke_Full_Dbl",	Part		 * VLR	- (Part * xPart)			- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Compensator",	Part		 * VLR	- (Part * xPart)												,
			"Base.LinearComp_Noveske",	Part		 * VLR	- (Part * xPart)												,
			"Base.MuzzleBrake",	Part		 * VLR	- (Part * xPart)												,
			"Base.MuzzleBrake_DK1",	Part		 * VLR	- (Part * xPart)												,
			"Base.MuzzleBrake_DK2",	Part		 * VLR	- (Part * xPart)												,
			"Base.Pad",	Part		 * VLR	- (Part * xPart)												,
			"Base.Carrier_12g",	Part		 * VLR	- (Part * xPart)												,
			"Base.GhostRing",	Optic		 * VLR	- (Optic * xOptic)				- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_MicroDot",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * MILxNON)	- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)	- (Optic * x90)	,
			"Base.Sight_RaceDot",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * MILxNON)	- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_Phantom_XL",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * MILxNON)	- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)	- (Optic * x90)	,
			"Base.Sight_OKP7_Reflex",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)			- (Optic * MILxKOR)		- (Optic * MILxEUR)	- (Optic * MILxISR)	- (Optic * x90)	,
			"Base.Sight_SRS",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)		- (Optic * x90)	,
			"Base.Sight_EOTech",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)			,
			"Base.Sight_3xEOTech",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)			,
			"Base.Sight_4xACOG",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)			,
			"Base.Sight_4xACOG_ECO",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)			,
			"Base.Sight_6xELCAN",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xEUR)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)				,
			"Base.Sight_6xHensoldt",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xEUR)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)				,
			"Base.Sight_KOBRA",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)			- (Optic * MILxKOR)		- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Scope_4xPSO",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)			- (Optic * MILxKOR)		- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Scope_12xPSO",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)			- (Optic * MILxKOR)		- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Scope_1-4x",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Scope_Trijicon_1-6x",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Scope_TANGO6T_1-6x",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Scope_20x",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_Thermal",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Sight_Thermal_AK",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)			- (Optic * MILxKOR)		- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_Aimpoint",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)			- (Optic * MILxPAC)				,
			"Base.Sight_Aimpoint_Dot",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)			- (Optic * MILxPAC)				,
			"Base.Sight_Fiber_Shotgun",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * MILxNON)	- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_Mepro_M21",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)		- (Optic * MILxKOR)	- (Optic * MILxPAC)			- (Optic * x90)	,
			"Base.Sight_Mepro_MOR",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)		- (Optic * MILxKOR)	- (Optic * MILxPAC)			- (Optic * x90)	,
			"Base.Sight_UH1",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)	- (Optic * x90)	,
			"Base.Sight_C79",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xEUR)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_SUSAT",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xEUR)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)		- (Optic * MILxISR)		,
			"Base.Sight_Raven",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_G28_Scope",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xEUR)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)				,
			"Base.Scope_ATACR7_F1",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Scope_ATACR7_F1r",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Sight_ACRO",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)	- (Optic * x90)	,
			"Base.Sight_MRO",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)			- (Optic * x90)	,
			"Base.Sight_SRO",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)			- (Optic * x90)	,
			"Base.Sight_Nikon",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Sight_M8",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Sight_VX3",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Sight_1P87",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)			- (Optic * MILxKOR)		- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_1P63",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)			- (Optic * MILxKOR)		- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_Brownells",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)		- (Optic * MILxKOR)	- (Optic * MILxPAC)				,
			"Base.Sight_L2",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xEUR)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)		- (Optic * MILxISR)		,
			"Base.Sight_Malcom",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * MILxNON)	- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_LUX",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * MILxNON)	- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_NO32",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * MILxNON)	- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)		- (Optic * MILxISR)		,
			"Base.Sight_PKAS",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)	- (Optic * MILxSOV)	- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_PU",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * MILxUSA)		- (Optic * MILxCZE)	- (Optic * MILxKOR)	- (Optic * MILxPAC)	- (Optic * MILxEUR)	- (Optic * MILxISR)		,
			"Base.Sight_XPS",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)			- (Optic * x90)	,
			"Base.Sight_PVS4",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Sight_Burris_NV",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Sight_Armasight_NV",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * MILxSOV)	- (Optic * MILxCZE)		- (Optic * MILxPAC)				,
			"Base.Barrel_308",	w308		 * VLR	- (w308 * xPart)	- (w308 * xBREAK)	- (w308 * xUSA)	- (w308 * MILxNON)	- (w308 * MILxUSA)	- (w308 * MILxSOV)	- (w308 * MILxCZE)	- (w308 * MILxKOR)	- (w308 * MILxPAC)	- (w308 * MILxEUR)	- (w308 * MILxISR)		,
			"Base.Barrel_3006",	w3006		 * VLR	- (w3006 * xPart)	- (w3006 * xBREAK)	- (w3006 * xUSA)	- (w3006 * MILxNON)	- (w3006 * MILxUSA)	- (w3006 * MILxSOV)	- (w3006 * MILxCZE)	- (w3006 * MILxKOR)	- (w3006 * MILxPAC)	- (w3006 * MILxEUR)	- (w3006 * MILxISR)		,
			"Base.Barrel_4570",	w4570		 * VLR	- (w4570 * xPart)	- (w4570 * xBREAK)	- (w4570 * xUSA)	- (w4570 * MILxNON)	- (w4570 * MILxUSA)	- (w4570 * MILxSOV)	- (w4570 * MILxCZE)	- (w4570 * MILxKOR)	- (w4570 * MILxPAC)	- (w4570 * MILxEUR)	- (w4570 * MILxISR)		,
			"Base.Barrel_357",	w357		 * VLR	- (w357 * xPart)	- (w357 * xBREAK)	- (w357 * xUSA)	- (w357 * MILxNON)	- (w357 * MILxUSA)	- (w357 * MILxSOV)	- (w357 * MILxCZE)	- (w357 * MILxKOR)	- (w357 * MILxPAC)	- (w357 * MILxEUR)	- (w357 * MILxISR)		,
			"Base.Barrel_357_Short",	w357		 * VLR	- (w357 * xPart)	- (w357 * xBREAK)	- (w357 * xUSA)	- (w357 * MILxNON)	- (w357 * MILxUSA)	- (w357 * MILxSOV)	- (w357 * MILxCZE)	- (w357 * MILxKOR)	- (w357 * MILxPAC)	- (w357 * MILxEUR)	- (w357 * MILxISR)		,
			"Base.Barrel_45LC",	w45LC		 * VLR	- (w45LC * xPart)	- (w45LC * xBREAK)	- (w45LC * xUSA)	- (w45LC * MILxNON)	- (w45LC * MILxUSA)	- (w45LC * MILxSOV)	- (w45LC * MILxCZE)	- (w45LC * MILxKOR)	- (w45LC * MILxPAC)	- (w45LC * MILxEUR)	- (w45LC * MILxISR)		,
			"Base.Barrel_45LC_Short",	w45LC		 * VLR	- (w45LC * xPart)	- (w45LC * xBREAK)	- (w45LC * xUSA)	- (w45LC * MILxNON)	- (w45LC * MILxUSA)	- (w45LC * MILxSOV)	- (w45LC * MILxCZE)	- (w45LC * MILxKOR)	- (w45LC * MILxPAC)	- (w45LC * MILxEUR)	- (w45LC * MILxISR)		,
			"Base.TriggerGroup_AR",	Part		 * VLR	- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)			- (Part * MILxSOV)	- (Part * MILxCZE)		- (Part * MILxPAC)				,
			"Base.TriggerGroup_AK",	Part		 * VLR	- (Part * xPart)	- (Part * xAUTO)	- (Part * xSOV)		- (Part * MILxUSA)			- (Part * MILxKOR)		- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.TriggerGroup_HK",	Part		 * VLR	- (Part * xPart)	- (Part * xAUTO)	- (Part * xEUR)		- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)		- (Part * MILxISR)		,
			"Base.TriggerGroup_FN",	Part		 * VLR	- (Part * xPart)	- (Part * xAUTO)	- (Part * xEUR)		- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)		- (Part * MILxISR)		,
			"Base.Switch_Striker_Black",	Part 		 * VLR	- (Part * xPart)	- (Part  * xAUTO)	- (Part  * xUSA)	- (Part  * MILxNON)	- (Part  * MILxUSA)	- (Part  * MILxSOV)	- (Part  * MILxCZE)	- (Part  * MILxKOR)	- (Part  * MILxPAC)	- (Part  * MILxEUR)	- (Part  * MILxISR)	- (Part  * x90)	,
			"Base.Switch_Striker_Red",	Part		 * VLR	- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)	- (Part * x90)	,
			"Base.Switch_Striker_Blue",	Part		 * VLR	- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)	- (Part * x90)	,
			"Base.Switch_Striker_Green",	Part		 * VLR	- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)	- (Part * x90)	,
			"Base.Grip_G10_Blue",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_G10_Brown",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_G10_Black",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_G10_Red",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_G10_Green",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)										,
			"Base.Grip_G10_Pink",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Alloy_Black",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Alloy_Silver",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Alloy_Blue",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Alloy_Red",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Wood",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Punisher",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Spartan",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)										,
			"Base.Grip_Ivory",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
			"Base.Grip_Carbon",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * MILxNON)	- (Part * MILxUSA)	- (Part * MILxSOV)	- (Part * MILxCZE)	- (Part * MILxKOR)	- (Part * MILxPAC)	- (Part * MILxEUR)	- (Part * MILxISR)		,
																			
			"Base.AmmoCan30_22",	AmmoCan		 * VLR	* w22	- (AmmoCan * x22)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)			,
			"Base.AmmoCan30_380",	AmmoCan		 * VLR	* w380	- (AmmoCan * x380)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)		- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_57",	AmmoCan		 * VLR	* w57	- (AmmoCan * x57)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)	- (AmmoCan * x90)	,
			"Base.AmmoCan30_9",	AmmoCan		 * VLR	* w9	- (AmmoCan * x9)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan30_38",	AmmoCan		 * VLR	* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_357",	AmmoCan		 * VLR	* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_45",	AmmoCan		 * VLR	* w45	- (AmmoCan * x45)	- (AmmoCan * xAmmoCan)			- (AmmoCan * MILxSOV)			- (AmmoCan * MILxPAC)				,
			"Base.AmmoCan30_44",	AmmoCan		 * VLR	* w44	- (AmmoCan * x44)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_45LC",	AmmoCan		 * VLR	* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_4570",	AmmoCan		 * VLR	* w4570	- (AmmoCan * x4570)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan30_50MAG",	AmmoCan		 * VLR	* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)		- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)	- (AmmoCan * x90)	,
			"Base.AmmoCan50_223",	AmmoCan		 * VLR	* w223	- (AmmoCan * x223)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)		- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_556",	AmmoCan		 * VLR	* w556	- (AmmoCan * x556)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_762x39",	AmmoCan		 * VLR	* w762x39	- (AmmoCan * x762x39)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)			- (AmmoCan * MILxKOR)		- (AmmoCan * MILxEUR)			,
			"Base.AmmoCan50_545x39",	AmmoCan		 * VLR	* w545x39	- (AmmoCan * x545x39)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)		- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)		- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_762x54r",	AmmoCan		 * VLR	* w762x54r	- (AmmoCan * x762x54r)	- (AmmoCan * xAmmoCan)		- (AmmoCan * MILxUSA)			- (AmmoCan * MILxKOR)		- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_308",	AmmoCan		 * VLR	* w308	- (AmmoCan * x308)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_3006",	AmmoCan		 * VLR	* w3006	- (AmmoCan * x3006)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_410",	AmmoCan		 * VLR	* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_20",	AmmoCan		 * VLR	* w20g	- (AmmoCan * x20g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)		- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_12",	AmmoCan		 * VLR	* w12g	- (AmmoCan * x12g)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_10",	AmmoCan		 * VLR	* w10g	- (AmmoCan * x10g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_4",	AmmoCan		 * VLR	* w4g	- (AmmoCan * x4g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * MILxNON)	- (AmmoCan * MILxUSA)	- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)	- (AmmoCan * MILxEUR)	- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_50",	AmmoCan		 * VLR	* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)			- (AmmoCan * MILxSOV)	- (AmmoCan * MILxCZE)	- (AmmoCan * MILxKOR)	- (AmmoCan * MILxPAC)		- (AmmoCan * MILxISR)		,
			"Base.AmmoCan50_HE",	AmmoCan		 * VLR	* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_HE",	AmmoCan		 * VLR	* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_INC",	AmmoCan		 * VLR	* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_INC",	AmmoCan		 * VLR	* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
			"Base.AmmoCan50_ROCKET",	AmmoCan		 * VLR	* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)										,
																			
			"Base.40HERound",	AmmoBox		 * VLR	* wGREN	- (AmmoBox * xGREN)											,
			"Base.40INCRound",	AmmoBox		 * VLR	* wGREN	- (AmmoBox * xGREN)											,
			"Base.HERocket",	AmmoBox		 * VLR	* wGREN	- (AmmoBox * xGREN)											,
			"Base.Flare",	AmmoBox		 * VLR	* wFLAME	- (AmmoBox * xFLAME)											,
			"Base.Grenade_Fragmentation",	AmmoBox	* MILx	 * VLR	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)										,
			"Base.Grenade_Stick",	AmmoBox	* MILx	 * VLR	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xEUR)										,
			"Base.Explosive_Landmine",	AmmoBox	* MILx	 * VLR	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)										,
			"Base.Explosive_Claymore_P",	AmmoBox	* MILx	 * VLR	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)										,
																			
			"Base.38Speed",	StdMag	* w357 - (StdMag * xStdMag)	 * VLR	- (w357 * x357)	- (StdMag * xREV)		- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.44Speed",	StdMag	* w44 - (StdMag * xStdMag)	 * VLR	- (w44 * x44)	- (StdMag * xREV)		- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.SRM1208_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	 * VLR	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.SRM1212_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	 * VLR	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.SRM1216_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	 * VLR	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.SIX12_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	 * VLR	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.CP33Clip",	StdMag	* w22 - (StdMag * xStdMag)	 * VLR	- (w22 * x22)		- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.CP33_17MagBase",	ExtMag	* w22 - (ExtMag * xExtMag)	 * VLR	- (w22 * x22)		- (ExtMag * xUSA)	- (ExtMag * MILxNON)	- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)	- (ExtMag * MILxCZE)	- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)	- (ExtMag * x90)	,
			"Base.22Clip",	StdMag	* w22 - (StdMag * xStdMag)	 * VLR	- (w22 * x22)			- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)			,
			"Base.22ExtClip",	ExtMag	* w22 - (ExtMag * xExtMag)	 * VLR	- (w22 * x22)			- (ExtMag * MILxNON)	- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)	- (ExtMag * MILxCZE)	- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)			,
			"Base.380Clip",	StdMag	* w380 - (StdMag * xStdMag)	 * VLR	- (w380 * x380)				- (StdMag * MILxUSA)	- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.380StdClip",	StdMag	* w380 - (StdMag * xStdMag)	 * VLR	- (w380 * x380)				- (StdMag * MILxUSA)	- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.380ExtClip",	ExtMag	* w380 - (ExtMag * xExtMag)	 * VLR	- (w380 * x380)				- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)		- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)		,
			"Base.9mmSSClip",	StdMag	* w9 - (StdMag * xStdMag)	 * VLR	- (w9 * x9)												,
			"Base.9mmSSExtClip",	StdMag	* w9 - (StdMag * xStdMag)	 * VLR	- (w9 * x9)												,
			"Base.9mmClip",	StdMag	* w9 - (StdMag * xStdMag)	 * VLR	- (w9 * x9)												,
			"Base.9mmExtClip",	ExtMag	* w9 - (ExtMag * xExtMag)	 * VLR	- (w9 * x9)												,
			"Base.45DSClip",	StdMag	* w45 - (StdMag * xStdMag)	 * VLR	- (w45 * x45)					- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)				,
			"Base.45DSExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	 * VLR	- (w45 * x45)					- (ExtMag * MILxSOV)		- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)				,
			"Base.45Clip",	StdMag	* w45 - (StdMag * xStdMag)	 * VLR	- (w45 * x45)					- (StdMag * MILxSOV)	- (StdMag * MILxCZE)		- (StdMag * MILxPAC)		- (StdMag * MILxISR)		,
			"Base.45ExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	 * VLR	- (w45 * x45)					- (ExtMag * MILxSOV)	- (ExtMag * MILxCZE)		- (ExtMag * MILxPAC)		- (ExtMag * MILxISR)		,
			"Base.44Clip",	StdMag	* w44 - (StdMag * xStdMag)	 * VLR	- (w44 * x44)			- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)			,
			"Base.50Clip",	StdMag	* wBMG - (StdMag * xStdMag)	 * VLR	- (wBMG * xBMG)			- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)			,
			"Base.223StdClip",	StdMag	* w223 - (StdMag * xStdMag)	 * VLR	- (w223 * x223)			- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.223ExtClip",	ExtMag	* w223 - (ExtMag * xExtMag)	 * VLR	- (w223 * x223)			- (ExtMag * MILxNON)	- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)		- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)		,
			"Base.556Clip",	StdMag	* w556 - (StdMag * xStdMag)	 * VLR	- (w556 * x556)												,
			"Base.308StdClip",	StdMag	* w308 - (StdMag * xStdMag)	 * VLR	- (w308 * x308)				- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.308ExtClip",	ExtMag	* w308 - (ExtMag * xExtMag)	 * VLR	- (w308 * x308)				- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)	- (ExtMag * MILxCZE)	- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)		,
			"Base.3006ExtClip",	ExtMag	* w3006 - (ExtMag * xExtMag)	 * VLR	- (w3006 * x3006)		- (ExtMag * xUSA)	- (ExtMag * MILxNON)	- (ExtMag * MILxUSA)	- (ExtMag * MILxSOV)	- (ExtMag * MILxCZE)	- (ExtMag * MILxKOR)	- (ExtMag * MILxPAC)	- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)		,
			"Base.SVDClip",	StdMag	* w762x54r - (StdMag * xStdMag)	 * VLR	- (w762x54r * x762x54r)		- (StdMag * xSOV)		- (StdMag * MILxUSA)			- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.ASHClip",	StdMag	* wBMG - (StdMag * xStdMag)	 * VLR	- (wBMG * xBMG)		- (StdMag * xSOV)		- (StdMag * MILxUSA)		- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.M82Clip",	StdMag	* wBMG - (StdMag * xStdMag)	 * VLR	- (wBMG * xBMG)		- (StdMag * xUSA)			- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)				,
			"Base.M1Clip",	StdMag	* w3006 - (StdMag * xStdMag)	 * VLR	- (w3006 * x3006)		- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.SKSClip",	StdMag	* w762x39 - (StdMag * xStdMag)	 * VLR	- (w762x39 * x762x39)		- (StdMag * xSOV)		- (StdMag * MILxUSA)			- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.1903Clip",	StdMag	* w308 - (StdMag * xStdMag)	 * VLR	- (w308 * x308)			- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.545StdClip",	StdMag	* w545x39 - (StdMag * xStdMag)	 * VLR	- (w545x39 * x545x39)		- (StdMag * xSOV)		- (StdMag * MILxUSA)		- (StdMag * MILxCZE)	- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.AKClip",	StdMag	* w762x39 - (StdMag * xStdMag)	 * VLR	- (w762x39 * x762x39)				- (StdMag * MILxUSA)			- (StdMag * MILxKOR)		- (StdMag * MILxEUR)			,
			"Base.ASVALClip",	ExtMag	* w9 - (ExtMag * xExtMag)	 * VLR	- (w9 * x9)		- (ExtMag * xSOV)		- (ExtMag * MILxUSA)		- (ExtMag * MILxCZE)	- (ExtMag * MILxKOR)		- (ExtMag * MILxEUR)	- (ExtMag * MILxISR)		,
			"Base.VSSClip",	StdMag	* w9 - (StdMag * xStdMag)	 * VLR	- (w9 * x9)		- (StdMag * xSOV)		- (StdMag * MILxUSA)		- (StdMag * MILxCZE)	- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.57Clip",	StdMag	* w57 - (StdMag * xStdMag)	 * VLR	- (w57 * x57)		- (StdMag * xEUR)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.P90Clip",	StdMag	* w57 - (StdMag * xStdMag)	 * VLR	- (w57 * x57)		- (StdMag * xEUR)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.SPASClip",	StdMag	* w12g - (StdMag * xStdMag)	 * VLR	- (w12g * x12g)		- (StdMag * xEUR)				- (StdMag * MILxCZE)						,
			"Base.22Drum",	DrumMag	* w22 - (DrumMag * xDrumMag)	 * VLR	- (w22 * x22)			- (DrumMag * MILxNON)	- (DrumMag * MILxUSA)	- (DrumMag * MILxSOV)	- (DrumMag * MILxCZE)	- (DrumMag * MILxKOR)	- (DrumMag * MILxPAC)	- (DrumMag * MILxEUR)			,
			"Base.9mmDrum",	DrumMag	* w9 - (DrumMag * xDrumMag)	 * VLR	- (w9 * x9)												,
			"Base.45Drum",	DrumMag	* w45 - (DrumMag * xDrumMag)	 * VLR	- (w45 * x45)					- (DrumMag * MILxSOV)		- (DrumMag * MILxKOR)	- (DrumMag * MILxPAC)				,
			"Base.556Drum",	DrumMag	* w556 - (DrumMag * xDrumMag)	 * VLR	- (w556 * x556)												,
			"Base.545Drum",	DrumMag	* w545x39 - (DrumMag * xDrumMag)	 * VLR	- (w545x39 * x545x39)		- (DrumMag * xSOV)		- (DrumMag * MILxUSA)		- (DrumMag * MILxCZE)	- (DrumMag * MILxKOR)		- (DrumMag * MILxEUR)	- (DrumMag * MILxISR)		,
			"Base.762Drum",	DrumMag	* w762x39 - (DrumMag * xDrumMag)	 * VLR	- (w762x39 * x762x39)				- (DrumMag * MILxUSA)			- (DrumMag * MILxKOR)		- (DrumMag * MILxEUR)			,
			"Base.12gDrum",	DrumMag	* w12g - (DrumMag * xDrumMag)	 * VLR	- (w12g * x12g)						- (DrumMag * MILxCZE)						,
			"Base.308Belt",	StdMag	* w308 - (StdMag * xStdMag)	 * VLR	- (w308 * x308)	- (wLMG * xLMG)											,
			"Base.556Belt",	StdMag	* w556 - (StdMag * xStdMag)	 * VLR	- (w556 * x556)	- (wLMG * xLMG)				- (StdMag * MILxSOV)	- (StdMag * MILxCZE)		- (StdMag * MILxPAC)	- (StdMag * MILxEUR)			,
			"Base.762x39Belt",	StdMag	* w762x39 - (StdMag * xStdMag)	 * VLR	- (w762x39 * x762x39)	- (wLMG * xLMG)			- (StdMag * MILxUSA)		- (StdMag * MILxCZE)	- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.762x54rBelt",	StdMag	* w762x54r - (StdMag * xStdMag)	 * VLR	- (w762x54r * x762x54r)	- (wLMG * xLMG)	- (StdMag * xSOV)		- (StdMag * MILxUSA)			- (StdMag * MILxKOR)		- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.556MiniCan",	StdMag	* w556 - (StdMag * xStdMag)	 * VLR	- (w556 * x556)	- (wMINI * xMINI)	- (StdMag * xUSA)			- (StdMag * MILxSOV)		- (StdMag * MILxKOR)	- (StdMag * MILxPAC)				,
			"Base.308MiniCan",	StdMag	* w308 - (StdMag * xStdMag)	 * VLR	- (w308 * x308)	- (wMINI * xMINI)	- (StdMag * xUSA)			- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.50MiniCan",	StdMag	* wBMG - (StdMag * xStdMag)	 * VLR	- (wBMG * xBMG)	- (wMINI * xMINI)	- (StdMag * xUSA)			- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)		- (StdMag * MILxISR)		,
			"Base.K11HEClip",	StdMag	* wGREN - (StdMag * xStdMag)	 * VLR	- (wGREN * xGREN)		- (StdMag * xKOR)		- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)		- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)	- (StdMag * x90)	,
			"Base.M2A1_Tank",	ExtMag	* wFLAME - (ExtMag * xExtMag)	 * VLR	- (wFLAME * xFLAME)		- (ExtMag * xUSA)										,
			"Base.M2A1_Can",	StdMag	* wFLAME - (StdMag * xStdMag)	 * VLR	- (wFLAME * xFLAME)		- (StdMag * xUSA)										,
			"Base.M2A1_Can",	StdMag	* wBB - (StdMag * xStdMag)	 * VLR	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.Standard_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	 * VLR	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
			"Base.Large_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	 * VLR	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * MILxNON)	- (StdMag * MILxUSA)	- (StdMag * MILxSOV)	- (StdMag * MILxCZE)	- (StdMag * MILxKOR)	- (StdMag * MILxPAC)	- (StdMag * MILxEUR)	- (StdMag * MILxISR)		,
																			
			"Base.Case_Small8",	Case	* wFLAME	- (Case * xCase)	- (wFLAME * xFLAME)												,
		}																	
	}																		
																			
	VehicleDistributions.A26SWAT_Trunk = {																		
		rolls = 1,																	
		items = {																	
			"Base.FN_P90",	w57	 * LEOx	 * VLR	- (w57 * x57)	- (w57 * LEOx * xSMG)	- (w57 * LEOx * xEUR)	- (w57 * LEOx * LEOxCIV)		- (w57 * LEOx * x90)	,						
			"Base.FN_PS90",	w57	 * LEOx	 * VLR	- (w57 * x57)	- (w57 * LEOx * xSMG)	- (w57 * LEOx * xEUR)	- (w57 * LEOx * LEOxCIV)		- (w57 * LEOx * x90)	,						
			"Base.MPA57DMG",	w57	 * LEOx	 * VLR	- (w57 * x57)	- (w57 * LEOx * xSMG)	- (w57 * LEOx * xUSA)	- (w57 * LEOx * LEOxCIV)		- (w57 * LEOx * x90)	,						
			"Base.MPA57DMG_Carbine",	w57	 * LEOx	 * VLR	- (w57 * x57)	- (w57 * LEOx * xSMG)	- (w57 * LEOx * xUSA)	- (w57 * LEOx * LEOxCIV)		- (w57 * LEOx * x90)	,						
			"Base.AR57_PDW",	w57	 * LEOx	 * VLR	- (w57 * x57)	- (w57 * LEOx * xSMG)	- (w57 * LEOx * xUSA)	- (w57 * LEOx * LEOxCIV)		- (w57 * LEOx * x90)	,						
			"Base.AR57_PDW_Long",	w57	 * LEOx	 * VLR	- (w57 * x57)	- (w57 * LEOx * xSMG)	- (w57 * LEOx * xUSA)	- (w57 * LEOx * LEOxCIV)		- (w57 * LEOx * x90)	,						
			"Base.Ruger_PCC",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.Ruger_PCC_R",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.Ruger_PCC_M",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.HiPoint",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.HiPoint_Carbine",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.STAR_BM", 	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xREST)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.M39",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)				,						
			"Base.MK22",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)		- (w9 * LEOx * LEOxMIL)		,						
			"Base.G43",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.CZ75",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)				,						
			"Base.CZ_75b",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)				,						
			"Base.CZ_75_SP01_SS",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)				,						
			"Base.CZ_75_SP01",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)				,						
			"Base.CZ_75_Compact",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.CZ_75_P01",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.CZ_2075",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.CZ_75_Shadow",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)			- (w9 * LEOx * x90)	,						
			"Base.CZ_75_Czechmate",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xCZE)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.EAA_Witness_9",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)				,						
			"Base.EAA_Witness_Long_9",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.G17",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)				,						
			"Base.G18",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)		- (w9 * LEOx * LEOxMIL)		,						
			"Base.G34", 	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.K5",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xKOR)				,						
			"Base.RPD_92FS",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)				,						
			"Base.M9",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)				,						
			"Base.M9A3",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)			- (w9 * LEOx * x90)	,						
			"Base.B93R",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)		- (w9 * LEOx * LEOxMIL)		,						
			"Base.M5906",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)				,						
			"Base.XD9",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)			- (w9 * LEOx * x90)	,						
			"Base.MP9",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)			- (w9 * LEOx * x90)	,						
			"Base.P226",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)				,						
			"Base.APS",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xSOV)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Makarov",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xSOV)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.PB",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xSOV)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Luger",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Luger_WW1",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Luger_Carbine",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.UZI", 	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xREST)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.UZI_Wood",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xREST)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.UZI_Micro",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xREST)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.BT9_Fold",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.UMP9_Stock",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)			- (w9 * LEOx * x90)	,						
			"Base.SUB2000",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)		- (w9 * LEOx * x90)	,						
			"Base.MP5_Fixed",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)				,						
			"Base.MP5_Stock",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)				,						
			"Base.MP5SD6_Fixed",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)		- (w9 * LEOx * LEOxMIL)		,						
			"Base.MP5SD6_Stock",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)		- (w9 * LEOx * LEOxMIL)		,						
			"Base.EVO_Fold",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xCZE)			- (w9 * LEOx * x90)	,						
			"Base.K7_Stock",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xKOR)				,						
			"Base.AUG9",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)				,						
			"Base.KG9",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Calico_M900_Fold",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Calico_M950_Pistol",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Bizon2_01_Stock",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xSOV)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.VSS",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xSOV)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.ASVAL",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xSOV)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.M1Carbine",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSEMI)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.M2Carbine",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.M635",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)				,						
			"Base.M635S",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)				,						
			"Base.M635SD",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)		- (w9 * LEOx * LEOxMIL)		,						
			"Base.MP7",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)			- (w9 * LEOx * x90)	,						
			"Base.Jatimatic",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Sten",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Sten_MK2",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.Sten_MK2SD",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.STAR_Z45_Stock",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.STAR_Z45_Fixed",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xEUR)	- (w9 * LEOx * LEOxCIV)			,						
			"Base.KRISS9_Stock",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)			- (w9 * LEOx * x90)	,						
			"Base.KRISS9_MLOK_Stock",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)			- (w9 * LEOx * x90)	,						
			"Base.JW3_TTI_MPX",	w9	 * LEOx	 * VLR	- (w9 * x9)	- (w9 * LEOx * xSMG)	- (w9 * LEOx * xUSA)			- (w9 * LEOx * x90)	,						
			"Base.M5238",	w357	 * LEOx	 * VLR	- (w357 * x357)	- (w357 * LEOx * xSEMI)	- (w357 * LEOx * xUSA)	- (w357 * LEOx * LEOxCIV)			,						
			"Base.Taurus856",	w357	 * LEOx	 * VLR	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xREST)			- (w357 * LEOx * x90)	,						
			"Base.Colt_Service38",	w357	 * LEOx	 * VLR	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xUSA)				,						
			"Base.GP100_2",	w357	 * LEOx	 * VLR	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xUSA)				,						
			"Base.GP100_4",	w357	 * LEOx	 * VLR	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xUSA)				,						
			"Base.GP100_6",	w357	 * LEOx	 * VLR	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xUSA)				,						
			"Base.K6S",	w357	 * LEOx	 * VLR	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xUSA)	- (w357 * LEOx * LEOxCIV)		- (w357 * LEOx * x90)	,						
			"Base.Rhino_200DS",	w357	 * LEOx	 * VLR	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xEUR)	- (w357 * LEOx * LEOxCIV)		- (w357 * LEOx * x90)	,						
			"Base.Rhino_40DS",	w357	 * LEOx	 * VLR	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xEUR)	- (w357 * LEOx * LEOxCIV)		- (w357 * LEOx * x90)	,						
			"Base.Rhino_60DS",	w357	 * LEOx	 * VLR	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xEUR)	- (w357 * LEOx * LEOxCIV)		- (w357 * LEOx * x90)	,						
			"Base.SW_327",	w357	 * LEOx	 * VLR	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xUSA)			- (w357 * LEOx * x90)	,						
			"Base.M1936",	w357	 * LEOx	 * VLR	- (w357 * x357)	- (w357 * LEOx * xREV)	- (w357 * LEOx * xUSA)	- (w357 * LEOx * LEOxCIV)			,						
			"Base.NEF_Handi_38",	w357	 * LEOx	 * VLR	- (w357 * x357)	- (w357 * LEOx * xBREAK)	- (w357 * LEOx * xUSA)	- (w357 * LEOx * LEOxCIV)			,						
			"Base.Marlin_1894",	w357	 * LEOx	 * VLR	- (w357 * x357)	- (w357 * LEOx * xLEVER)	- (w357 * LEOx * xUSA)	- (w357 * LEOx * LEOxCIV)			,						
			"Base.CZ97B",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xCZE)			- (w45 * LEOx * x90)	,						
			"Base.EAA_Witness_45",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xEUR)				,						
			"Base.EAA_Witness_Long_45",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xEUR)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.G21",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xEUR)				,						
			"Base.XD4",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)			- (w45 * LEOx * x90)	,						
			"Base.MP45",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)			- (w45 * LEOx * x90)	,						
			"Base.P220",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xEUR)				,						
			"Base.M4506",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)				,						
			"Base.HK_MK23",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xEUR)		- (w45 * LEOx * LEOxMIL)		,						
			"Base.HK_USP",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xEUR)				,						
			"Base.HK_USP_Match",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xEUR)		- (w45 * LEOx * LEOxMIL)		,						
			"Base.PULP_1911",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.PARA1911",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.AMT1911",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.AMT1911_Long",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.M1911_Carbine",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.Colt1911",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)				,						
			"Base.Colt_Kimber",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)		- (w45 * LEOx * x90)	,						
			"Base.Colt_Commander",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSEMI)	- (w45 * LEOx * xUSA)		- (w45 * LEOx * LEOxMIL)		,						
			"Base.UMP45_Stock",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xEUR)			- (w45 * LEOx * x90)	,						
			"Base.MAC10_Fold",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.KRISS_Stock",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xUSA)			- (w45 * LEOx * x90)	,						
			"Base.Commando",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xBOLT)	- (w45 * LEOx * xEUR)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.Thompson",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.Thompson_1928",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.M2Hyde",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.Model55_Fold",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.Model50",	w45	 * LEOx	 * VLR	- (w45 * x45)	- (w45 * LEOx * xSMG)	- (w45 * LEOx * xUSA)	- (w45 * LEOx * LEOxCIV)			,						
			"Base.Colt_Navy_1851",	w44	 * LEOx	 * VLR	- (w44 * x44)	- (w44 * LEOx * xREV)	- (w44 * LEOx * xUSA)	- (w44 * LEOx * LEOxCIV)			,						
			"Base.M29_44",	w44	 * LEOx	 * VLR	- (w44 * x44)	- (w44 * LEOx * xREV)	- (w44 * LEOx * xUSA)	- (w44 * LEOx * LEOxCIV)			,						
			"Base.M29_44Carbine",	w44	 * LEOx	 * VLR	- (w44 * x44)	- (w44 * LEOx * xREV)	- (w44 * LEOx * xUSA)	- (w44 * LEOx * LEOxCIV)			,						
			"Base.Automag",	w44	 * LEOx	 * VLR	- (w44 * x44)	- (w44 * LEOx * xSEMI)	- (w44 * LEOx * xUSA)	- (w44 * LEOx * LEOxCIV)			,						
			"Base.DEagle",	w44	 * LEOx	 * VLR	- (w44 * x44)	- (w44 * LEOx * xSEMI)	- (w44 * LEOx * xISR)	- (w44 * LEOx * LEOxCIV)			,						
			"Base.DEagle_Long",	w44	 * LEOx	 * VLR	- (w44 * x44)	- (w44 * LEOx * xSEMI)	- (w44 * LEOx * xISR)	- (w44 * LEOx * LEOxCIV)			,						
			"Base.DEagle_Hawk",	wBMG	 * LEOx	 * VLR	- (wBMG * xBMG)	- (wBMG * LEOx * xSEMI)	- (wBMG * LEOx * xISR)	- (wBMG * LEOx * LEOxCIV)			,						
			"Base.Winchester1866",	w45LC	 * LEOx	 * VLR	- (w44 * x44)	- (w45LC * LEOx * xLEVER)	- (w45LC * LEOx * xUSA)	- (w45LC * LEOx * LEOxCIV)			,						
			"Base.Win_1894",	w44	 * LEOx	 * VLR	- (w44 * x44)	- (w44 * LEOx * xLEVER)	- (w44 * LEOx * xUSA)	- (w44 * LEOx * LEOxCIV)			,						
			"Base.Colt_Service45",	w45LC	 * LEOx	 * VLR	- (w45LC * x45LC)	- (w45LC * LEOx * xREV)	- (w45LC * LEOx * xUSA)	- (w45LC * LEOx * LEOxCIV)			,						
			"Base.Judge_45LC",	w45LC	 * LEOx	 * VLR	- (w45LC * x45LC)	- (w45LC * LEOx * xREV)	- (w45LC * LEOx * xREST)	- (w45LC * LEOx * LEOxCIV)		- (w45LC * LEOx * x90)	,						
			"Base.Judge513_45LC",	w45LC	 * LEOx	 * VLR	- (w45LC * x45LC)	- (w45LC * LEOx * xREV)	- (w45LC * LEOx * xREST)	- (w45LC * LEOx * LEOxCIV)		- (w45LC * LEOx * x90)	,						
			"Base.Judge513_Long_45LC",	w45LC	 * LEOx	 * VLR	- (w45LC * x45LC)	- (w45LC * LEOx * xREV)	- (w45LC * LEOx * xREST)	- (w45LC * LEOx * LEOxCIV)		- (w45LC * LEOx * x90)	,						
			"Base.TXS_804_45LC",	w45LC	 * LEOx	 * VLR	- (w45LC * x45LC)	- (w45LC * LEOx * xREV)	- (w45LC * LEOx * xREST)	- (w45LC * LEOx * LEOxCIV)			,						
			"Base.Winchester1873",	w45LC	 * LEOx	 * VLR	- (w45LC * x45LC)	- (w45LC * LEOx * xLEVER)	- (w45LC * LEOx * xUSA)	- (w45LC * LEOx * LEOxCIV)			,						
			"Base.Sako85",	w223	 * LEOx	 * VLR	- (w223 * x223)	- (w223 * LEOx * xBOLT)	- (w223 * LEOx * xEUR)				,						
			"Base.MINI14",	w223	 * LEOx	 * VLR	- (w223 * x223)	- (w223 * LEOx * xSEMI)	- (w223 * LEOx * xUSA)				,						
			"Base.MINI14_Stock",	w223	 * LEOx	 * VLR	- (w223 * x223)	- (w223 * LEOx * xSEMI)	- (w223 * LEOx * xUSA)				,						
			"Base.MINI14_T",	w223	 * LEOx	 * VLR	- (w223 * x223)	- (w223 * LEOx * xSEMI)	- (w223 * LEOx * xUSA)				,						
			"Base.Viper",	w223	 * LEOx	 * VLR	- (w223 * x223)	- (w223 * LEOx * xLEVER)	- (w223 * LEOx * xREST)	- (w223 * LEOx * LEOxCIV)		- (w223 * LEOx * x90)	,						
			"Base.Carbon15_97",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.CAR15SMG",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)				,						
			"Base.CAR15_Survival",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)				,						
			"Base.XM8Compact_Pistol",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.XM8",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.SCARSC_Stock",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.SCARL",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.SCAR_B",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.G33",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)				,						
			"Base.G36",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)			- (w556 * LEOx * x90)	,						
			"Base.G36C",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)			- (w556 * LEOx * x90)	,						
			"Base.G36KV",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)			- (w556 * LEOx * x90)	,						
			"Base.G11K3",	w57	 * LEOx	 * VLR	- (w57 * x57)	- (w57 * LEOx * xAUTO)	- (w57 * LEOx * xEUR)		- (w57 * LEOx * LEOxMIL)	- (w57 * LEOx * x90)	,						
			"Base.MK18",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)			- (w556 * LEOx * x90)	,						
			"Base.AK5C",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)				,						
			"Base.M16A1",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.M16A2",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)				,						
			"Base.M16A3",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.M723",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)				,						
			"Base.XM117",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)			- (w556 * LEOx * x90)	,						
			"Base.H416",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)			- (w556 * LEOx * x90)	,						
			"Base.M4",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)				,						
			"Base.M4A1",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)				,						
			"Base.ADAR",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xSOV)	- (w556 * LEOx * LEOxCIV)		- (w556 * LEOx * x90)	,						
			"Base.K2C1_PH",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)			- (w556 * LEOx * x90)	,						
			"Base.K2_ADVK2",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)			- (w556 * LEOx * x90)	,						
			"Base.K2_Grunt",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)			- (w556 * LEOx * x90)	,						
			"Base.K1A_DEV",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)			- (w556 * LEOx * x90)	,						
			"Base.K1DEV",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)			- (w556 * LEOx * x90)	,						
			"Base.K2_C1",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)			- (w556 * LEOx * x90)	,						
			"Base.K2_1",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)				,						
			"Base.K2_203",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.K1_1",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)				,						
			"Base.DR_200",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xKOR)			- (w556 * LEOx * x90)	,						
			"Base.LVOA_C",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xSEMI)	- (w556 * LEOx * xUSA)	- (w556 * LEOx * LEOxCIV)		- (w556 * LEOx * x90)	,						
			"Base.AAC_Honey",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)			- (w556 * LEOx * x90)	,						
			"Base.AAC_HoneySD",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)			- (w556 * LEOx * x90)	,						
			"Base.Bush_AR15_MOE",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xSEMI)	- (w556 * LEOx * xUSA)				,						
			"Base.Bush_XM15",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xSEMI)	- (w556 * LEOx * xUSA)				,						
			"Base.Bush_XM15_Custom",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xSEMI)	- (w556 * LEOx * xUSA)				,						
			"Base.MCX_Virtus",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)			- (w556 * LEOx * x90)	,						
			"Base.MCX_VirtusPatrol",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)			- (w556 * LEOx * x90)	,						
			"Base.MCX_Socom",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.MCX_Spear",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xSEMI)	- (w556 * LEOx * xEUR)	- (w556 * LEOx * LEOxCIV)		- (w556 * LEOx * x90)	,						
			"Base.ColtM16",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)	- (w556 * LEOx * LEOxCIV)			,						
			"Base.M16Wood",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)	- (w556 * LEOx * LEOxCIV)			,						
			"Base.M16Tape",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)	- (w556 * LEOx * LEOxCIV)			,						
			"Base.FAMAS",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.FAMAS_G2",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.FAMAS_Felin",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.AUG",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)	- (w556 * LEOx * LEOxCIV)			,						
			"Base.AUG_A3",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)	- (w556 * LEOx * LEOxCIV)		- (w556 * LEOx * x90)	,						
			"Base.M85_Stock",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xSOV)	- (w556 * LEOx * LEOxCIV)			,						
			"Base.AN94",	w545x39	 * LEOx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xSOV)	- (w545x39 * LEOx * LEOxCIV)			,						
			"Base.AK74",	w545x39	 * LEOx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xSOV)	- (w545x39 * LEOx * LEOxCIV)			,						
			"Base.AKS74",	w545x39	 * LEOx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xSOV)	- (w545x39 * LEOx * LEOxCIV)			,						
			"Base.AKS74U",	w545x39	 * LEOx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xSOV)	- (w545x39 * LEOx * LEOxCIV)			,						
			"Base.AK74_Alpha",	w545x39	 * LEOx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xSOV)		- (w545x39 * LEOx * LEOxMIL)	- (w545x39 * LEOx * x90)	,						
			"Base.AK12",	w545x39	 * LEOx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xSOV)		- (w545x39 * LEOx * LEOxMIL)	- (w545x39 * LEOx * x90)	,						
			"Base.AK12_New",	w545x39	 * LEOx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xSOV)		- (w545x39 * LEOx * LEOxMIL)	- (w545x39 * LEOx * x90)	,						
			"Base.RPK74",	w545x39	 * LEOx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * LEOx * xLMG)	- (w545x39 * LEOx * xSOV)	- (w545x39 * LEOx * LEOxCIV)			,						
			"Base.RPK16",	w545x39	 * LEOx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * LEOx * xLMG)	- (w545x39 * LEOx * xSOV)	- (w545x39 * LEOx * LEOxCIV)		- (w545x39 * LEOx * x90)	,						
			"Base.L85",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.L85A2",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.L86",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.L22",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.F2000",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)	- (w556 * LEOx * LEOxCIV)		- (w556 * LEOx * x90)	,						
			"Base.Tavor",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xISR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.AR18",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xUSA)	- (w556 * LEOx * LEOxCIV)			,						
			"Base.Type20",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xPAC)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.Type89",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xPAC)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.QBZ_95",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xPAC)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.Shrike",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xLMG)	- (w556 * LEOx * xUSA)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.XM8LMG",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xLMG)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.M249",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xLMG)	- (w556 * LEOx * xUSA)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.M249E3",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xLMG)	- (w556 * LEOx * xUSA)		- (w556 * LEOx * LEOxMIL)	- (w556 * LEOx * x90)	,						
			"Base.K3LMG",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xLMG)	- (w556 * LEOx * xKOR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.AK47",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.AKM",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.AK103",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)		- (w762x39 * LEOx * x90)	,						
			"Base.MD65_Stock",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.AKMS_Stock",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Vz58",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xCZE)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Vz58_Stock",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xCZE)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Vz58_Mini_Stock",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xCZE)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.SKS",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xSEMI)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.SKS_PARA",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xSEMI)	- (w762x39 * LEOx * xPAC)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.SKS30_A26",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xSEMI)	- (w762x39 * LEOx * xUSA)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.MK47",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xSEMI)	- (w762x39 * LEOx * xUSA)	- (w762x39 * LEOx * LEOxCIV)		- (w762x39 * LEOx * x90)	,						
			"Base.AKM_Custom",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xUSA)	- (w762x39 * LEOx * LEOxCIV)		- (w762x39 * LEOx * x90)	,						
			"Base.AK74_Custom",	w545x39	 * LEOx	 * VLR	- (w545x39 * x545x39)	- (w545x39 * LEOx * xAUTO)	- (w545x39 * LEOx * xUSA)	- (w545x39 * LEOx * LEOxCIV)		- (w545x39 * LEOx * x90)	,						
			"Base.Ots14_1A_01",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Ots14_1A_02",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Ots14_4A",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Ots14_4A_01",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Ots14_4A_03",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xAUTO)	- (w762x39 * LEOx * xSOV)	- (w762x39 * LEOx * LEOxCIV)			,						
			"Base.Ots14_4A_GL",	wGREN	 * LEOx	 * VLR	- (wGREN * xGREN)	- (wGREN * LEOx * xAUTO)	- (wGREN * LEOx * xSOV)	- (wGREN * LEOx * LEOxCIV)	- (wGREN * LEOx * LEOxMIL)		,						
			"Base.AK308",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xSOV)	- (w308 * LEOx * LEOxCIV)	- (w308 * LEOx * LEOxMIL)	- (w308 * LEOx * x90)	,						
			"Base.SCARH",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)	- (w308 * LEOx * x90)	,						
			"Base.SCAR20",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)	- (w308 * LEOx * x90)	,						
			"Base.G28",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)	- (w308 * LEOx * x90)	,						
			"Base.G3",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.PSG1",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xSEMI)	- (w308 * LEOx * xEUR)				,						
			"Base.MSG90",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xSEMI)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.Type64",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xPAC)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.FAL",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.FAL_PARA_Stock",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.FN_FNC",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xAUTO)	- (w556 * LEOx * xEUR)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.WA2000",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xEUR)				,						
			"Base.SVD",	w762x54r	 * LEOx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xSEMI)	- (w762x54r * LEOx * xSOV)	- (w762x54r * LEOx * LEOxCIV)			,						
			"Base.SVDK",	w762x54r	 * LEOx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xSEMI)	- (w762x54r * LEOx * xSOV)	- (w762x54r * LEOx * LEOxCIV)			,						
			"Base.SV_98",	w762x54r	 * LEOx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xBOLT)	- (w762x54r * LEOx * xSOV)	- (w762x54r * LEOx * LEOxCIV)			,						
			"Base.OTS_03_SVU",	w762x54r	 * LEOx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xBOLT)	- (w762x54r * LEOx * xSOV)	- (w762x54r * LEOx * LEOxCIV)		- (w762x54r * LEOx * x90)	,						
			"Base.M14EBR",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xUSA)			- (w308 * LEOx * x90)	,						
			"Base.M14",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xUSA)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.K14",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xKOR)			- (w308 * LEOx * x90)	,						
			"Base.Savage12",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xUSA)				,						
			"Base.Ruger_No1_3006",	w3006	 * LEOx	 * VLR	- (w3006 * x3006)	- (w3006 * LEOx * xBREAK)	- (w3006 * LEOx * xUSA)	- (w3006 * LEOx * LEOxCIV)			,						
			"Base.M40",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xUSA)				,						
			"Base.M40A1",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xUSA)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.M40A2",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xUSA)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.M40A3",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xUSA)				,						
			"Base.M46_Mauser",	w762x54r	 * LEOx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xBOLT)	- (w762x54r * LEOx * xPAC)	- (w762x54r * LEOx * LEOxCIV)			,						
			"Base.Mosin",	w762x54r	 * LEOx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xBOLT)	- (w762x54r * LEOx * xSOV)	- (w762x54r * LEOx * LEOxCIV)			,						
			"Base.MosinObrez_Pistol",	w762x54r	 * LEOx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xBOLT)	- (w762x54r * LEOx * xSOV)	- (w762x54r * LEOx * LEOxCIV)			,						
			"Base.M1",	w3006	 * LEOx	 * VLR	- (w3006 * x3006)	- (w3006 * LEOx * xSEMI)	- (w3006 * LEOx * xUSA)	- (w3006 * LEOx * LEOxCIV)			,						
			"Base.M1903",	w3006	 * LEOx	 * VLR	- (w3006 * x3006)	- (w3006 * LEOx * xBOLT)	- (w3006 * LEOx * xUSA)	- (w3006 * LEOx * LEOxCIV)			,						
			"Base.BAR",	w3006	 * LEOx	 * VLR	- (w3006 * x3006)	- (w3006 * LEOx * xAUTO)	- (w3006 * LEOx * xUSA)		- (w3006 * LEOx * LEOxMIL)		,						
			"Base.BAR_Monitor",	w3006	 * LEOx	 * VLR	- (w3006 * x3006)	- (w3006 * LEOx * xAUTO)	- (w3006 * LEOx * xUSA)		- (w3006 * LEOx * LEOxMIL)		,						
			"Base.MAS36",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.MAS44",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.MAS49",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xEUR)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.Win_1895",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xLEVER)	- (w308 * LEOx * xUSA)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.Galil",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xISR)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.Galil_Sniper",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xAUTO)	- (w308 * LEOx * xISR)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.Thompson_Center_3006",	w3006	 * LEOx	 * VLR	- (w3006 * x3006)	- (w3006 * LEOx * xBREAK)	- (w3006 * LEOx * xUSA)	- (w3006 * LEOx * LEOxCIV)			,						
			"Base.Type38",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xPAC)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.Type99",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xPAC)	- (w308 * LEOx * LEOxCIV)			,						
			"Base.L96",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xBOLT)	- (w308 * LEOx * xEUR)				,						
			"Base.M240",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xLMG)	- (w308 * LEOx * xUSA)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.G21LMG",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xLMG)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)	- (w308 * LEOx * x90)	,						
			"Base.K12",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xLMG)	- (w308 * LEOx * xKOR)		- (w308 * LEOx * LEOxMIL)	- (w308 * LEOx * x90)	,						
			"Base.PKM",	w762x54r	 * LEOx	 * VLR	- (w762x54r * x762x54r)	- (w762x54r * LEOx * xLMG)	- (w762x54r * LEOx * xSOV)		- (w762x54r * LEOx * LEOxMIL)		,						
			"Base.MG42",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xLMG)	- (w308 * LEOx * xEUR)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.M60",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xLMG)	- (w308 * LEOx * xUSA)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.MK43",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xLMG)	- (w308 * LEOx * xUSA)		- (w308 * LEOx * LEOxMIL)	- (w308 * LEOx * x90)	,						
			"Base.RPD",	w762x39	 * LEOx	 * VLR	- (w762x39 * x762x39)	- (w762x39 * LEOx * xLMG)	- (w762x39 * LEOx * xSOV)		- (w762x39 * LEOx * LEOxMIL)		,						
			"Base.DSHK_Fold",	wBMG	 * LEOx	 * VLR	- (wBMG * xBMG)	- (wBMG * LEOx * xMINI)	- (wBMG * LEOx * xSOV)		- (wBMG * LEOx * LEOxMIL)		,						
			"Base.BOAR",	wBMG	 * LEOx	 * VLR	- (wBMG * xBMG)	- (wBMG * LEOx * xBREAK)	- (wBMG * LEOx * xUSA)	- (wBMG * LEOx * LEOxCIV)			,						
			"Base.EDM96",	wBMG	 * LEOx	 * VLR	- (wBMG * xBMG)	- (wBMG * LEOx * xBOLT)	- (wBMG * LEOx * xUSA)			- (wBMG * LEOx * x90)	,						
			"Base.M82",	wBMG	 * LEOx	 * VLR	- (wBMG * xBMG)	- (wBMG * LEOx * xSEMI)	- (wBMG * LEOx * xUSA)		- (wBMG * LEOx * LEOxMIL)		,						
			"Base.BFG50",	wBMG	 * LEOx	 * VLR	- (wBMG * xBMG)	- (wBMG * LEOx * xBREAK)	- (wBMG * LEOx * xUSA)	- (wBMG * LEOx * LEOxCIV)		- (wBMG * LEOx * x90)	,						
			"Base.Harris50",	wBMG	 * LEOx	 * VLR	- (wBMG * xBMG)	- (wBMG * LEOx * xBOLT)	- (wBMG * LEOx * xUSA)				,						
			"Base.TAC50",	wBMG	 * LEOx	 * VLR	- (wBMG * xBMG)	- (wBMG * LEOx * xBOLT)	- (wBMG * LEOx * xUSA)		- (wBMG * LEOx * LEOxMIL)		,						
			"Base.CheyTac50",	wBMG	 * LEOx	 * VLR	- (wBMG * xBMG)	- (wBMG * LEOx * xBOLT)	- (wBMG * LEOx * xUSA)		- (wBMG * LEOx * LEOxMIL)	- (wBMG * LEOx * x90)	,						
			"Base.Gepard_M6",	wBMG	 * LEOx	 * VLR	- (wBMG * xBMG)	- (wBMG * LEOx * xBOLT)	- (wBMG * LEOx * xEUR)		- (wBMG * LEOx * LEOxMIL)		,						
			"Base.OSV_96",	wBMG	 * LEOx	 * VLR	- (wBMG * xBMG)	- (wBMG * LEOx * xBOLT)	- (wBMG * LEOx * xSOV)		- (wBMG * LEOx * LEOxMIL)	- (wBMG * LEOx * x90)	,						
			"Base.Ash",	wBMG	 * LEOx	 * VLR	- (wBMG * xBMG)	- (wBMG * LEOx * xAUTO)	- (wBMG * LEOx * xSOV)		- (wBMG * LEOx * LEOxMIL)	- (wBMG * LEOx * x90)	,						
			"Base.VSSK",	wBMG	 * LEOx	 * VLR	- (wBMG * xBMG)	- (wBMG * LEOx * xBOLT)	- (wBMG * LEOx * xSOV)		- (wBMG * LEOx * LEOxMIL)	- (wBMG * LEOx * x90)	,						
			"Base.SW_M500",	wBMG	 * LEOx	 * VLR	- (wBMG * xBMG)	- (wBMG * LEOx * xREV)	- (wBMG * LEOx * xUSA)	- (wBMG * LEOx * LEOxCIV)		- (wBMG * LEOx * x90)	,						
			"Base.SPAS12_Fixed",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xEUR)				,						
			"Base.SPAS12_Fold",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xEUR)				,						
			"Base.Origin",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xUSA)			- (w12g * LEOx * x90)	,						
			"Base.SPAS_15",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xEUR)				,						
			"Base.USAS_12",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xAUTO)	- (w12g * LEOx * xKOR)		- (w12g * LEOx * LEOxMIL)		,						
			"Base.Shorty_Pistol",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)			- (w12g * LEOx * x90)	,						
			"Base.R11_87",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.M870",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)				,						
			"Base.M1897",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.DT11",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xBREAK)	- (w12g * LEOx * xEUR)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.Coachgun",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xBREAK)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.Terminator",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xBREAK)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.SIX12",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xREV)	- (w12g * LEOx * xUSA)			- (w12g * LEOx * x90)	,						
			"Base.SIX12SD",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xREV)	- (w12g * LEOx * xUSA)		- (w12g * LEOx * LEOxMIL)	- (w12g * LEOx * x90)	,						
			"Base.M870_Wingmaster",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.M870_Police",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)				,						
			"Base.M870_MCS",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)				,						
			"Base.M870_CQB",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)				,						
			"Base.M870_Breaching_Pistol",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)				,						
			"Base.M870_Express",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.Ithaca_M37",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.AUTO_5",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.A400",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xEUR)	- (w12g * LEOx * LEOxCIV)		- (w12g * LEOx * x90)	,						
			"Base.M1014",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xEUR)			- (w12g * LEOx * x90)	,						
			"Base.M1014_Fold",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xEUR)			- (w12g * LEOx * x90)	,						
			"Base.M1014_Wick",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xSEMI)	- (w12g * LEOx * xEUR)			- (w12g * LEOx * x90)	,						
			"Base.DAO12",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xREV)	- (w12g * LEOx * xREST)				,						
			"Base.M1887",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xLEVER)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.M1208",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xREV)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)		- (w12g * LEOx * x90)	,						
			"Base.M1212",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xREV)	- (w12g * LEOx * xUSA)	- (w12g * LEOx * LEOxCIV)		- (w12g * LEOx * x90)	,						
			"Base.M1216",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xREV)	- (w12g * LEOx * xUSA)			- (w12g * LEOx * x90)	,						
			"Base.AA12",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xAUTO)	- (w12g * LEOx * xUSA)		- (w12g * LEOx * LEOxMIL)	- (w12g * LEOx * x90)	,						
			"Base.CAWS",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xAUTO)	- (w12g * LEOx * xEUR)		- (w12g * LEOx * LEOxMIL)		,						
			"Base.ROYAL_SXS",	w10g	 * LEOx	 * VLR	- (w10g * x10g)	- (w10g * LEOx * xBREAK)	- (w10g * LEOx * xEUR)	- (w10g * LEOx * LEOxCIV)			,						
			"Base.KS23",	w4g	 * LEOx	 * VLR	- (w4g * x4g)	- (w4g * LEOx * xPUMP)	- (w4g * LEOx * xSOV)	- (w4g * LEOx * LEOxCIV)			,						
			"Base.KS23_S_Pistol",	w4g	 * LEOx	 * VLR	- (w4g * x4g)	- (w4g * LEOx * xPUMP)	- (w4g * LEOx * xSOV)	- (w4g * LEOx * LEOxCIV)			,						
			"Base.Triple_Crown",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xBREAK)	- (w12g * LEOx * xEUR)	- (w12g * LEOx * LEOxCIV)			,						
			"Base.Moss500_20",	w20g	 * LEOx	 * VLR	- (w20g * x20g)	- (w20g * LEOx * xPUMP)	- (w20g * LEOx * xUSA)	- (w20g * LEOx * LEOxCIV)			,						
			"Base.10855_Silver",	w20g	 * LEOx	 * VLR	- (w20g * x20g)	- (w20g * LEOx * xSEMI)	- (w20g * LEOx * xEUR)	- (w20g * LEOx * LEOxCIV)			,						
			"Base.Colt1855",	w20g	 * LEOx	 * VLR	- (w20g * x20g)	- (w20g * LEOx * xREV)	- (w20g * LEOx * xUSA)	- (w20g * LEOx * LEOxCIV)			,						
			"Base.TOZ106",	w20g	 * LEOx	 * VLR	- (w20g * x20g)	- (w20g * LEOx * xBOLT)	- (w20g * LEOx * xSOV)	- (w20g * LEOx * LEOxCIV)			,						
			"Base.TOZ194_Pistol",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xSOV)				,						
			"Base.Saiga12",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xAUTO)	- (w12g * LEOx * xSOV)		- (w12g * LEOx * LEOxMIL)	- (w12g * LEOx * x90)	,						
			"Base.Saiga12_Long",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xAUTO)	- (w12g * LEOx * xSOV)		- (w12g * LEOx * LEOxMIL)	- (w12g * LEOx * x90)	,						
			"Base.Saiga12_Tromix",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xAUTO)	- (w12g * LEOx * xSOV)		- (w12g * LEOx * LEOxMIL)	- (w12g * LEOx * x90)	,						
			"Base.MP133",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xSOV)			- (w12g * LEOx * x90)	,						
			"Base.MP133S_Pistol",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xSOV)			- (w12g * LEOx * x90)	,						
			"Base.KSG",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)			- (w12g * LEOx * x90)	,						
			"Base.KSG25",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xUSA)			- (w12g * LEOx * x90)	,						
			"Base.UTS15",	w12g	 * LEOx	 * VLR	- (w12g * x12g)	- (w12g * LEOx * xPUMP)	- (w12g * LEOx * xREST)			- (w12g * LEOx * x90)	,						
			"Base.EX41_HE",	wGREN	 * LEOx	 * VLR		- (wGREN * LEOx * xGREN)	- (wGREN * LEOx * xUSA)		- (wGREN * LEOx * LEOxMIL)		,						
			"Base.Federal_HE",	wGREN	 * LEOx	 * VLR		- (wGREN * LEOx * xGREN)	- (wGREN * LEOx * xUSA)		- (wGREN * LEOx * LEOxMIL)		,						
			"Base.M32_HE",	wGREN	 * LEOx	 * VLR		- (wGREN * LEOx * xGREN)	- (wGREN * LEOx * xUSA)		- (wGREN * LEOx * LEOxMIL)		,						
			"Base.GM94_HE",	wGREN	 * LEOx	 * VLR		- (wGREN * LEOx * xGREN)	- (wGREN * LEOx * xSOV)		- (wGREN * LEOx * LEOxMIL)	- (wGREN * LEOx * x90)	,						
			"Base.K11",	wGREN	 * LEOx	 * VLR	- (wGREN * LEOx * xAUTO)	- (wGREN * LEOx * xGREN)	- (wGREN * LEOx * xKOR)		- (wGREN * LEOx * LEOxMIL)	- (wGREN * LEOx * x90)	,						
			"Base.M72_LAW",	wGREN	 * LEOx	 * VLR		- (wGREN * LEOx * xGREN)	- (wGREN * LEOx * xUSA)		- (wGREN * LEOx * LEOxMIL)		,						
			"Base.RPG_7",	wGREN	 * LEOx	 * VLR		- (wGREN * LEOx * xGREN)	- (wGREN * LEOx * xSOV)		- (wGREN * LEOx * LEOxMIL)		,						
			"Base.XM214",	w556	 * LEOx	 * VLR	- (w556 * x556)	- (w556 * LEOx * xMINI)	- (w556 * LEOx * xUSA)		- (w556 * LEOx * LEOxMIL)		,						
			"Base.GAU17",	w308	 * LEOx	 * VLR	- (w308 * x308)	- (w308 * LEOx * xMINI)	- (w308 * LEOx * xUSA)		- (w308 * LEOx * LEOxMIL)		,						
			"Base.GAU19",	wBMG	 * LEOx	 * VLR	- (wBMG * xBMG)	- (wBMG * LEOx * xMINI)	- (wBMG * LEOx * xUSA)		- (wBMG * LEOx * LEOxMIL)		,						
			"Base.TAC15",	wBOW	 * LEOx	 * VLR		- (wBOW * LEOx * xBOW)	- (wBOW * LEOx * xUSA)	- (wBOW * LEOx * LEOxCIV)			,						
			"Base.M2A1",	wFLAME	 * LEOx	 * VLR		- (wFLAME * LEOx * xFLAME)	- (wFLAME * LEOx * xUSA)	- (wFLAME * LEOx * LEOxCIV)	- (wFLAME * LEOx * LEOxMIL)		,						
			"Base.Musk",	wFLAME	 * LEOx	 * VLR		- (wFLAME * LEOx * xFLAME)	- (wFLAME * LEOx * xUSA)	- (wFLAME * LEOx * LEOxCIV)		- (wFLAME * LEOx * x90)	,						
																			
			"Base.RussianMachete",	LgKnife		 * VLR	- (LgKnife * xLgKnife)		- (LgKnife * xSOV)	- (LgKnife * LEOxCIV)			,						
			"Base.BGMachete",	LgKnife		 * VLR	- (LgKnife * xLgKnife)		- (LgKnife * xUSA)	- (LgKnife * LEOxCIV)			,						
			"Base.RamboKnife",	LgKnife		 * VLR	- (LgKnife * xLgKnife)		- (LgKnife * xUSA)	- (LgKnife * LEOxCIV)			,						
			"Base.Butterfly",	SmKnife		 * VLR	- (SmKnife * xSmKnife)		- (SmKnife * xPAC)				,						
			"Base.PushDagger",	SmKnife		 * VLR	- (SmKnife * xSmKnife)		- (SmKnife * xUSA)				,						
			"Base.Karambit",	SmKnife		 * VLR	- (SmKnife * xSmKnife)		- (SmKnife * xPAC)				,						
			"Base.Tactical_Axe",	Axe		 * VLR	- (Axe * xAxe)		- (Axe * xUSA)	- (Axe * LEOxCIV)			,						
			"Base.Tactical_Sickle",	Axe		 * VLR	- (Axe * xAxe)		- (Axe * xUSA)	- (Axe * LEOxCIV)			,						
			"Base.Trench_Axe",	Axe		 * VLR	- (Axe * xAxe)		- (Axe * xEUR)	- (Axe * LEOxCIV)			,						
			"Base.Broad_Axe",	Axe		 * VLR	- (Axe * xAxe)		- (Axe * xEUR)	- (Axe * LEOxCIV)			,						
			"Base.DingDong",	Blunt		 * VLR	- (Blunt * xBlunt)		- (Blunt * xUSA)				,						
			"Base.MilitaryBaton",	Blunt		 * VLR	- (Blunt * xBlunt)		- (Blunt * xUSA)				,						
			"Base.ASP_B",	Blunt		 * VLR	- (Blunt * xBlunt)		- (Blunt * xUSA)				,						
			"Base.KillBill",	Sword		 * VLR	- (Sword * xSword)		- (Sword * xPAC)	- (Sword * LEOxCIV)			,						
			"Base.CH_WarSword",	Sword		 * VLR	- (Sword * xSword)		- (Sword * xPAC)	- (Sword * LEOxCIV)			,						
			"Base.Conan_Sword",	Sword		 * VLR	- (Sword * xSword)		- (Sword * xUSA)	- (Sword * LEOxCIV)			,						
																			
			"Base.Launcher",	Part		 * VLR	- (wGREN * xGREN)		- (Part * xUSA)		- (Part * LEOxMIL)		,						
			"Base.Launcher2",	Part		 * VLR	- (wGREN * xGREN)		- (Part * xSOV)		- (Part * LEOxMIL)		,						
			"Base.Bipod",	Part		 * VLR	- (Part * xPart)						,						
			"Base.Ammobelt",	Part		 * VLR	- (Part * xPart)						,						
			"Base.Sling_1",	Part		 * VLR	- (Part * xPart)						,						
			"Base.Sling_2",	Part		 * VLR	- (Part * xPart)						,						
			"Base.Sling_3",	Part		 * VLR	- (Part * xPart)						,						
			"Base.ForeGrip",	Part		 * VLR	- (Part * xPart)						,						
			"Base.Grip_Magpul",	Part		 * VLR	- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_MLOK",	Part		 * VLR	- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_TG",	Part		 * VLR	- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_BCM",	Part		 * VLR	- (Part * xPart)					- (Part * x90)	,						
			"Base.Grip_Fold",	Part		 * VLR	- (Part * xPart)						,						
			"Base.Light_Small",	Light		 * VLR	- (Light * xLight)						,						
			"Base.Light_Large",	Light		 * VLR	- (Light * xLight)						,						
			"Base.Light_Medium_M952V",	Light		 * VLR	- (Light * xLight)						,						
			"Base.Laser_Green",	Light		 * VLR	- (Light * xLight)						,						
			"Base.Laser_Red",	Light		 * VLR	- (Light * xLight)						,						
			"Base.Laser_DVAL",	Light		 * VLR	- (Light * xLight)						,						
			"Base.Laser_PEQ15",	Light		 * VLR	- (Light * xLight)				- (Light * LEOxMIL)		,						
			"Base.Light_Small_Socom",	Light		 * VLR	- (Light * xLight)				- (Light * LEOxMIL)		,						
			"Base.Light_Small_TLR_7AH",	Light		 * VLR	- (Light * xLight)						,						
			"Base.Light_Medium_M900",	Light		 * VLR	- (Light * xLight)						,						
			"Base.Suppressor_Pistol",	Suppress		 * VLR	- (Suppress * xSuppress)				- (Suppress * LEOxMIL)		,						
			"Base.Suppressor_Rifle",	Suppress		 * VLR	- (Suppress * xSuppress)						,						
			"Base.Suppressor_Shotgun",	Suppress		 * VLR	- (Suppress * xSuppress)				- (Suppress * LEOxMIL)		,						
			"Base.Suppressor_BMG",	Suppress		 * VLR	- (Suppress * xSuppress)	- (wBMG * xBMG)			- (Suppress * LEOxMIL)		,						
			"Base.Suppressor_Socom_Pistol",	Suppress		 * VLR	- (Suppress * xSuppress)				- (Suppress * LEOxMIL)		,						
			"Base.Suppressor_NorthStar_Pistol",	Suppress		 * VLR	- (Suppress * xSuppress)			- (Suppress * LEOxCIV)	- (Suppress * LEOxMIL)		,						
			"Base.Suppressor_PBS1_Rifle",	Suppress		 * VLR	- (Suppress * xSuppress)						,						
			"Base.Suppressor_PBS4_Rifle",	Suppress		 * VLR	- (Suppress * xSuppress)						,						
			"Base.Suppressor_ROME_BMG",	Suppress		 * VLR	- (Suppress * xSuppress)	- (wBMG * xBMG)			- (Suppress * LEOxMIL)		,						
			"Base.Bayonet_M4",	Part		 * VLR	- (Part * xPart)			- (Part * LEOxCIV)	- (Part * LEOxMIL)		,						
			"Base.Bayonet_AK",	Part		 * VLR	- (Part * xPart)		- (Part * xSOV)	- (Part * LEOxCIV)	- (Part * LEOxMIL)		,						
			"Base.Bayonet_M1917",	Part		 * VLR	- (Part * xPart)			- (Part * LEOxCIV)	- (Part * LEOxMIL)		,						
			"Base.Bayonet_Type30",	Part		 * VLR	- (Part * xPart)			- (Part * LEOxCIV)	- (Part * LEOxMIL)		,						
			"Base.Choke_Full",	Part		 * VLR	- (Part * xPart)						,						
			"Base.Choke_Full_Dbl",	Part		 * VLR	- (Part * xPart)			- (Part * LEOxCIV)			,						
			"Base.Compensator",	Part		 * VLR	- (Part * xPart)						,						
			"Base.LinearComp_Noveske",	Part		 * VLR	- (Part * xPart)						,						
			"Base.MuzzleBrake",	Part		 * VLR	- (Part * xPart)						,						
			"Base.MuzzleBrake_DK1",	Part		 * VLR	- (Part * xPart)						,						
			"Base.MuzzleBrake_DK2",	Part		 * VLR	- (Part * xPart)						,						
			"Base.Pad",	Part		 * VLR	- (Part * xPart)						,						
			"Base.Carrier_12g",	Part		 * VLR	- (Part * xPart)						,						
			"Base.GhostRing",	Optic		 * VLR	- (Optic * xOptic)						,						
			"Base.Sight_MicroDot",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)		- (Optic * x90)	,						
			"Base.Sight_RaceDot",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)			,						
			"Base.Sight_Phantom_XL",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)		- (Optic * x90)	,						
			"Base.Sight_OKP7_Reflex",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)	- (Optic * LEOxCIV)		- (Optic * x90)	,						
			"Base.Sight_SRS",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_EOTech",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_3xEOTech",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_4xACOG",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_4xACOG_ECO",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_6xELCAN",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_6xHensoldt",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_KOBRA",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)	- (Optic * LEOxCIV)			,						
			"Base.Scope_4xPSO",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)	- (Optic * LEOxCIV)			,						
			"Base.Scope_12xPSO",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)	- (Optic * LEOxCIV)			,						
			"Base.Scope_1-4x",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_Trijicon_1-6x",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_TANGO6T_1-6x",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_20x",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Thermal",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)		- (Optic * LEOxMIL)		,						
			"Base.Sight_Thermal_AK",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)		- (Optic * LEOxMIL)		,						
			"Base.Sight_Aimpoint",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Aimpoint_Dot",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Fiber_Shotgun",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)			,						
			"Base.Sight_Mepro_M21",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_Mepro_MOR",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_UH1",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_C79",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Sight_SUSAT",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xEUR)	- (Optic * LEOxCIV)	- (Optic * LEOxMIL)		,						
			"Base.Sight_Raven",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_G28_Scope",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xEUR)				,						
			"Base.Scope_ATACR7_F1",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Scope_ATACR7_F1r",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_ACRO",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_MRO",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_SRO",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_Nikon",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)			,						
			"Base.Sight_M8",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_VX3",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_1P87",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)	- (Optic * LEOxCIV)			,						
			"Base.Sight_1P63",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)	- (Optic * LEOxCIV)			,						
			"Base.Sight_Brownells",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)			,						
			"Base.Sight_L2",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xEUR)	- (Optic * LEOxCIV)			,						
			"Base.Sight_Malcom",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)			,						
			"Base.Sight_LUX",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)			,						
			"Base.Sight_NO32",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)	- (Optic * LEOxCIV)			,						
			"Base.Sight_PKAS",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)				,						
			"Base.Sight_PU",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xSOV)	- (Optic * LEOxCIV)			,						
			"Base.Sight_XPS",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)			- (Optic * x90)	,						
			"Base.Sight_PVS4",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Burris_NV",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Sight_Armasight_NV",	Optic		 * VLR	- (Optic * xOptic)		- (Optic * xUSA)				,						
			"Base.Barrel_308",	w308		 * VLR	- (w308 * xPart)	- (w308 * xBREAK)	- (w308 * xUSA)	- (w308 * LEOxCIV)			,						
			"Base.Barrel_3006",	w3006		 * VLR	- (w3006 * xPart)	- (w3006 * xBREAK)	- (w3006 * xUSA)	- (w3006 * LEOxCIV)			,						
			"Base.Barrel_4570",	w4570		 * VLR	- (w4570 * xPart)	- (w4570 * xBREAK)	- (w4570 * xUSA)	- (w4570 * LEOxCIV)			,						
			"Base.Barrel_357",	w357		 * VLR	- (w357 * xPart)	- (w357 * xBREAK)	- (w357 * xUSA)	- (w357 * LEOxCIV)			,						
			"Base.Barrel_357_Short",	w357		 * VLR	- (w357 * xPart)	- (w357 * xBREAK)	- (w357 * xUSA)	- (w357 * LEOxCIV)			,						
			"Base.Barrel_45LC",	w45LC		 * VLR	- (w45LC * xPart)	- (w45LC * xBREAK)	- (w45LC * xUSA)	- (w45LC * LEOxCIV)			,						
			"Base.Barrel_45LC_Short",	w45LC		 * VLR	- (w45LC * xPart)	- (w45LC * xBREAK)	- (w45LC * xUSA)	- (w45LC * LEOxCIV)			,						
			"Base.TriggerGroup_AR",	Part		 * VLR	- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)				,						
			"Base.TriggerGroup_AK",	Part		 * VLR	- (Part * xPart)	- (Part * xAUTO)	- (Part * xSOV)				,						
			"Base.TriggerGroup_HK",	Part		 * VLR	- (Part * xPart)	- (Part * xAUTO)	- (Part * xEUR)				,						
			"Base.TriggerGroup_FN",	Part		 * VLR	- (Part * xPart)	- (Part * xAUTO)	- (Part * xEUR)				,						
			"Base.Switch_Striker_Black",	Part 		 * VLR	- (Part * xPart)	- (Part  * xAUTO)	- (Part  * xUSA)			- (Part  * x90)	,						
			"Base.Switch_Striker_Red",	Part		 * VLR	- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)			- (Part * x90)	,						
			"Base.Switch_Striker_Blue",	Part		 * VLR	- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)			- (Part * x90)	,						
			"Base.Switch_Striker_Green",	Part		 * VLR	- (Part * xPart)	- (Part * xAUTO)	- (Part * xUSA)			- (Part * x90)	,						
			"Base.Grip_G10_Blue",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_G10_Brown",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_G10_Black",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_G10_Red",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_G10_Green",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_G10_Pink",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_Alloy_Black",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_Alloy_Silver",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_Alloy_Blue",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_Alloy_Red",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_Wood",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_Punisher",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)				,						
			"Base.Grip_Spartan",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_Ivory",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)	- (Part * LEOxCIV)			,						
			"Base.Grip_Carbon",	Part		 * VLR	- (Part * xPart)		- (Part * xUSA)				,						
																			
			"Base.AmmoCan30_22",	AmmoCan		 * VLR	* w22	- (AmmoCan * x22)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan30_380",	AmmoCan		 * VLR	* w380	- (AmmoCan * x380)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan30_57",	AmmoCan		 * VLR	* w57	- (AmmoCan * x57)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)		- (AmmoCan * x90)	,						
			"Base.AmmoCan30_9",	AmmoCan		 * VLR	* w9	- (AmmoCan * x9)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_38",	AmmoCan		 * VLR	* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_357",	AmmoCan		 * VLR	* w357	- (AmmoCan * x357)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_45",	AmmoCan		 * VLR	* w45	- (AmmoCan * x45)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan30_44",	AmmoCan		 * VLR	* w44	- (AmmoCan * x44)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan30_45LC",	AmmoCan		 * VLR	* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan30_4570",	AmmoCan		 * VLR	* w4570	- (AmmoCan * x4570)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan30_50MAG",	AmmoCan		 * VLR	* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)		- (AmmoCan * x90)	,						
			"Base.AmmoCan50_223",	AmmoCan		 * VLR	* w223	- (AmmoCan * x223)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_556",	AmmoCan		 * VLR	* w556	- (AmmoCan * x556)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_762x39",	AmmoCan		 * VLR	* w762x39	- (AmmoCan * x762x39)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_545x39",	AmmoCan		 * VLR	* w545x39	- (AmmoCan * x545x39)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_762x54r",	AmmoCan		 * VLR	* w762x54r	- (AmmoCan * x762x54r)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_308",	AmmoCan		 * VLR	* w308	- (AmmoCan * x308)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_3006",	AmmoCan		 * VLR	* w3006	- (AmmoCan * x3006)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_410",	AmmoCan		 * VLR	* w45LC	- (AmmoCan * x45LC)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_20",	AmmoCan		 * VLR	* w20g	- (AmmoCan * x20g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_12",	AmmoCan		 * VLR	* w12g	- (AmmoCan * x12g)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_10",	AmmoCan		 * VLR	* w10g	- (AmmoCan * x10g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_4",	AmmoCan		 * VLR	* w4g	- (AmmoCan * x4g)	- (AmmoCan * xAmmoCan)	- (AmmoCan * LEOxCIV)			,						
			"Base.AmmoCan50_50",	AmmoCan		 * VLR	* wBMG	- (AmmoCan * xBMG)	- (AmmoCan * xAmmoCan)				,						
			"Base.AmmoCan50_HE",	AmmoCan		 * VLR	* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * LEOxMIL)		,						
			"Base.AmmoCan50_HE",	AmmoCan		 * VLR	* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * LEOxMIL)		,						
			"Base.AmmoCan50_INC",	AmmoCan		 * VLR	* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * LEOxMIL)		,						
			"Base.AmmoCan50_INC",	AmmoCan		 * VLR	* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * LEOxMIL)		,						
			"Base.AmmoCan50_ROCKET",	AmmoCan		 * VLR	* wGREN	- (AmmoCan * xGREN)	- (AmmoCan * xAmmoCan)		- (AmmoCan * LEOxMIL)		,						
																			
			"Base.BB177Box",	AmmoBox		 * VLR	* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.PB68Bag",	AmmoBox		 * VLR	* wBB	- (AmmoBox * xBB)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.Bullets22Box",	AmmoBox		 * VLR	* w22	- (AmmoBox * x22)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.Bullets380Box",	AmmoBox		 * VLR	* w380	- (AmmoBox * x380)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.Bullets57Box",	AmmoBox		 * VLR	* w57	- (AmmoBox * x57)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)		- (AmmoBox * x90)	,						
			"Base.Bullets9mmBox",	AmmoBox		 * VLR	* w9	- (AmmoBox * x9)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets38Box",	AmmoBox		 * VLR	* w357	- (AmmoBox * x357)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets357Box",	AmmoBox		 * VLR	* w357	- (AmmoBox * x357)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets45Box",	AmmoBox		 * VLR	* w45	- (AmmoBox * x45)	- (AmmoBox * xAmmoBox)				,						
			"Base.Bullets44Box",	AmmoBox		 * VLR	* w44	- (AmmoBox * x44)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.Bullets45LCBox",	AmmoBox		 * VLR	* w45LC	- (AmmoBox * x45LC)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.Bullets4570Box",	AmmoBox		 * VLR	* w4570	- (AmmoBox * x4570)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.Bullets50MAGBox",	AmmoBox		 * VLR	* wBMG	- (AmmoBox * xBMG)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)		- (AmmoBox * x90)	,						
			"Base.223Box",	AmmoBox		 * VLR	* w223	- (AmmoBox * x223)	- (AmmoBox * xAmmoBox)				,						
			"Base.556Box",	AmmoBox		 * VLR	* w556	- (AmmoBox * x556)	- (AmmoBox * xAmmoBox)				,						
			"Base.762x39Box",	AmmoBox		 * VLR	* w762x39	- (AmmoBox * x762x39)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.545x39Box",	AmmoBox		 * VLR	* w545x39	- (AmmoBox * x545x39)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.762x54rBox",	AmmoBox		 * VLR	* w762x54r	- (AmmoBox * x762x54r)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.308Box",	AmmoBox		 * VLR	* w308	- (AmmoBox * x308)	- (AmmoBox * xAmmoBox)				,						
			"Base.3006Box",	AmmoBox		 * VLR	* w3006	- (AmmoBox * x3006)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.410gShotgunShellsBox",	AmmoBox		 * VLR	* w45LC	- (AmmoBox * x45LC)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.20gShotgunShellsBox",	AmmoBox		 * VLR	* w20g	- (AmmoBox * x20g)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.ShotgunShellsBox",	AmmoBox		 * VLR	* w12g	- (AmmoBox * x12g)	- (AmmoBox * xAmmoBox)				,						
			"Base.10gShotgunShellsBox",	AmmoBox		 * VLR	* w10g	- (AmmoBox * x10g)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.4gShotgunShellsBox",	AmmoBox		 * VLR	* w4g	- (AmmoBox * x4g)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.50BMGBox",	AmmoBox		 * VLR	* wBMG	- (AmmoBox * xBMG)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.Bolt_Bear",	AmmoBox		 * VLR	* wBOW	- (AmmoBox * xBOW)		- (AmmoBox * LEOxCIV)			,						
			"Base.Bolt_Bear_Pack",	AmmoBox		 * VLR	* wBOW	- (AmmoBox * xBOW)	- (AmmoBox * xAmmoBox)	- (AmmoBox * LEOxCIV)			,						
			"Base.40HERound",	AmmoBox		 * VLR	* wGREN	- (AmmoBox * xGREN)			- (AmmoBox * LEOxMIL)		,						
			"Base.40INCRound",	AmmoBox		 * VLR	* wGREN	- (AmmoBox * xGREN)			- (AmmoBox * LEOxMIL)		,						
			"Base.HERocket",	AmmoBox		 * VLR	* wGREN	- (AmmoBox * xGREN)			- (AmmoBox * LEOxMIL)		,						
			"Base.Flare",	AmmoBox		 * VLR	* wFLAME	- (AmmoBox * xFLAME)					,						
			"Base.Grenade_Fragmentation",	AmmoBox	* LEOx	 * VLR	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)		- (AmmoBox* LEOx * LEOxMIL)		,						
			"Base.Grenade_Stick",	AmmoBox	* LEOx	 * VLR	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xEUR)		- (AmmoBox* LEOx * LEOxMIL)		,						
			"Base.Explosive_Landmine",	AmmoBox	* LEOx	 * VLR	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)		- (AmmoBox* LEOx * LEOxMIL)		,						
			"Base.Explosive_Claymore_P",	AmmoBox	* LEOx	 * VLR	* wGREN	- (AmmoBox * xGREN)	- (AmmoBox * xUSA)		- (AmmoBox* LEOx * LEOxMIL)		,						
																			
			"Base.38Speed",	StdMag	* w357 - (StdMag * xStdMag)	 * VLR	- (w357 * x357)	- (StdMag * xREV)					,						
			"Base.44Speed",	StdMag	* w44 - (StdMag * xStdMag)	 * VLR	- (w44 * x44)	- (StdMag * xREV)		- (StdMag * LEOxCIV)			,						
			"Base.SRM1208_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	 * VLR	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * LEOxCIV)		- (StdMag * x90)	,						
			"Base.SRM1212_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	 * VLR	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)	- (StdMag * LEOxCIV)		- (StdMag * x90)	,						
			"Base.SRM1216_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	 * VLR	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * x90)	,						
			"Base.SIX12_Cylinder",	StdMag	* w12g - (StdMag * xStdMag)	 * VLR	- (w12g * x12g)	- (StdMag * xREV)	- (StdMag * xUSA)			- (StdMag * x90)	,						
			"Base.CP33Clip",	StdMag	* w22 - (StdMag * xStdMag)	 * VLR	- (w22 * x22)		- (StdMag * xUSA)	- (StdMag * LEOxCIV)		- (StdMag * x90)	,						
			"Base.CP33_17MagBase",	ExtMag	* w22 - (ExtMag * xExtMag)	 * VLR	- (w22 * x22)		- (ExtMag * xUSA)	- (ExtMag * LEOxCIV)		- (ExtMag * x90)	,						
			"Base.22Clip",	StdMag	* w22 - (StdMag * xStdMag)	 * VLR	- (w22 * x22)			- (StdMag * LEOxCIV)			,						
			"Base.22ExtClip",	ExtMag	* w22 - (ExtMag * xExtMag)	 * VLR	- (w22 * x22)			- (ExtMag * LEOxCIV)			,						
			"Base.380Clip",	StdMag	* w380 - (StdMag * xStdMag)	 * VLR	- (w380 * x380)			- (StdMag * LEOxCIV)			,						
			"Base.380StdClip",	StdMag	* w380 - (StdMag * xStdMag)	 * VLR	- (w380 * x380)			- (StdMag * LEOxCIV)			,						
			"Base.380ExtClip",	ExtMag	* w380 - (ExtMag * xExtMag)	 * VLR	- (w380 * x380)			- (ExtMag * LEOxCIV)			,						
			"Base.9mmSSClip",	StdMag	* w9 - (StdMag * xStdMag)	 * VLR	- (w9 * x9)						,						
			"Base.9mmSSExtClip",	StdMag	* w9 - (StdMag * xStdMag)	 * VLR	- (w9 * x9)						,						
			"Base.9mmClip",	StdMag	* w9 - (StdMag * xStdMag)	 * VLR	- (w9 * x9)						,						
			"Base.9mmExtClip",	ExtMag	* w9 - (ExtMag * xExtMag)	 * VLR	- (w9 * x9)						,						
			"Base.45DSClip",	StdMag	* w45 - (StdMag * xStdMag)	 * VLR	- (w45 * x45)						,						
			"Base.45DSExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	 * VLR	- (w45 * x45)						,						
			"Base.45Clip",	StdMag	* w45 - (StdMag * xStdMag)	 * VLR	- (w45 * x45)			- (StdMag * LEOxCIV)	- (StdMag * LEOxMIL)		,						
			"Base.45ExtClip",	ExtMag	* w45 - (ExtMag * xExtMag)	 * VLR	- (w45 * x45)			- (ExtMag * LEOxCIV)	- (ExtMag * LEOxMIL)		,						
			"Base.44Clip",	StdMag	* w44 - (StdMag * xStdMag)	 * VLR	- (w44 * x44)			- (StdMag * LEOxCIV)			,						
			"Base.50Clip",	StdMag	* wBMG - (StdMag * xStdMag)	 * VLR	- (wBMG * xBMG)			- (StdMag * LEOxCIV)			,						
			"Base.223StdClip",	StdMag	* w223 - (StdMag * xStdMag)	 * VLR	- (w223 * x223)						,						
			"Base.223ExtClip",	ExtMag	* w223 - (ExtMag * xExtMag)	 * VLR	- (w223 * x223)						,						
			"Base.556Clip",	StdMag	* w556 - (StdMag * xStdMag)	 * VLR	- (w556 * x556)						,						
			"Base.308StdClip",	StdMag	* w308 - (StdMag * xStdMag)	 * VLR	- (w308 * x308)						,						
			"Base.308ExtClip",	ExtMag	* w308 - (ExtMag * xExtMag)	 * VLR	- (w308 * x308)						,						
			"Base.3006ExtClip",	ExtMag	* w3006 - (ExtMag * xExtMag)	 * VLR	- (w3006 * x3006)		- (ExtMag * xUSA)	- (ExtMag * LEOxCIV)			,						
			"Base.SVDClip",	StdMag	* w762x54r - (StdMag * xStdMag)	 * VLR	- (w762x54r * x762x54r)		- (StdMag * xSOV)	- (StdMag * LEOxCIV)			,						
			"Base.ASHClip",	StdMag	* wBMG - (StdMag * xStdMag)	 * VLR	- (wBMG * xBMG)		- (StdMag * xSOV)	- (StdMag * LEOxCIV)		- (StdMag * x90)	,						
			"Base.M82Clip",	StdMag	* wBMG - (StdMag * xStdMag)	 * VLR	- (wBMG * xBMG)		- (StdMag * xUSA)		- (StdMag * LEOxMIL)		,						
			"Base.M1Clip",	StdMag	* w3006 - (StdMag * xStdMag)	 * VLR	- (w3006 * x3006)		- (StdMag * xUSA)	- (StdMag * LEOxCIV)			,						
			"Base.SKSClip",	StdMag	* w762x39 - (StdMag * xStdMag)	 * VLR	- (w762x39 * x762x39)		- (StdMag * xSOV)	- (StdMag * LEOxCIV)			,						
			"Base.1903Clip",	StdMag	* w308 - (StdMag * xStdMag)	 * VLR	- (w308 * x308)			- (StdMag * LEOxCIV)			,						
			"Base.545StdClip",	StdMag	* w545x39 - (StdMag * xStdMag)	 * VLR	- (w545x39 * x545x39)		- (StdMag * xSOV)	- (StdMag * LEOxCIV)			,						
			"Base.AKClip",	StdMag	* w762x39 - (StdMag * xStdMag)	 * VLR	- (w762x39 * x762x39)			- (StdMag * LEOxCIV)			,						
			"Base.ASVALClip",	ExtMag	* w9 - (ExtMag * xExtMag)	 * VLR	- (w9 * x9)		- (ExtMag * xSOV)	- (ExtMag * LEOxCIV)			,						
			"Base.VSSClip",	StdMag	* w9 - (StdMag * xStdMag)	 * VLR	- (w9 * x9)		- (StdMag * xSOV)	- (StdMag * LEOxCIV)			,						
			"Base.57Clip",	StdMag	* w57 - (StdMag * xStdMag)	 * VLR	- (w57 * x57)		- (StdMag * xEUR)			- (StdMag * x90)	,						
			"Base.P90Clip",	StdMag	* w57 - (StdMag * xStdMag)	 * VLR	- (w57 * x57)		- (StdMag * xEUR)			- (StdMag * x90)	,						
			"Base.SPASClip",	StdMag	* w12g - (StdMag * xStdMag)	 * VLR	- (w12g * x12g)		- (StdMag * xEUR)				,						
			"Base.22Drum",	DrumMag	* w22 - (DrumMag * xDrumMag)	 * VLR	- (w22 * x22)			- (DrumMag * LEOxCIV)			,						
			"Base.9mmDrum",	DrumMag	* w9 - (DrumMag * xDrumMag)	 * VLR	- (w9 * x9)						,						
			"Base.45Drum",	DrumMag	* w45 - (DrumMag * xDrumMag)	 * VLR	- (w45 * x45)						,						
			"Base.556Drum",	DrumMag	* w556 - (DrumMag * xDrumMag)	 * VLR	- (w556 * x556)						,						
			"Base.545Drum",	DrumMag	* w545x39 - (DrumMag * xDrumMag)	 * VLR	- (w545x39 * x545x39)		- (DrumMag * xSOV)	- (DrumMag * LEOxCIV)			,						
			"Base.762Drum",	DrumMag	* w762x39 - (DrumMag * xDrumMag)	 * VLR	- (w762x39 * x762x39)			- (DrumMag * LEOxCIV)			,						
			"Base.12gDrum",	DrumMag	* w12g - (DrumMag * xDrumMag)	 * VLR	- (w12g * x12g)						,						
			"Base.308Belt",	StdMag	* w308 - (StdMag * xStdMag)	 * VLR	- (w308 * x308)	- (wLMG * xLMG)			- (StdMag * LEOxMIL)		,						
			"Base.556Belt",	StdMag	* w556 - (StdMag * xStdMag)	 * VLR	- (w556 * x556)	- (wLMG * xLMG)			- (StdMag * LEOxMIL)		,						
			"Base.762x39Belt",	StdMag	* w762x39 - (StdMag * xStdMag)	 * VLR	- (w762x39 * x762x39)	- (wLMG * xLMG)			- (StdMag * LEOxMIL)		,						
			"Base.762x54rBelt",	StdMag	* w762x54r - (StdMag * xStdMag)	 * VLR	- (w762x54r * x762x54r)	- (wLMG * xLMG)	- (StdMag * xSOV)		- (StdMag * LEOxMIL)		,						
			"Base.556MiniCan",	StdMag	* w556 - (StdMag * xStdMag)	 * VLR	- (w556 * x556)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * LEOxMIL)		,						
			"Base.308MiniCan",	StdMag	* w308 - (StdMag * xStdMag)	 * VLR	- (w308 * x308)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * LEOxMIL)		,						
			"Base.50MiniCan",	StdMag	* wBMG - (StdMag * xStdMag)	 * VLR	- (wBMG * xBMG)	- (wMINI * xMINI)	- (StdMag * xUSA)		- (StdMag * LEOxMIL)		,						
			"Base.K11HEClip",	StdMag	* wGREN - (StdMag * xStdMag)	 * VLR	- (wGREN * xGREN)		- (StdMag * xKOR)		- (StdMag * LEOxMIL)	- (StdMag * x90)	,						
			"Base.M2A1_Tank",	ExtMag	* wFLAME - (ExtMag * xExtMag)	 * VLR	- (wFLAME * xFLAME)		- (ExtMag * xUSA)		- (ExtMag * LEOxMIL)		,						
			"Base.M2A1_Can",	StdMag	* wFLAME - (StdMag * xStdMag)	 * VLR	- (wFLAME * xFLAME)		- (StdMag * xUSA)		- (StdMag * LEOxMIL)		,						
			"Base.M2A1_Can",	StdMag	* wBB - (StdMag * xStdMag)	 * VLR	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * LEOxCIV)			,						
			"Base.Standard_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	 * VLR	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * LEOxCIV)			,						
			"Base.Large_PB_Hopper",	StdMag	* wBB - (StdMag * xStdMag)	 * VLR	- (wBB * xBB)		- (StdMag * xUSA)	- (StdMag * LEOxCIV)			,						
																			
			"Base.Case_Small8",	Case	* wFLAME	- (Case * xCase)	- (wFLAME * xFLAME)						,						
		}																	
	}																		
																			
	if (xArmor == 0) then					-- << MEANS ARMOR IS NOT DISABLED													
		print ("ARMOR DISTRO OVERRIDE OPTION ENABLED FOR VEHICLES")																	
		if getActivatedMods():contains("Brita_2") or getActivatedMods():contains("Brita_2_WIP") then									--	2	LOCKER REDUCER						
			print("Brita_2 DETECTEDâ€¦ INSERTING DISTRO IN MIL / SWAT / FIRE VEHICLES")								--	4	VEHICLE REDUCER						
																			
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Leather_Jacket_Bennett"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Field_Jacket"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Wolf_Jacket"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Tactical_Hood"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.BARS_Hoodie"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Gorka6_Hoodie"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.M65_Jacket"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Suit_Army"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Military_Coat_Long"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Jacket_Bomber"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Jacket_Polizei"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.ELA_Bomber"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.ANA_Shirts"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.ANA_Hood"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.ANA_Classic"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Officer_Overcoat"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.USCM_Jacket"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Winter_Jacket_Heavy"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Winter_Jacket_Camo_Heavy"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Coast_Jacket"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Paramedic_Jacket"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Police_Waterproof_Jacket"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Gunsmith_Jacket"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Viking_Fire_Jacket"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Shirts_Bennett"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Ela_Pants"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Anorak_Pants"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.M42_Pants"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.GEN2_Pants"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.USCM_Pants"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Chempak_Blauer"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Chempak_BRN"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Chempak_Tychem"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Chempak_Level"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Tac_Boots"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Boots_Trackstar"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.USCM_Boots"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Military_Gaiter"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.OZK_Gaiter"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.SET_Boots"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_Sniper_Pack"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_ARVN_Rucksack"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_ST53_Set"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_ZIP"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_SSO"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_Savotta"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_Bush"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_Hunting"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_Radio_Pack"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_SCBA"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_Tactical_Alice"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_M2A1_Pack"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_Hazard_Cross"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.ELA_Bag"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.OMNI_Bag"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.KIP5"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.AP3"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.IP46"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Sheriff_Bag"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Trauma_Bag"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bushcraft_Bag"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Army_Duffle_Bag"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_Tactical_Belt_Front"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_D3M"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_Duty_Belt_Front"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_Blackhawk"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_X_Vest"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_SKS_Vest"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_AK_Vest"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bottle_Bag"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Rig_Smersh"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Rig_Smersh_A"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Rig_Smersh_B"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Rig_Smersh_C"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Rig_ELA"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.K1_Bag"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Radio_Rig"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.C420_PAPR"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Shotgun_Rig"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Belt_Pack_AR"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Belt_Pack_Gas"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Belt_Pack_Pouch"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Belt_Pack_Duty"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Belt_Pack_War"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.D3CR"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_Tactical_Boonie"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_Tactical_Boonie_Fold"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_Tactical_Cap"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_Tactical_Cap_Camo"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_Patrol_Cap"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_Tactical_Beret"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Officer_Hat"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Police_Officer_Hat"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bear_Mask"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_FAST_Opscore"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_Gentex_Helmet"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_HGU56"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_PSGT_Helmet"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_PSGT_Helmet_Camo"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Wolf_Helmet"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.USCM_Helmet"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Viper_Helmet"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Maska_1_Helmet"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.6B6_Helmet"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Fire_Helmet"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_HGU56_Shield"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_HGU56_Visor"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_PSGT_Visor"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_Riot_Visor"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_PSGT_Neck"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Maska_1_Visor"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.6B6_Visor"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Vityaz_Visor"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.ZSH_Visor"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Fire_Visor"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Fire_Visor_UP"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Viper_Helmet_Shield"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Armor_Defender"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Armor_Defender_Set"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_Plate_Carrier"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Armor_6B13"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Sheriff_Vest"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Sheriff_Vest_Full"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Wolf_Plate_Carrier"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Wolf_Plate_Carrier_B"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.EXO_Suit"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.SET_Armor"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.SET_Armor_FULL"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.USCM_Armor"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Wolf_Knee_Pad"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Wolf_Holster"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Dozer_Leg"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Dozer_Arm"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Dozer_Pouch"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.SET_Leg_Pouch"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Shell_Chest_Bandolier"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Shell_Arm_Bandolier"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Shell_Thigh_Bandolier"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Shell_Arm_Bandolier_B"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Shell_Thigh_Bandolier_B"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Glasses_X1000"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Glasses_Napier"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Glasses_Crewman_Goggles"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.SET_Goggles"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_Sordin"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_Astrocom"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.SET_Headset"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Aviation_Headsets"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Comtac_Headsets"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Comtac4_Headsets"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bowman_Headsets"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_Sam_NV"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.NV_PVS5"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.NV_PNV_57"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.NV_PVS7"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.NV_PVS21"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_Sniper_Hood"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Bag_Sniper_Suit"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Military_Cloak"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Balaclava_Mask_1"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Balaclava_Mask_2"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Balaclava_Mask_3"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Balaclava_Mask_4"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Balaclava_Mask_5"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Balaclava_Mask_6"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_MSA_Gas_Mask"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_MSA_Gas_Mask_AMP"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)	- (Armor * x90)	);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.K1_Gasmask"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.K1_Hood"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.K1_Half"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.PMK1_Gasmask"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.PMK1_Half"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.PMK2_Gasmask"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.PMK2_Half"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.S10_Gasmask"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.S10_Gasmask_Set"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)		- (Armor * MILxNON)		);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.GP4U_Gasmask"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.MM1_Gasmask"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.SHMS_Gasmask"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.SHMS_Gasmask_Set"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.GP5M_Gasmask"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.PMG_Gasmask"						);							
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)				);							
																			
																			
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.Viking_Fire_Jacket"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.Chempak_Blauer"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.Chempak_BRN"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.Chempak_Tychem"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.Chempak_Level"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.Bag_SCBA"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.Bag_Hazard_Cross"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.Trauma_Bag"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.Fire_Helmet"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.Fire_Visor"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.Hat_MSA_Gas_Mask"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.Hat_MSA_Gas_Mask_AMP"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.K1_Gasmask"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.K1_Hood"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.K1_Half"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.PMK1_Gasmask"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.PMK1_Half"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.PMK2_Gasmask"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.PMK2_Half"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.S10_Gasmask"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.S10_Gasmask_Set"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.GP4U_Gasmask"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.MM1_Gasmask"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.SHMS_Gasmask"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.SHMS_Gasmask_Set"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.GP5M_Gasmask"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,			"Base.PMG_Gasmask"						);							
			table.insert(VehicleDistributions.Fire["TruckBed"].items,				Armor * VLR	- (Armor * xArmor)				);							
		end																	
																			
		if getActivatedMods():contains("DRK_1") then																	
			print("DRK_1 DETECTEDâ€¦ INSERTING DISTRO IN MIL / SWAT VEHICLES")																
																			
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_PASGT_Helmet"					);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_TPASGT_Helmet"					);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Interceptor_Armor"					);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Interceptor_Armor_v"					);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Interceptor_Armor_s"					);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Marpat_Jacket_w"					);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Marpat_Jacket_d"					);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Marpat_Pants_w"					);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Marpat_Pants_d"					);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Interceptor_Pouches"					);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_USMC_Cap_w"					);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,			"Base.Hat_USMC_Cap_d"					);								
			table.insert(VehicleDistributions.A26Military_Trunk.items,				Armor * VLR	- (Armor * xArmor)			);								
		end																	
	else print ("ARMOR DISTRO OVERRIDE OPTION DISABLED NOT INSERTED IN VEHICLES")																		
	end																		
																			
	local distributionTable = VehicleDistributions[1]																		
																			
	VehicleDistributions.A26Military = {																		
		M998Trunk = VehicleDistributions.A26Military_Trunk;								-- FILIBUSTER									
		TruckBed = VehicleDistributions.A26Military_Trunk;																	
		TruckbedOpen = VehicleDistributions.A26Military_Trunk;																	
	--	P19ABigTrunkCompartment0 = VehicleDistributions.bigTrunk;																	
	--	P19ASmallTrunkCompartment1 = VehicleDistributions.A26Military_Trunk;																	
		P19ASmallTrunkCompartment2 = VehicleDistributions.A26Military_Trunk;								-- KI5 OSHKOSH									
		P19ASmallTrunkCompartment3 = VehicleDistributions.A26Military_Trunk;								-- KI5 OSHKOSH									
		M101A3Trunk = VehicleDistributions.A26Military_Trunk;								-- FILIBUSTER									
	}																		
																			
	VehicleDistributions.A26SWAT = {																		
		TruckBed = VehicleDistributions.A26SWAT_Trunk;																	
		FR_VehicleArmory = VehicleDistributions.A26SWAT_Trunk;								-- FILIBUSTER									
		FR_VehicleArmory2 = VehicleDistributions.A26SWAT_Trunk;								-- FILIBUSTER									
	}																		
																			
	------------------------------------------------																		
	-- KI5 MILITARY VEHICLES --																		
	------------------------------------------------																		
	distributionTable["92amgeneralM998"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["83amgeneralM923"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["86oshkoshUSMC"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["86oshkoshFRTR55"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["TrailerM1082"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["TrailerM101A3cargo"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["67commando"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["67commandoT50"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["67commandoPolice"] = { Normal = VehicleDistributions.A26SWAT; }																		
	------------------------------------------------																		
	-- FILIBUSTER MILITARY VEHICLES --																		
	------------------------------------------------																		
	distributionTable["hmmwvht"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["hmmwvtr"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["m35a2bed"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["m35a2covered"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["m151canvas"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["chevystepvanswat"] = { Normal = VehicleDistributions.A26SWAT; }																		
	------------------------------------------------																		
	-- KKSHUNP MILITARY VEHICLES --																		
	------------------------------------------------																		
	distributionTable["k311"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["k131"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["k511"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["k511_2"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["korando_rokmp"] = { Normal = VehicleDistributions.A26Military; }																		
	------------------------------------------------																		
	-- NYPH MILITARY VEHICLES --																		
	------------------------------------------------																		
	distributionTable["kamaz5350"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["kamaztyphoon"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["gaztigr"] = { Normal = VehicleDistributions.A26Military; }																		
	------------------------------------------------																		
	-- CYT MILITARY VEHICLES --																		
	------------------------------------------------																		
	distributionTable["XM93Desert"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["XM93Woodland"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["BRDM2"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["IFAV"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["Int4700Arm"] = { Normal = VehicleDistributions.A26SWAT; }																		
	------------------------------------------------																		
	-- HANSKAFFEE MILITARY VEHICLES --																		
	------------------------------------------------																		
	distributionTable["WZ551"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["WZ531_APC"] = { Normal = VehicleDistributions.A26Military; }																		
	------------------------------------------------																		
	-- BRITA MILITARY VEHICLES --																		
	------------------------------------------------																		
	distributionTable["k153"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["k153turret"] = { Normal = VehicleDistributions.A26Military; }																		
	distributionTable["k153police"] = { Normal = VehicleDistributions.A26SWAT; }																		
	distributionTable["k153emer"] = distributionTable["PickUpTruckLightsFire"]																		
end																			
																			
																			
if	isServer() then																		
	print("MULTI-PLAYER ADD DISTRO INIT ON EVENT")																		
	Events.OnPreDistributionMerge.Add(initGunFighterSandboxDistro)																		
--	Events.OnInitWorld.Add(initGunFighterSandboxDistro)																		
--	Events.OnNewGame.Add(initGunFighterSandboxDistro)																		
--	Events.OnGameStart.Add(initGunFighterSandboxDistro)																		
--	Events.OnDistributionMerge.Add(initGunFighterSandboxDistro)																		
--	Events.OnPostDistributionMerge.Add(initGunFighterSandboxDistro)																		
--	Events.OnServerFinishSaving.Add(initGunFighterSandboxDistro)																		
--	Events.OnPreMapLoad.Add(initGunFighterSandboxDistro)																		
--	Events.OnServerStartSaving.Add(initGunFighterSandboxDistro)																		
else	print("SINGLE-PLAYER INIT DISTRO ONCE")																		
	initGunFighterSandboxDistro()																		
end																			
																			

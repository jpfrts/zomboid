---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by THeartnet.
--- DateTime: 9/26/2022 19:39
---
require "RCExplosive.server.RCExplosive"
require "zCommon"

---@class RCExplosiveC4 : RCExplosive
RCExplosiveC4 = RCExplosive:derive("RCExplosiveC4");

RCExplosiveC4.explosiveSprites = {
    north = 'box_ex_1',
    west = 'box_ex_3',
    east = 'box_ex_0',
    south = 'box_ex_2'
};

RCExplosiveC4.plantingSounds = {
    activation = 'RCC4ActivationProcess',
    plantedMale = 'RCC4PlantingMale',
    plantedFemale = 'RCC4PlantingFemale'
};

RCExplosiveC4.ExplosionDamage = SandboxVars.RC.ExplosiveBaseDamage;
RCExplosiveC4.ExplosionBlastSquares = 2;
RCExplosiveC4.ExplosionSplashRadius = 3;
RCExplosiveC4.ExplosionSectionCount = 3;

function RCExplosiveC4.predicateExplosive(item)
    if item:isBroken() then return false end
    local type = item:getType()
    --print("Checking Type: "..tostring(type));
    local properlyLinkedExplosive = false;
    if (item:hasTag("RCExplosiveC4") or type == "RCExplosiveC4") then
        local remoteControlId = item:getRemoteControlID();
        if remoteControlId and remoteControlId > 0 then
            properlyLinkedExplosive = true;
        end
    end
    return properlyLinkedExplosive;
end

function RCExplosiveC4:render(x, y, z, square)
    --print("WE ARE RENDERING");

    ISBuildingObject.render(self, x, y, z, square);
end

local function getSpriteFacing(sprite)
    local facing;

    if RCExplosiveC4.explosiveSprites["north"] == sprite then
        facing = "N";
    end
    if RCExplosiveC4.explosiveSprites["west"] == sprite then
        facing = "W";
    end
    if RCExplosiveC4.explosiveSprites["east"] == sprite then
        facing = "E";
    end
    if RCExplosiveC4.explosiveSprites["south"] == sprite then
        facing = "S";
    end
    --print("Name Facing: "..tostring(facing));

    return facing;
end

---@version getValid
---@return nil or { targetWallObject, barricadeAbleIndex }
function RCExplosive:isValid(square)
    local approvedData;
    self.door = nil;
    self.window = nil;
    self.targetWallObject = nil;
    self.frame = nil;
    self.targetNorth = nil;
    self.targetProp = nil;
    self.barricadeAbleIndex = nil;
    self.facing = nil;
    if not self:haveMaterial(square) then return approvedData end

    --	if not buildUtil.canBePlace(self, square) then return false end
    if isClient() and SafeHouse.isSafeHouse(square, getSpecificPlayer(self.player):getUsername(), true) then
        return approvedData;
    end

    local currentPlayer = getPlayer();
    if not currentPlayer then
        return approvedData;
    end

    local playerInv = currentPlayer:getInventory();
    local explosiveC4Item = playerInv:getFirstEvalRecurse(self.predicateExplosive);

    if not explosiveC4Item then
        return approvedData;
    end

    local linkedRemoteId = explosiveC4Item:getRemoteControlID();
    if linkedRemoteId == -1 then
        return approvedData;
    end

    local sprite = self:getSprite();
    for i=0,square:getObjects():size()-1, 1 do
        local obj = square:getObjects():get(i);
        if sprite == obj:getTextureName() then
            return approvedData
        end
    end

    local facing = getSpriteFacing(sprite);
    self.facing = facing;
    local draggedSquare = square;

    if draggedSquare:isSolid() or draggedSquare:isSolidTrans() then
        return approvedData;
    end

    if facing == "S" or facing == "E" then
        local worldObjects = draggedSquare:getObjects();

        if worldObjects and not worldObjects:isEmpty() then
            local objs_size = worldObjects:size();

            local specialObjects = draggedSquare:getSpecialObjects();

            if specialObjects:size() > 0 then
                for i = 0, specialObjects:size() - 1, 1 do
                    local props = specialObjects:get(i):getProperties();
                    if props then
                        local propNames = props:getPropertyNames();
                        for i = 0, propNames:size() -1, 1 do
                            --print("Special Prop: "..tostring(propNames:get(i)));
                        end
                        local _facing = props:Is("Facing") and props:Val("Facing") or nil;
                        if _facing then
                            --print("Special Facing: "..tostring(_facing));
                        end
                    end
                end
            end


            if objs_size > 0 then
                --print("Objects size: "..tostring(objs_size));
                for i = 0, objs_size - 1, 1 do
                    local obj = worldObjects:get(i);
                    local props = obj:getProperties();

                    --print("S or E Extreme Spam, object: "..tostring(obj:getType()));
                    if props then
                        local propNames = props:getPropertyNames();
                        for i = 0, propNames:size() -1, 1 do
                            ---print("Prop: "..tostring(propNames:get(i)));
                        end
                    end

                    if IsoWindowFrame.isWindowFrame(obj, true) then
                        if facing == "S" then
                            --print("Is Window Frame");
                            self.targetWallObject = obj;
                            self.frame = true;
                            self.targetNorth = true;
                        end
                    end
                    if IsoWindowFrame.isWindowFrame(obj, false) then
                        if facing == "E" then
                            --print("Is Window Frame");
                            self.targetWallObject = obj;
                            self.frame = true;
                            self.targetNorth = false;
                        end
                    end

                    if instanceof(obj, "IsoThumpable") then
                        --if IsoWindowFrame.isWindowFrame(obj) then
                        if obj:isWindow() then
                            local movedWindow = obj:getSquare():getWindow(obj:getNorth())
                            if facing == "S" and obj:getNorth() then
                                self.targetWallObject = obj;
                                --print("Thumpable, IsWindow");
                                -- ??
                            end

                            if facing == "E" and (not obj:getNorth()) then
                                self.targetWallObject = obj;
                                --print("Thumpable, IsWindow");
                                -- ??
                            end
                        end
                    end

                    -- Window Part
                    if instanceof(obj, "IsoWindow") then
                        --[[print("Window: "..tostring(obj)..", IsWindowW: "..tostring(obj:getSprite():getProperties():Is(IsoFlagType.windowW))..
                                ", IsWindowN: "..tostring(obj:getSprite():getProperties():Is(IsoFlagType.windowN))..", objNorth: "..tostring(obj:getNorth()));]]
                        if facing == "S" and (obj:getNorth() and obj:getSprite():getProperties():Is(IsoFlagType.windowN)) then
                            self.window = obj;
                            self.targetNorth = true;
                            self.frame = nil;
                            --print("WindowN");
                        end
                        if facing == "E" and (obj:getNorth() == false and obj:getSprite():getProperties():Is(IsoFlagType.windowW)) then
                            self.window = obj;
                            self.targetNorth = false;
                            self.frame = nil;
                            --print("WindowW");
                        end
                    end
                    -- Door Part

                    if facing == "S" then
                        if props then
                            if props:Is("DoorWallN") then
                                --print("S, Door Frame Part Found");
                                self.targetWallObject = obj;
                                self.targetProp = "DoorWallN";
                            end
                        end

                        if instanceof(obj, "IsoDoor") or (instanceof(obj, "IsoThumpable") and obj:isDoor()) then
                            -- Door Part
                            if (obj:getNorth()) then --and obj:getSprite():getProperties():Is("DoorWallN")) then
                                --print("S Door Found");
                                self.door = obj;
                                self.targetNorth = true;
                                self.targetProp = nil;
                            end
                        end
                    end

                    if facing == "E"  then
                        if props then
                            if props:Is("DoorWallW") then
                                -- Door Frame Part
                                --print("E, Door Frame Part Found");
                                self.targetWallObject = obj;
                                self.targetProp = "DoorWallW";
                            end
                        end
                        -- Door Part
                        if instanceof(obj, "IsoDoor") or (instanceof(obj, "IsoThumpable") and obj:isDoor()) then
                            if (obj:getNorth() == false) then  --and obj:getSprite():getProperties():Is("DoorWallW")) then
                                --print("E Door Found");
                                self.door = obj;
                                self.targetNorth = false;
                                self.targetProp = nil;
                            end
                        end
                    end

                    if  ((not self.door) and (not self.window)) then
                        if props then
                            -- Solid Wall Part
                            if facing == "S" and props:Is("WallN") then
                                --print("WallS detected!");
                                self.targetWallObject = obj;
                                self.targetProp = "WallN";
                            end

                            if facing == "E" and props:Is("WallW") then
                                --print("WallE detected!");
                                self.targetWallObject = obj;
                                self.targetProp = "WallW";
                            end

                            if (facing == "S" or facing == "E") and props:Is("WallNW") then
                                --print("WallNW - SE detected!");
                                self.targetWallObject = obj;
                                self.targetProp = "WallNW";
                            end
                        end
                    end
                end
            end
        end
    end

    if facing == "N" or facing == "W" then
        local actualObjectSquare;
        if facing == "N" then
            actualObjectSquare = getCell():getGridSquare(draggedSquare:getX(), draggedSquare:getY() + 1,draggedSquare:getZ());
        else
            actualObjectSquare = getCell():getGridSquare(draggedSquare:getX() + 1, draggedSquare:getY(), draggedSquare:getZ());
        end

        if not actualObjectSquare then return approvedData end

        local worldObjects = actualObjectSquare:getObjects();
        if worldObjects and not worldObjects:isEmpty() then
            local objs_size = worldObjects:size();

            local specialObjects = draggedSquare:getSpecialObjects();

            if specialObjects:size() > 0 then
                for i = 0, specialObjects:size() - 1, 1 do
                    local props = specialObjects:get(i):getProperties();
                    if props then
                        local propNames = props:getPropertyNames();
                        for i = 0, propNames:size() -1, 1 do
                            --print("Special Prop: "..tostring(propNames:get(i)));
                        end
                        local _facing = props:Is("Facing") and props:Val("Facing") or nil;
                        if _facing then
                            --print("Special Facing: "..tostring(_facing));
                        end
                    end
                end
            end

            if objs_size > 0 then
                --print("Objects size: "..tostring(objs_size));

                -- Window Part
                for i = 0, objs_size - 1, 1 do
                    local obj = worldObjects:get(i);
                    local props = obj:getProperties();

                    --print("N or W Extreme Spam, object: "..tostring(obj:getType()));
                    if props then
                        local propNames = props:getPropertyNames();
                        for i = 0, propNames:size() -1, 1 do
                            --print("Prop: "..tostring(propNames:get(i)));
                        end
                    end


                    if IsoWindowFrame.isWindowFrame(obj, true) then
                        if facing == "N" then
                            --print("Is Window Frame");
                            self.targetWallObject = obj;
                            self.frame = true;
                            self.targetNorth = true;
                        end
                    end
                    if IsoWindowFrame.isWindowFrame(obj, false) then
                        if facing == "W" then
                            --print("Is Window Frame");
                            self.targetWallObject = obj;
                            self.frame = true;
                            self.targetNorth = false;
                        end
                    end

                    if instanceof(obj, "IsoThumpable") then
                        --if IsoWindowFrame.isWindowFrame(obj) then
                        if obj:isWindow() then
                            local movedWindow = obj:getSquare():getWindow(obj:getNorth());
                            if facing == "N" and obj:getNorth() then
                                self.targetWallObject = obj;
                                -- ?
                                --print("Thumpable, IsWindow");
                            end

                            if facing == "W" and (not obj:getNorth()) then
                                self.targetWallObject = obj;
                                --print("Thumpable, IsWindow");
                                -- ?
                            end
                        end
                    end

                    if instanceof(obj, "IsoWindow") then
                        --[[print("Window: "..tostring(obj)..", IsWindowW: "..tostring(obj:getSprite():getProperties():Is(IsoFlagType.windowW))..
                                ", IsWindowN: "..tostring(obj:getSprite():getProperties():Is(IsoFlagType.windowN))..", objNorth: "..tostring(obj:getNorth()));]]
                        if facing == "N" and (obj:getNorth() and obj:getSprite():getProperties():Is(IsoFlagType.windowN)) then
                            self.window = obj;
                            self.targetNorth = true;
                            self.frame = nil;
                            --print("WindowN");
                        end
                        if facing == "W" and (obj:getNorth() == false and obj:getSprite():getProperties():Is(IsoFlagType.windowW)) then
                            self.window = obj;
                            self.targetNorth = false;
                            self.frame = nil;
                            --print("WindowW");
                        end
                    end

                    -- Door Part
                    if facing == "N" then
                        if props then
                            if props:Is("DoorWallN") then
                                -- No Door, Door Frame Part
                                --print("N No Door, Door Frame Part");
                                self.targetWallObject = obj;
                                self.targetProp = "DoorWallN";
                            end
                        end
                        -- Door Part
                        if instanceof(obj, "IsoDoor") or (instanceof(obj, "IsoThumpable") and obj:isDoor()) then
                            if (obj:getNorth()) then -- and obj:getSprite():getProperties():Is("DoorWallN")) then
                                --print("N Door Found");
                                self.door = obj;
                                self.targetNorth = true;
                                self.targetProp = nil;
                            end
                        end
                    end

                    if facing == "W" then
                        if props then
                            if props:Is("DoorWallW") then
                                -- No Door, Door Frame Part
                                --print("W No Door, Door Frame Part");
                                self.targetWallObject = obj;
                                self.targetProp = "DoorWallW";
                            end
                        end

                        -- Door Part
                        if instanceof(obj, "IsoDoor") or (instanceof(obj, "IsoThumpable") and obj:isDoor()) then
                            if (obj:getNorth() == false) then -- and obj:getSprite():getProperties():Is("DoorWallW")) then
                                --print("W Door Found");
                                self.door = obj;
                                self.targetNorth = false;
                                self.targetProp = nil;
                            end
                        end
                    end

                    if  ((not self.door) and (not self.window)) then
                        -- Solid Wall Part
                        if props then
                            if facing == "N" and props:Is("WallN") then
                                --print("WallN detected!");
                                self.targetWallObject = obj;
                                self.targetProp = "WallN";
                            end

                            if facing == "W" and props:Is("WallW") then
                                --print("WallW detected!");
                                self.targetWallObject = obj;
                                self.targetProp = "WallW";
                            end

                            if (facing == "N" or facing == "W") and props:Is("WallNW") then
                                --print("WallNW detected!");
                                self.targetWallObject = obj;
                                self.targetProp = "WallNW";
                            end
                        end
                    end
                end
            end
        end
    end

    local obj;
    if self.window then
        obj = self.window;
    end

    if self.door then
        obj = self.door;
    end

    if obj then
        self.barricadeAbleIndex = obj:getObjectIndex();
        self.targetWallObject = obj;

        --print("BarricadeAbleIndex: "..tostring(self.barricadeAbleIndex));
    end

    if self.targetWallObject then
        approvedData = { targetWallObject = self.targetWallObject, barricadeAbleIndex = self.barricadeAbleIndex };
    end

    return approvedData;
end

function RCExplosiveC4:codeIt(button, approvedData)
    if button.internal == "OK" then
        if button.parent.entry:getText() and button.parent.entry:getText() ~= "" then
            local codeName = button.parent.entry:getText();
            if string.len(codeName) > 16 then
                return;
            end

            local playerObj = getSpecificPlayer(self.player);
            self.targetWallObject = approvedData.targetWallObject;
            self.barricadeAbleIndex = approvedData.barricadeAbleIndex;

            local objectSquare = self.targetWallObject:getSquare();
            self.modData["rect_remoteControlId"] = self.remoteId;
            self.modData["rect_codeName"] = codeName;
            self.modData["rect_type"] = "RCExplosiveC4";
            self.modData["rect_charges"] = "1";
            self.modData["rect_guid"] = zCommon.generateRECTID(objectSquare:getX(), objectSquare:getY(), objectSquare:getZ(), self:getSprite());
            self.modData["rect_facing"] = self.facing;
            self.modData["rect_targetProp"] = self.targetProp;
            if self.targetNorth == true then
                self.modData["rect_targetNorth"] = "true";
            else
                self.modData["rect_targetNorth"] = "false";
            end
            self.modData["rect_targetBIndex"] = self.barricadeAbleIndex;
            if self.frame then
                self.modData["rect_targetFrame"] = "true";
            end
            if self.door then
                self.modData["rect_targetDoor"] = "true";
                self.isDoor = true;
            end
            if self.window then
                self.modData["rect_targetWindow"] = "true";
                self.isDoor = false;
            end

            if not AdjacentFreeTileFinder.isTileOrAdjacent(playerObj:getCurrentSquare(), self.targetSquare) then
                local adjacent = nil;

                if ISWorldObjectContextMenu.isThumpDoor(self.window) then
                    adjacent = AdjacentFreeTileFinder.FindWindowOrDoor(self.targetSquare, self.window, playerObj);
                else
                    if ISWorldObjectContextMenu.isThumpDoor(self.door) then
                        adjacent = AdjacentFreeTileFinder.FindWindowOrDoor(self.targetSquare, self.door, playerObj);
                    else
                        local edge = AdjacentFreeTileFinder.FindEdge(self.targetSquare, self.facing, playerObj, self.targetSquare);
                        if edge then
                            adjacent = AdjacentFreeTileFinder.Find(edge, playerObj);
                        end
                    end
                end

                if adjacent ~= nil then
                    ISTimedActionQueue.clear(playerObj);
                    ISTimedActionQueue.add(ISWalkToTimedAction:new(playerObj, adjacent));

                    if(self.window) then
                        if self.window:IsOpen() then
                            ISTimedActionQueue.add(ISOpenCloseWindow:new(playerObj, self.window, 0));
                        end
                    end
                    ISWorldObjectContextMenu.equip(playerObj, playerObj:getPrimaryHandItem(), self.name, self.north);
                    ISTimedActionQueue.add(RCExplosivePlantingAction:new(playerObj, self.targetWallObject, self, self.barricadeAbleIndex));
                end
            else
                if(self.window) then
                    if self.window:IsOpen() then
                        ISTimedActionQueue.add(ISOpenCloseWindow:new(playerObj, self.window, 0));
                    end
                end
                ISWorldObjectContextMenu.equip(playerObj, playerObj:getPrimaryHandItem(), self.name, self.north);
                ISTimedActionQueue.add(RCExplosivePlantingAction:new(playerObj, self.targetWallObject, self, self.barricadeAbleIndex));
            end
        end
    end
end

function RCExplosiveC4:create(x, y, z, north, sprite)
    --print("RCExplosiveC4 Create x: "..tostring(x)..",y: "..tostring(y)..",z: "..tostring(z)..", north: "..tostring(north)..",sprite: "..tostring(sprite));

    if not self.player then
        --print("Creating C4, player not found");
        return
    end

    local draggedSquare = getCell():getGridSquare(x, y, z);
    self.targetSquare = draggedSquare;

    self.north = north;
    self:setSprite(sprite);

    local approvedData = self:isValid(draggedSquare);

    if not approvedData then
        --print("Target wall object not found");
        return;
    end

    local modal = ISTextBox:new(0, 0, 280, 180, getText("Enter Code Name (max: 16)"), "Code Zero", self, self.codeIt, nil, approvedData);
    modal:initialise();
    modal:addToUIManager();
end

function RCExplosiveC4:new(name, square, remoteId, player, explosiveItem)
    local explosiveC4 = RCExplosive.new(self, name, square, remoteId, player, explosiveItem);

    explosiveC4:setSprite(RCExplosiveC4.explosiveSprites.west);
    explosiveC4:setNorthSprite(RCExplosiveC4.explosiveSprites.north);
    explosiveC4:setEastSprite(RCExplosiveC4.explosiveSprites.east);
    explosiveC4:setSouthSprite(RCExplosiveC4.explosiveSprites.south);
    explosiveC4.modData['need:Base.RCExplosiveC4'] = 1;

    return explosiveC4;
end

function RCExplosiveC4.onDestroy(thump, player)
    --print("On Destroy Triggered, thump: "..tostring(thump)..", player: "..tostring(player)..", self: "..tostring(self));
end

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by THeartnet.
--- DateTime: 9/19/2022 16:08
---
require "TimedActions/ISBaseTimedAction"
RCExplosivePlantingAction = ISBaseTimedAction:derive("RCExplosivePlantingAction")

function RCExplosivePlantingAction:isValid()
    return true;
end

function RCExplosivePlantingAction:update()
    local uispeed = UIManager.getSpeedControls():getCurrentGameSpeed();
    if uispeed ~= 1 then
        UIManager.getSpeedControls():SetCurrentGameSpeed(1);
    end

    self.character:faceThisObject(self.wallObject)
    self.character:setMetabolicTarget(Metabolics.UsingTools);
end

function RCExplosivePlantingAction:start()
    --print("Starting planting action for: "..tostring(self.wallObject));
    local pos = self.wallObject:getFacingPosition(self.character:getPlayerMoveDir());

    if not north then
        self.character:facePosition(pos:getX(), pos:getY()+1);
    else
        self.character:facePosition(pos:getX()+1, pos:getY());
    end
    --print("Anim to start");
    self:setActionAnim("Loot");
    self.character:SetVariable("LootPosition", "High");
    self.character:reportEvent("EventLootItem");
    self.sound = self.character:playSound(RCExplosiveC4.plantingSounds.activation);
end

function RCExplosivePlantingAction:stop()
    self.character:stopOrTriggerSound(self.sound);
    ISBaseTimedAction.stop(self);
end

function RCExplosivePlantingAction:perform()
    --print("Activating");
    self.character:stopOrTriggerSound(self.sound);

    if self.barricadeAbleIndex then
        --print("Index:"..tostring(self.barricadeAbleIndex));
        local args = { x=self.wallObject:getX(), y=self.wallObject:getY(), z=self.wallObject:getZ(), index=self.barricadeAbleIndex, condition=1,
                       isDoor = self.explosiveObject.isDoor,
                       targetX = self.explosiveObject.targetSquare:getX(), targetY = self.explosiveObject.targetSquare:getY(), targetZ = self.explosiveObject.targetSquare:getZ(),
                       sprite = self.explosiveObject.sprite, north = self.explosiveObject.north, explosiveObject = self.explosiveObject };
        sendClientCommand('Explosive', 'ExplosiveBarricade', args);
    else
        local args = { targetX = self.explosiveObject.targetSquare:getX(), targetY = self.explosiveObject.targetSquare:getY(), targetZ = self.explosiveObject.targetSquare:getZ(),
                        sprite = self.explosiveObject.sprite, north = self.explosiveObject.north, explosiveObject = self.explosiveObject};
        sendClientCommand('Explosive', 'ExplosiveOnly', args);
    end

    self.character:removeFromHands(self.explosiveObject.explosiveSource);
    if self.explosiveObject.explosiveSource:getContainer() then
        self.explosiveObject.explosiveSource:getContainer():Remove(self.explosiveObject.explosiveSource);
    else
        self.character:getInventory():Remove(self.explosiveObject.explosiveSource);
    end

    local plantedSound;
    if self.character:isFemale() then
        plantedSound = RCExplosiveC4.plantingSounds.plantedFemale;
    else
        plantedSound = RCExplosiveC4.plantingSounds.plantedMale;
    end

    getSoundManager():PlayWorldSound(plantedSound, self.character:getCurrentSquare(), 0, 4, 1, false);
    ISBaseTimedAction.perform(self);
end

function RCExplosivePlantingAction:new(character, wallObject, explosiveObject, barricadeAbleIndex)
    --print("character: "..tostring(character)..", explosiveObject: "..tostring(explosiveObject)..", wallObject: "..tostring(wallObject)..", BarricadeableIndex: "..tostring(barricadeAbleIndex));
    local o = {};
    setmetatable(o, self);
    self.__index = self;
    o.character = character;
    o.wallObject = wallObject;
    o.explosiveObject = explosiveObject;
    o.barricadeAbleIndex = barricadeAbleIndex;
    o.maxTime = 200;

    return o;
end


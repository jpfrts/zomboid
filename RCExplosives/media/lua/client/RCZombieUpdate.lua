---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by THeartnet.
--- DateTime: 4/16/2023 00:27
---
require "zCommon"

ExplosionFleshSounds = {["0"]='RCExplosionSoundFlesh01', ["1"]='RCExplosionSoundFlesh02' }
local recentArrivals = {};

if not isClient() and not isServer() and not isCoopHost() then
    SINGLEPLAYER = true;
end

-- Mod Data Private Index, since we can't rely on modData auto sync - it happens by not exposed or documented inner triggers
-- In this piece of code, we don't want to sync anything with others, we want only handle our own local data except "Kill" commands
local function RC_MDPI(propertyName)
    local userName;
    if SINGLEPLAYER then
        -- SOME MODS IN SINGLEPLAYER CHANGES THE MAIN PLAYER TO BE SOMEONE ELSE RATHER THAN PLAYER. EX. SuperbSurvivors
        userName = GameTime:getInstance():getModData()["RC_SP_PlayerUserName"];
    else
        local currentPlayer = getPlayer();
        userName = currentPlayer:getUsername();
    end

    local privateProperty = ""..tostring(userName).."_"..tostring(propertyName).."";

    return privateProperty;
end

local function resetZombieRCData(zombie, full)
    if not zombie then return end;
    -- Client Side Reset
    if full then
        zombie:getModData()[RC_MDPI("fX")] = nil;
        zombie:getModData()[RC_MDPI("fY")] = nil;
        zombie:getModData()[RC_MDPI("fX")] = nil;
        zombie:getModData()[RC_MDPI("killedByNeo")] = nil;
    end

    zombie:getModData()[RC_MDPI("rc_executioner_id")] = nil;
    zombie:getModData()[RC_MDPI("ticksToFall")] = nil;
    zombie:getModData()[RC_MDPI("flySpeedX")] = nil;
    zombie:getModData()[RC_MDPI("flySpeedY")] = nil;

    zombie:getModData()[RC_MDPI("rcXn")] = nil;
    zombie:getModData()[RC_MDPI("rcYn")] = nil;
    zombie:getModData()[RC_MDPI("rcZn")] = nil;

    zombie:getModData()[RC_MDPI("higherAltitude")] = nil;
    zombie:getModData()[RC_MDPI("rc_death_clock")] = nil;
    zombie:getModData()[RC_MDPI("toTheMoon")] = nil;
end

local function RC_AreWeAreInShowRange(epiX, epiY, player)
    local answer = false;

    local tX = epiX;
    local tY = epiY;

    local playerX = player:getX();
    local playerY = player:getY();

    local showRadius = 120;
    local minX = tX - showRadius;
    local maxX = tX + showRadius;
    local minY = tY - showRadius;
    local maxY = tY + showRadius;

    if playerX >= minX and playerX <= maxX then
        if playerY >= minY and playerY <= maxY then
            answer = true;
        end
    end

    return answer;
end

function RC_OnFlightNews(module, command, args)
    if module ~= "RC_Explosion" then return end
    if command ~= "FlightNews" then return end

    --print("Flyability: "..tostring(SandboxVars.RC.Flyability));
    --print("Flight News Received for flightPacific7500: "..tostring(args.flightPacific7500)..
    --        ", capitanId: "..tostring(args.kiraId)..", epiX: "..tostring(args.epiX)..", epiY: "..tostring(args.epiY));

    local currentPlayer = getPlayer();
    if RC_AreWeAreInShowRange(args.epiX, args.epiY, currentPlayer) ~= true then
        --print("Skipping Explosive Show");
        return;
    end

    if SINGLEPLAYER then
        GameTime:getInstance():getModData()["RC_SP_PlayerUserName"] = currentPlayer:getUsername();
    end

    local airportMunchen = {};
    local epiSquare = getCell():getOrCreateGridSquare(args.epiX, args.epiY, 0);
    airportMunchen = epiSquare:getCell():getZombieList();

    --print("Airport total population: "..tostring(airportMunchen:size()));
    if airportMunchen then
        --print("Munchen Airport");
        for k, pacificPassenger in ipairs(args.flightPacific7500) do
            for i=0, airportMunchen:size()-1 do
                local localPassenger = airportMunchen:get(i)
                local passengerId;
                if SINGLEPLAYER then
                    passengerId = localPassenger:getID();
                else
                    passengerId = localPassenger:getOnlineID();
                end

                if pacificPassenger.onlineId == passengerId then
                    -- we don't wanna fly higher than moon and not again, or... who cares
                    --if not zombie:getModData().toTheMoon then

                    localPassenger:getModData()[RC_MDPI("rc_executioner_id")] = args.kiraId;
                    localPassenger:getModData()[RC_MDPI("ticksToFall")] = pacificPassenger.ticksToFall;
                    localPassenger:getModData()[RC_MDPI("flySpeedX")] = pacificPassenger.flySpeedX;
                    localPassenger:getModData()[RC_MDPI("flySpeedY")] = pacificPassenger.flySpeedY;

                    localPassenger:getModData()[RC_MDPI("rcXn")] = pacificPassenger.rcXn;
                    localPassenger:getModData()[RC_MDPI("rcYn")] = pacificPassenger.rcYn;
                    localPassenger:getModData()[RC_MDPI("rcZn")] = pacificPassenger.zLevel;

                    localPassenger:getModData()[RC_MDPI("fX")] = pacificPassenger.fX;
                    localPassenger:getModData()[RC_MDPI("fY")] = pacificPassenger.fY;
                    localPassenger:getModData()[RC_MDPI("fZ")] = pacificPassenger.fZ;

                    localPassenger:getModData()[RC_MDPI("higherAltitude")] = pacificPassenger.higherAltitude;
                    localPassenger:getModData()[RC_MDPI("rc_death_clock")] = 3.0;
                    localPassenger:getModData()[RC_MDPI("toTheMoon")] = "true";

                    recentArrivals[""..tostring(passengerId)..""] = true;

                    --print("Flight Pacific 7500, welcome on board passenger: "..tostring(localPassenger)..", id: "..tostring(passengerId));
                    --print("KiraId: "..tostring(args.kiraId)..", ticksToFall: "..tostring(pacificPassenger.ticksToFall)..
                    --        ", rcXn: "..tostring(pacificPassenger.rcXn)..", rcYn: "..tostring(pacificPassenger.rcYn)..", zLevel: "..tostring(pacificPassenger.zLevel)..
                    --        ", flySpeedX: "..tostring(pacificPassenger.flySpeedX)..", flySpeedY: "..tostring(pacificPassenger.flySpeedY)..
                    --        ", fX: "..tostring(pacificPassenger.fX)..", fY:"..tostring(pacificPassenger.fY)..", fZ: "..tostring(pacificPassenger.fZ)..
                    --        ", higherAltitude: "..tostring(pacificPassenger.higherAltitude));
                    --
                    --print("RC:MDPI PropertyExample: "..tostring(RC_MDPI("toTheMoon")));
                    break;
                end
            end
        end
    end
end

local function RC_ZombiePhysicsHandle(zombie)
    --print("PhysicsHandle property example: "..tostring(RC_MDPI("rc_clear")));
    if not zombie:getModData()[RC_MDPI("rc_clear")] then
        resetZombieRCData(zombie, true);
        zombie:getModData()[RC_MDPI("rc_clear")] = true;
    end
    if not zombie:getModData()[RC_MDPI("toTheMoon")] then return end
    if zombie:isDead() == true then return end;

    local zId;
    if SINGLEPLAYER then
        zId = zombie:getID();
    else
        zId = zombie:getOnlineID();
    end

    local executionerId = zombie:getModData()[RC_MDPI("rc_executioner_id")];
    local deathClock = zombie:getModData()[RC_MDPI("rc_death_clock")];

    local zNeo;
    local currentPlayer = getPlayer();

    if executionerId then
        if currentPlayer:getOnlineID() == executionerId then
            zNeo = currentPlayer;
            --print("Sir, You are promoted to kick them hard: "..tostring(zNeo:getUsername()));
        else
            --print("Not Neo found");
        end
    end

    if zombie:getModData()[RC_MDPI("killedByNeo")] == true then
        zombie:Kill(zNeo);
        return;
    end

    if not SandboxVars.RC.Flyability or SandboxVars.RC.Flyability == false then
        zombie:getModData()[RC_MDPI("killedByNeo")] = true;
        return;
    end

    if not deathClock or deathClock <= 0 then
        --print("Dead by time: "..tostring(zombie)..", Id: "..tostring(zId).." with flySpeedX: "..
        --        tostring(zombie:getModData()[RC_MDPI("flySpeedX")])..", flySpeedY: "..tostring(zombie:getModData()[RC_MDPI("flySpeedY")])..
        --        ", toTheMoon: "..tostring(zombie:getModData()[RC_MDPI("toTheMoon")])..", zombieZ: "..tostring(zombie:getZ()));

        zombie:getModData()[RC_MDPI("killedByNeo")] = true;
        return;
    else
        zombie:getModData()[RC_MDPI("rc_death_clock")] = deathClock - getGameTime():getRealworldSecondsSinceLastUpdate();
    end

    if not executionerId then
        print("Executioner not found");
        -- all below this point is too cruel for ordinary people, that only Neo could handle.
        return;
    end

    zombie:getModData()[RC_MDPI("rcXn")] = zombie:getModData()[RC_MDPI("rcXn")] + zombie:getModData()[RC_MDPI("flySpeedX")];
    zombie:getModData()[RC_MDPI("rcYn")] = zombie:getModData()[RC_MDPI("rcYn")] + zombie:getModData()[RC_MDPI("flySpeedY")];

    if zombie:getModData()[RC_MDPI("rcZn")] < zombie:getModData()[RC_MDPI("higherAltitude")] then
        local ticksToFall = zombie:getModData()[RC_MDPI("ticksToFall")];
        local explodeAcceleration = ticksToFall / 3;
        if explodeAcceleration < 1 then
            explodeAcceleration = 1;
        end

        zombie:getModData()[RC_MDPI("rcXn")] = zombie:getModData()[RC_MDPI("rcXn")] * explodeAcceleration;
        zombie:getModData()[RC_MDPI("rcYn")] = zombie:getModData()[RC_MDPI("rcYn")] * explodeAcceleration;
        zombie:getModData()[RC_MDPI("rcZn")] = zombie:getModData()[RC_MDPI("higherAltitude")];

        zombie:setX(zombie:getModData()[RC_MDPI("rcXn")]);
        zombie:setY(zombie:getModData()[RC_MDPI("rcYn")]);
        zombie:setZ(zombie:getModData()[RC_MDPI("rcZn")]);
    else
        if zombie:getModData()[RC_MDPI("fX")] and zombie:getModData()[RC_MDPI("fY")] and zombie:getModData()[RC_MDPI("fZ")] then
            zombie:setX(zombie:getModData()[RC_MDPI("fX")]);
            zombie:setY(zombie:getModData()[RC_MDPI("fY")]);

            --print("Zombie: "..tostring(zombie)..", id: "..tostring(zId)..", Last Zombie Z: "..tostring(zombie:getZ()));
            local intZ = toInt(zombie:getZ());
            if intZ ~= zombie:getZ() then
                --print("Still in air, Z: "..tostring(zombie:getZ())..", X: "..tostring(zombie:getX())..", Y: "..tostring(zombie:getY())..
                --        " Destination, Z: "..tostring(zombie:getModData()[RC_MDPI("fZ")])..", X: "..tostring(zombie:getModData()[RC_MDPI("fX")])..", Y: "..tostring(zombie:getModData()[RC_MDPI("fY")]));
                if intZ < zombie:getModData()[RC_MDPI("fZ")] then
                    local gravitySuppression = 0.6;
                    local suppressedZ = zombie:getModData()[RC_MDPI("fZ")] + gravitySuppression;
                    --print("Gravity Suppression: "..tostring(gravitySuppression)..", suppressedZ: "..tostring(suppressedZ));
                    zombie:setZ(suppressedZ);
                else
                    zombie:setZ(zombie:getModData()[RC_MDPI("fZ")]);
                end
            else
                --print("Executing: "..tostring(zombie)..", id: "..tostring(zId));
                if zNeo then
                    local randomSelector = round(ZombRand(0, 2));
                    local explosionSound = ExplosionFleshSounds[tostring(randomSelector)];
                    local soundSquare = getCell():getGridSquare(zombie:getModData()[RC_MDPI("fX")], zombie:getModData()[RC_MDPI("fY")], zombie:getModData()[RC_MDPI("fZ")] );
                    local soundRange = 60;
                    if soundSquare then
                        getSoundManager():PlayWorldSound(explosionSound, soundSquare, 0, soundRange, soundRange, false);
                    end

                    zombie:getModData()[RC_MDPI("killedByNeo")] = true;
                else
                    if SINGLEPLAYER then
                        local randomSelector = round(ZombRand(0, 2));
                        local explosionSound = ExplosionFleshSounds[tostring(randomSelector)];
                        local soundSquare = getCell():getGridSquare(zombie:getModData()[RC_MDPI("fX")], zombie:getModData()[RC_MDPI("fY")], zombie:getModData()[RC_MDPI("fZ")] );
                        local soundRange = 60;
                        if soundSquare then
                            getSoundManager():PlayWorldSound(explosionSound, soundSquare, 0, soundRange, soundRange, false);
                        end
                    end
                    zombie:getModData()[RC_MDPI("killedByNeo")] = true;
                    --print("Not Neo Kills Id: "..tostring(zId).." at Z: "..tostring(zombie:getZ()));
                end
            end
        else
            --print("No parameters - fX: "..tostring(zombie:getModData()[RC_MDPI("fX")])..", fY: "..tostring(zombie:getModData()[RC_MDPI("fY")])..", fZ: "..tostring(zombie:getModData()[RC_MDPI("fZ")] ));
            zombie:getModData()[RC_MDPI("killedByNeo")] = true;
        end
    end
end

local function RC_OnPostTrauma(zombie)
    if not zombie:getModData()[RC_MDPI("killedByNeo")] then return end

    --print("I see you Deaddy");
    --print("But who are you,.. "..tostring(zombie), ", Id: "..tostring(zombie:getOnlineID())..", at Z: "..tostring(zombie:getZ()));

    zombie:getModData()[RC_MDPI("rc_clear")] = nil;
end

local function RC_CorpseRelocation(container)
    local result;
    if container and instanceof(container, "IsoDeadBody") then
        if container:getModData() then
            if container:getModData()[RC_MDPI("killedByNeo")] then
                local containerId;
                if SINGLEPLAYER then
                    containerId = container:getID();
                else
                    containerId = container:getOnlineID();
                end

                if not recentArrivals[""..tostring(containerId)..""] then return end

                if not SINGLEPLAYER then
                    --print("I found you, my sacred locker: "..tostring(containerId));
                    if container:getModData()[RC_MDPI("fX")] and container:getModData()[RC_MDPI("fY")] and container:getModData()[RC_MDPI("fZ")] then
                        if      container:getX() ~= container:getModData()[RC_MDPI("fX")] or
                                container:getY() ~= container:getModData()[RC_MDPI("fY")] or
                                container:getZ() ~= container:getModData()[RC_MDPI("fZ")] then
                            --print("Here is your new home");
                            container:setX(container:getModData()[RC_MDPI("fX")]);
                            container:setY(container:getModData()[RC_MDPI("fY")]);
                            container:setZ(container:getModData()[RC_MDPI("fZ")]);
                            container:update();
                            result = true;
                        end
                    end
                end

                recentArrivals[""..tostring(containerId)..""] = nil;
            end
        end
    end
    return result;
end

local function RC_OnLastTouch(container)
    if not container then return end;

    --print("Container:"..tostring(container));
    if not instanceof(container, "IsoDeadBody") then return end;
    if not container:getModData()[RC_MDPI("rc_clear")] then return end;
    RC_CorpseRelocation(container);
end

local function RC_Nanny()
    if SINGLEPLAYER then return end;

    --print("Hello little kid, I'm your mummy..");
    local deaddyList = getCell():getObjectList();
    local updateRequired;
    if deaddyList then
        for i = 0, deaddyList:size()-1, 1 do
            local deaddy = deaddyList:get(i);
            local result = RC_CorpseRelocation(deaddy);
            if result then
                updateRequired = true;
            end
        end

        if updateRequired then
            IsoDeadBody.updateBodies();
        end
    end
end

local function RC_OnZombieUpdate(zombie)
    RC_ZombiePhysicsHandle(zombie);
end

Events.OnServerCommand.Add(RC_OnFlightNews);
Events.OnZombieUpdate.Add(RC_OnZombieUpdate);
Events.OnZombieDead.Add(RC_OnPostTrauma);
Events.OnContainerUpdate.Add(RC_OnLastTouch);
Events.EveryOneMinute.Add(RC_Nanny);
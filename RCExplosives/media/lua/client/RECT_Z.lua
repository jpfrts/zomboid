---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by THeartnet.
--- DateTime: 2/25/2023 13:00
---
if isServer() then return end
print("RECT_Z Client Initialized");

require "Moveables/ISMoveableTools"
require "Moveables/ISMoveableSpriteProps"

if not RECT_Z then
    RECT_Z = {};
    RECT_Z.rectList = {};
end

local function InitRECT()
    if not isServer() and not isClient() then
        if not RECT_Z then
            RECT_Z = {};
            RECT_Z.rectList = {};
        end

        if not ModData.exists("rdc_z_mod_data") then
            --print("rdc_z_mod_data not exist, initializing");
            RDC_Z_MODDATA_Init();
        end

        RECT_Z.rectList = ModData.get("rdc_z_mod_data")["rdc_z_rect_list"];
        RECT_Z.SPListen = true;
    else
        ModData.request("rdc_z_mod_data");
    end
end

function RECT_Z:SPBridge_On_RDCModDataUpdate()
    --print("SP Module data updated RECT_Z");
    RECT_Z.rectList = ModData.get("rdc_z_mod_data")["rdc_z_rect_list"];
end

local function On_RECTModDataReceived(module, packet)
    if module ~= "rdc_z_mod_data" then return end
    --print("Received RDC_Z data");

    if (not packet) then
        --print("aborted OnReceiveGlobalModData in rdcClient ");
    else
        ModData.add(module, packet);
        --print("Module data updated");

        if not RECT_Z then
            RECT_Z = {};
            RECT_Z.rectList = {};
        end

        RECT_Z.rectList = ModData.get("rdc_z_mod_data")["rdc_z_rect_list"];
        --[[for k,v in ipairs(RDC_Z.rdcList) do
            if v then
                print("ListMember X: "..tostring(v.x)..", Y: "..tostring(v.y)..",Z: "..tostring(v.z)
                ..", ModData RemoteName: "..tostring(v.remoteName)..", RemoteId: "..tostring(v.remoteControlId));
            end
        end]]
    end
end

function RECT_Z.prerenderInjection()
    local selfObj = RECT_Z.modal;
    selfObj.prerenderOriginal(selfObj);

    local valP = (selfObj.charges.currentValue-selfObj.charges.minValue)/(selfObj.charges.maxValue-selfObj.charges.minValue);
    local posX = selfObj.charges.sliderBarDim.x+(selfObj.charges.sliderBarDim.w*valP);
    selfObj.charges:drawText(tostring(selfObj.charges.currentValue), posX - 3, -17, 1, 1, 1, 1, UIFont.Small);
end

local function FindRectObject(square)
    local rectObject = nil;

    for i=0,square:getObjects():size()-1, 1 do
        local object = square:getObjects():get(i);

        local moveable = ISMoveableTools.isObjectMoveable(object);
        if moveable ~= nil then
            --print("Moveable found:"..tostring(moveable.name));
            --print("Object name:"..tostring(object:getName()));
            if (moveable.name == "Explosive Box") then
                local sprite = object:getSprite();
                --print("Object sprite: "..tostring(sprite));

                rectObject = object;
            end
        end
        if rectObject then break end
    end
    return rectObject;
end

function RECT_Z:callbackChargeChange(value, slider)
    -- empty placeholder
end

function RECT_Z.operateBoxAction (worldobjects, player, rect)
    if RECT_Z.operateBoxMenuOpened == true then
        return;
    end

    RECT_Z.operateBoxMenuOpened = true;
    RECT_Z.linkedRemoteId = nil;
    RECT_Z.controllerId = nil;

    local rectSquare = rect:getSquare();
    --print("OperateBoxAction Player Object: "..tostring(player));

    local rectBoxFound = false;
    local rectGuid = nil;
    local initialCharges = 0; -- HARDCODED, should be changed to real values from ModData
    local defaultName = getText("New Boom Box");
    RECT_Z.defaultControllerTip = getText("Drag linked controller in here, or rightclick to remove it.");
    local currentControllerTip = RECT_Z.defaultControllerTip;

    if RECT_Z then
        if RECT_Z.rectList then
            for k, v in ipairs(RECT_Z.rectList) do
                if v then
                    if (v.x == rectSquare:getX() and v.y == rectSquare:getY() and v.z == rectSquare:getZ()) then
                        if v.rectType  == "RCExplosiveBox" then
                            rectBoxFound = true;
                            rectGuid  = v.guid;
                            initialCharges = v.charges;
                            RECT_Z.linkedRemoteId = v.remoteControlId;
                            defaultName = v.codeName;
                            if v.remoteControlId then
                                currentControllerTip = "Linked to remote Id "..tostring(v.remoteControlId)..". rightclick to unlink it.";
                            end
                            break;
                        end
                    end
                end
            end
        end
    end

    local rectObject = { square = rectSquare, rect = rect,
                         guid = rectGuid, remoteControlId = RECT_Z.linkedRemoteId, charges =  initialCharges};

    local slider = ISSliderPanel:new(94, 107, 166, 20, modal, RECT_Z.callbackChargeChange);
    slider:initialise();
    slider:instantiate();

    if rectBoxFound == true and tonumber(initialCharges) > 0 then
        local playerInventory = getPlayer():getInventory();
        local charges = playerInventory:getItemsFromType("RCDynamite");
        local chargeHash = {};
        local chargesCount = 0;
        for i=0, charges:size() - 1, 1 do
            if (not chargeHash[charges:get(i)]) then
                chargeHash[charges:get(i)] = true;
                chargesCount = chargesCount + 1;
            end
        end
        --print("charges: "..tostring(charges));

        local chargesMax = tonumber(initialCharges);
        --print("chargesCount: "..tostring(chargesCount));
        --print("initialCharges: "..tostring(initialCharges));

        chargesMax = chargesCount + initialCharges;

        if tonumber(chargesMax)> 20 then
            chargesMax = 20;
        end
        slider:setValues(0, chargesMax, 1, 5, true);
        slider:setCurrentValue(initialCharges, true);
    else
        slider:setValues(0, 1, 1, 5, true);
        slider:setCurrentValue(0, true);
    end

    local chargeDropBox = ISItemDropBox:new (20, 99, 32, 32, false, modal, RECT_Z.addCharge, RECT_Z.removeCharge, RECT_Z.verifyItem, nil );
    chargeDropBox:initialise();
    chargeDropBox:setBackDropTex( getTexture("media/textures/item_RCDynamite.png"), 0.4, 1,1,1 );
    chargeDropBox:setDoBackDropTex( true );
    chargeDropBox:setToolTip( true, "Drag a dynamite charge in here, or rightclick to remove it." );

    if rectBoxFound == true then
        if tonumber(initialCharges) > 0 then
            local chargeItem = InventoryItemFactory.CreateItem("Base.RCDynamite");
            chargeDropBox:setStoredItem(chargeItem);
        end
    end

    local controllerDropBox = ISItemDropBox:new (54, 99, 32, 32, false, modal, RECT_Z.addController, RECT_Z.removeController, RECT_Z.verifyControllerItem, nil );
    controllerDropBox:initialise();
    controllerDropBox:setBackDropTex( getTexture("Item_RemoteCrafted"), 0.4, 1,1,1 );
    controllerDropBox:setDoBackDropTex( true );
    controllerDropBox:setToolTip( true, currentControllerTip );

    if rectBoxFound == true then
        if RECT_Z.linkedRemoteId and (tonumber(RECT_Z.linkedRemoteId) > 0) then
            local controllerItem = InventoryItemFactory.CreateItem("Base.RemoteCraftedV1");
            controllerDropBox:setStoredItem(controllerItem);
        end
    end

    --[[print("OperateBoxAction DropBox Object: "..tostring(chargeDropBox));
    print("OperateBoxAction Slider Object: "..tostring(slider));
    print("OperateBoxAction RECT Object: "..tostring(rectObject));]]
    local modal = ISBoxTextBox:new(0, 0, 280, 180, getText("Enter Your Box Name (max: 16)"), defaultName, self, RECT_Z.applyChargeAction, player, rectObject, slider, chargeDropBox);
    modal:initialise();

    modal.itemDropBox = chargeDropBox;
    modal.controllerDropBox = controllerDropBox;

    modal:addChild(slider);
    modal:addChild(modal.itemDropBox);
    modal:addChild(modal.controllerDropBox);

    modal.charges = slider;
    modal.prerenderOriginal = modal.prerender;
    RECT_Z.modal = modal;
    modal.prerender = RECT_Z.prerenderInjection;
    modal:addToUIManager();
end

function RECT_Z:applyChargeAction(button, rectObject, slider, dropBox, initialCharges)
    RECT_Z.operateBoxMenuOpened = false;
    if button.internal ~= "OK" then
        return;
    end

    local currentPlayer = getPlayer();

    --[[print("applyChargeAction Button Object: "..tostring(button));
    print("applyChargeAction Player Object: "..tostring(currentPlayer));
    print("applyChargeAction RECT Object: "..tostring(rectObject));
    print("applyChargeAction DropBox Object: "..tostring(dropBox));]]

    local codeName = nil;
    if button.parent.entry:getText() and button.parent.entry:getText() ~= "" then
        codeName = button.parent.entry:getText();
        if string.len(codeName) > 16 then
            return;
        end
    end

    if dropBox.boxOccupied == true then
        --print("Stored item confirmed");
    end

    local newCharges = slider:getCurrentValue();
    --print("Current item value confirmed: "..tostring(newCharges));

    if dropBox.boxOccupied ~= true and initialCharges ~= 0 then
        -- discharging to zero
    end

    local adjacent = nil;

    if not AdjacentFreeTileFinder.isTileOrAdjacent(currentPlayer:getCurrentSquare(), rectObject.square) then
        adjacent = AdjacentFreeTileFinder.Find(rectObject.square, currentPlayer);
    end

    if adjacent then
        ISTimedActionQueue.add(ISWalkToTimedAction:new(currentPlayer, adjacent));
    end

    if not RECT_Z.controllerId then
        RECT_Z.controllerId = RECT_Z.linkedRemoteId;
    end

    if dropBox.boxOccupied ~= true then
        newCharges = 0;
    end

    ISTimedActionQueue.add(RCDynamiteSetChargesAction:new(currentPlayer, rectObject.rect, rectObject.charges, newCharges,
            RECT_Z.controllerId, codeName, rectObject.guid));
end

function RECT_Z:addController(_controllers)
    if _controllers[1] then
        RECT_Z.modal.controllerDropBox:setStoredItem( _controllers[1] );
        RECT_Z.controllerId = _controllers[1]:getRemoteControlID();
    end

    --[[for _,item in ipairs(_controllers) do
        print("Controller: "..tostring(item:getDisplayName()));
    end]]
end

function RECT_Z:removeController()
    RECT_Z.modal.controllerDropBox:setStoredItem( nil );
    RECT_Z.controllerId = nil;
    RECT_Z.linkedRemoteId = nil;
    RECT_Z.modal.controllerDropBox:setToolTip(true, RECT_Z.defaultControllerTip);
end

function RECT_Z:setCharges(item)
    if item then
        RECT_Z.modal.itemDropBox:setStoredItem( item );
    end
end

function RECT_Z:addCharge(_charges)
    if _charges[1] then
        RECT_Z.modal.itemDropBox:setStoredItem( _charges[1] );
    end

    --for _,item in ipairs(_charges) do
    --    print("Charge: "..tostring(item:getDisplayName()));
    --end

    local chargeCount = 0;
    if _charges then
        chargeCount = RECT_Z.getTableLength(_charges);
    end

    if (chargeCount > 20) then
        chargeCount = 20;
    end

    RECT_Z.modal.charges:setValues(0, chargeCount, 1, 5, true);
    RECT_Z.modal.charges:setCurrentValue(1, true);
end

function RECT_Z:removeCharge()
    RECT_Z.modal.charges:setValues(0, 1, 1, 5, true);
    RECT_Z.modal.charges:setCurrentValue(0, true);

    RECT_Z.modal.itemDropBox:setStoredItem( nil );
end

function RECT_Z:verifyItem( _item )
    if _item:getFullType() == "Base.RCDynamite" then
        return true;
    end
end

function RECT_Z:verifyControllerItem( _item )
    if string.match(_item:getType(), "RemoteCrafted") then
        local remoteControlId = _item:getRemoteControlID();

        if remoteControlId and remoteControlId > 0 then
            return true;
        end
    end
end

function RECT_Z.getTableLength(T)
    local count = 0
    for _ in pairs(T) do
        count = count + 1
    end
    return count
end

local function On_ContextMenu (player, context, worldObjects)
    --print("In Attempt of DoorReceiveContextMenu");
    local clickedSquare = nil;
    for _,object in ipairs(worldObjects) do
        clickedSquare = object:getSquare();
        if clickedSquare then break end
    end

    if not clickedSquare then return end

    local rectObject = FindRectObject(clickedSquare);

    if rectObject then
        context:addOption("Operate with Explosive Box", worldObjects, RECT_Z.operateBoxAction, player, rectObject);
    end
end

function On_RECTCalibrated(module, command, args)
    if module ~= "RDC_Z" then return end
    if command ~= "RECT_CalibrationConfirmation" then return end

    --print("Calibrating for charges: "..tostring(args.charges));
    local currentPlayer = getPlayer();

    for i=1, args.charges, 1 do
        --print("Charge: "..tostring(i));
        currentPlayer:getInventory():AddItem(RCExplosiveBox.chargeName);
    end
end

Events.OnFillWorldObjectContextMenu.Add(On_ContextMenu);
Events.OnInitGlobalModData.Add(InitRECT);
Events.OnReceiveGlobalModData.Add(On_RECTModDataReceived);
Events.OnServerCommand.Add(On_RECTCalibrated);
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by THeartnet.
--- DateTime: 2/22/2023 20:51
---
require "TimedActions/ISBaseTimedAction"
require "zCommon"

RCDynamiteSetChargesAction = ISBaseTimedAction:derive("RCDynamiteSetChargesAction")
function RCDynamiteSetChargesAction:isValid()
    local requiredCharges = (tonumber(self.newCharges)-tonumber(self.initialCharges));
    if self.character:getInventory():getItemCount("Base.RCDynamite", false) >= requiredCharges then
        return true;
    end
end

function RCDynamiteSetChargesAction:update()
    local uispeed = UIManager.getSpeedControls():getCurrentGameSpeed();
    if uispeed ~= 1 then
        UIManager.getSpeedControls():SetCurrentGameSpeed(1);
    end

    self.character:faceThisObject(self.rectObject)
    self.character:setMetabolicTarget(Metabolics.UsingTools);
end

function RCDynamiteSetChargesAction:start()
    --print("Starting operating with dynamite box for: "..tostring(self.rectObject));

    local pos = self.rectObject:getFacingPosition(self.character:getPlayerMoveDir());

    if not north then
        self.character:facePosition(pos:getX(), pos:getY()+1);
    else
        self.character:facePosition(pos:getX()+1, pos:getY());
    end
    --print("Anim to start");
    self:setActionAnim("Loot");
    self.character:SetVariable("LootPosition", "Low");
    self.character:reportEvent("EventLootItem");
    self.sound = self.character:playSound("FireplaceAddFuel");
end

function RCDynamiteSetChargesAction:stop()
    if self.sound then self.character:stopOrTriggerSound(self.sound); end
    ISBaseTimedAction.stop(self);
end

function RCDynamiteSetChargesAction:perform()
    --print("Activating");
    self.character:stopOrTriggerSound(self.sound);

    -- CHECK IF THE PLAYER GOT REQUIRED CHARGES AND LINKED CONTROLLER
    if true then
        local rectSquare = self.rectObject:getSquare();

        if (tonumber(self.initialCharges) < tonumber(self.newCharges)) then
            local requiredCharges = (tonumber(self.newCharges)-tonumber(self.initialCharges));

            if self.character:getInventory():getItemCount("Base.RCDynamite", false) >= requiredCharges then
                for i=1, requiredCharges, 1 do
                    self.character:getInventory():Remove(RCExplosiveBox.chargeName);
                end
            else
                -- not enough required charges
                return;
            end
        end

        local args = { rectX = rectSquare:getX(), rectY = rectSquare:getY(), rectZ = rectSquare:getZ(),
                       remoteControlId = self.controllerId, rectSprite = tostring(self.rectObject:getTextureName()),
                       rectType = "RCExplosiveBox",
                       rectCodeName = self.codeName, rectCharges = self.newCharges, rectGuid = self.rectGuid };

        if self.rectGuid then
            --print("RECT calibrating: "..tostring(self.codeName)..", guid: "..tostring(self.rectGuid));
            sendClientCommand('RDC_Z', 'RECTCalibrated', args);
        else
            --print("RECT planting: "..tostring(self.codeName));
            sendClientCommand('RDC_Z', 'RECTPlanted', args);
        end

    end

    local plantedSound;
    if self.character:isFemale() then
        plantedSound = RCExplosiveBox.plantingSounds.plantedFemale;
    else
        plantedSound = RCExplosiveBox.plantingSounds.plantedMale;
    end

    getSoundManager():PlayWorldSound(plantedSound, self.character:getCurrentSquare(), 0, 80, 80, false);
    ISBaseTimedAction.perform(self);
end

function RCDynamiteSetChargesAction:new(character, rectObject, initialCharges, newCharges, controllerId, codeName, guid)
    --print("character: "..tostring(character)..", initial charges: "..tostring(initialCharges)..
    --        ", new charges: "..tostring(newCharges)..", controllerId: "..tostring(controllerId)..
    --        ", sprite: "..tostring(rectObject:getSprite()));
    local o = {};
    setmetatable(o, self);
    self.__index = self;
    o.character = character;
    o.rectObject = rectObject;
    o.initialCharges = initialCharges;
    o.newCharges = newCharges;
    o.codeName = codeName;
    o.rectGuid = guid;
    o.controllerId = controllerId;

    local chargeDif = zCommon._abs(tonumber(initialCharges)-tonumber(newCharges));
    if chargeDif < 2 then
        chargeDif = 2;
    end

    o.maxTime = chargeDif * 10;
    return o;
end